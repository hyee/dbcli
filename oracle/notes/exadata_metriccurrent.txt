METRIC_CURRENT:
===============

Refer to https://docs.oracle.com/en/engineered-systems/exadata-database-machine/sagug/exadata-storage-server-monitoring.html

GD_BY_FC_DIRTY =>  [GRIDDISK] The number of megabytes cached in flash cache that are not synchronized to the grid disk.
GD_IO_BY_R_LG =>  [GRIDDISK] The cumulative number of megabytes read in large blocks from a grid disk.
GD_IO_BY_R_LG_SEC =>  [GRIDDISK] The rate which is the number of megabytes read in large blocks per second from a grid disk.
GD_IO_BY_R_SCRUB =>  [GRIDDISK] The number of megabytes read from a grid disk by the scrubbing job.
GD_IO_BY_R_SCRUB_SEC =>  [GRIDDISK] The number of megabytes read per second from a grid disk by the scrubbing job.
GD_IO_BY_R_SM =>  [GRIDDISK] The cumulative number of megabytes read in small blocks from a grid disk.
GD_IO_BY_R_SM_SEC =>  [GRIDDISK] The rate which is the number of megabytes read in small blocks per second from a grid disk.
GD_IO_BY_W_LG =>  [GRIDDISK] The cumulative number of megabytes written in large blocks on a grid disk.
GD_IO_BY_W_LG_SEC =>  [GRIDDISK] The rate which is the number of megabytes written in large blocks per second on a grid disk.
GD_IO_BY_W_SM =>  [GRIDDISK] The cumulative number of megabytes written in small blocks on a grid disk.
GD_IO_BY_W_SM_SEC =>  [GRIDDISK] The rate which is the number of megabytes written in small blocks per second on a grid disk.
GD_IO_ERRS =>  [GRIDDISK] The cumulative number of I/O errors on a grid disk.
GD_IO_ERRS_MIN =>  [GRIDDISK] The rate of I/O errors on a grid disk per minute.
GD_IO_ERRS_SCRUB =>  [GRIDDISK] The number of bad 1 MB blocks detected during a scrubbing job on a grid disk.
GD_IO_RQ_R_LG =>  [GRIDDISK] The cumulative number of requests to read large blocks from a grid disk.
GD_IO_RQ_R_LG_SEC =>  [GRIDDISK] The rate which is the number of requests to read large blocks per second from a grid disk.
GD_IO_RQ_R_SCRUB =>  [GRIDDISK] The number of requests to read from a grid disk by the scrubbing job.
GD_IO_RQ_R_SCRUB_SEC =>  [GRIDDISK] The number of requests to read per second from a grid disk by the scrubbing job.
GD_IO_RQ_R_SM =>  [GRIDDISK] The cumulative number of requests to read small blocks from a grid disk.
GD_IO_RQ_R_SM_SEC =>  [GRIDDISK] The rate which is the number of requests to read small blocks per second from a grid disk.
GD_IO_RQ_W_LG =>  [GRIDDISK] The cumulative number of requests to write large blocks to a grid disk.
GD_IO_RQ_W_LG_SEC =>  [GRIDDISK] The rate which is the number of requests to write large blocks per second to a grid disk.
GD_IO_RQ_W_SM =>  [GRIDDISK] The cumulative number of requests to write small blocks to a grid disk.
GD_IO_RQ_W_SM_SEC =>  [GRIDDISK] The rate which is the number of requests to write small blocks per second to a grid disk.
GD_SP_BY_ALLOCATED =>  [GRIDDISK] The allocated physical space for grid disk in bytes.
GD_SP_IO_BY_PARTIAL =>  [GRIDDISK] The bytes returned by partial I/Os.
GD_SP_IO_BY_PARTIAL_SEC =>  [GRIDDISK] The bytes returned by partial I/Os per second.
GD_SP_IO_BY_REDIRECTED =>  [GRIDDISK] The sparse bytes redirected to original data block.
GD_SP_IO_BY_REDIRECTED_SEC =>  [GRIDDISK] The sparse bytes redirected to original data block per second.
GD_SP_IO_RQ_PARTIAL =>  [GRIDDISK] The number of I/O requests that returned partial data.
GD_SP_IO_RQ_PARTIAL_SEC =>  [GRIDDISK] The number of I/O requests that returned partial data per second.
GD_SP_PRCT_ALLOCATED =>  [GRIDDISK] The allocated physical space for grid disk by percentage. A warning alert is generated when space usage is more than 95%. A critical alert is generated when space usage reaches 99%.
DB_PC_BY_ALLOCATED =>  [RAMCACHE] Number of megabytes allocated in PMEM cache for this database.
PC_BY_ALLOCATED =>  [RAMCACHE] The number of megabytes allocated in PMEM cache. Tracks how many cachelines are used in the PMEM cache. If the value is close to the PMEM cache size, then the PMEM cache is fully populated.
N_MB_DROP =>  [INTERCONNECT] The cumulative number of megabytes dropped during transmission to a particular host.
N_MB_DROP_SEC =>  [INTERCONNECT] The rate which is the number of megabytes dropped per second during transmission to a particular host.
N_MB_RDMA_DROP =>  [INTERCONNECT] The cumulative number of megabytes dropped during remote direct memory access (RDMA) transmission to a particular host.
N_MB_RDMA_DROP_SEC =>  [INTERCONNECT] The rate which is the number of megabytes dropped per second during RDMA transmission to a particular host.
N_MB_RECEIVED =>  [INTERCONNECT] The cumulative number of megabytes received from a particular host.
N_MB_RECEIVED_SEC =>  [INTERCONNECT] The rate which is the number of megabytes received per second from a particular host.
N_MB_RESENT =>  [INTERCONNECT] The cumulative number of megabytes retransmitted to a particular host.
N_MB_RESENT_SEC =>  [INTERCONNECT] The rate which is the number of megabytes retransmitted per second to a particular host.
N_MB_SENT =>  [INTERCONNECT] The cumulative number of megabytes transmitted to a particular host.
N_MB_SENT_SEC =>  [INTERCONNECT] The rate which is the number of megabytes transmitted per second to a particular host.
N_RDMA_RETRY_TM =>  [INTERCONNECT] The cumulative latency of the retry action during RDMA transmission to a particular host.
SIO_IO_EL_OF =>  [SmartIO] The cumulative number of megabytes eligible for offload by smart I/O.
SIO_IO_EL_OF_SEC =>  [SmartIO] The number of megabytes per second eligible for offload by smart I/O.
SIO_IO_OF_RE =>  [SmartIO] The cumulative number of interconnect megabytes returned by smart I/O.
SIO_IO_OF_RE_SEC =>  [SmartIO] The number of interconnect megabytes per second returned by smart I/O.
SIO_IO_PA_TH =>  [SmartIO] The cumulative number of megabytes of pass-through I/O by smart I/O.
SIO_IO_PA_TH_SEC =>  [SmartIO] The number of megabytes per second of pass-through I/O by smart I/O.
SIO_IO_RD_FC =>  [SmartIO] The cumulative number of megabytes read from flash cache by smart I/O.
SIO_IO_RD_FC_HD =>  [SmartIO] The cumulative number of megabytes read from both flash cache and hard disk by smart I/O.
SIO_IO_RD_FC_HD_SEC =>  [SmartIO] The number of megabytes per second read from both flash cache and hard disk by smart I/O.
SIO_IO_RD_FC_SEC =>  [SmartIO] The number of megabytes per second read from flash cache by smart I/O.
SIO_IO_RD_HD =>  [SmartIO] The cumulative number of megabytes read from hard disk by smart I/O.
SIO_IO_RD_HD_SEC =>  [SmartIO] The number of megabytes per second read from hard disk by smart I/O.
SIO_IO_RD_RQ_FC =>  [SmartIO] The cumulative number of read I/O requests from flash cache by smart I/O.
SIO_IO_RD_RQ_FC_HD =>  [SmartIO] The cumulative number of read I/O requests from both flash cache and hard disk by smart I/O.
SIO_IO_RD_RQ_FC_HD_SEC =>  [SmartIO] The number of read I/O requests per second from both flash cache and hard disk by smart I/O.
SIO_IO_RD_RQ_FC_SEC =>  [SmartIO] The number of read I/O requests per second from flash cache by smart I/O.
SIO_IO_RD_RQ_HD =>  [SmartIO] The cumulative number of megabytes read I/O requests from hard disk by smart I/O.
SIO_IO_RD_RQ_HD_SEC =>  [SmartIO] The number of read I/O requests per second from hard disk by smart I/O.
SIO_IO_RV_OF =>  [SmartIO] The cumulative number of megabytes sent to the database node to balance CPU by smart I/O.
SIO_IO_RV_OF_SEC =>  [SmartIO] The number of megabytes per second sent to the database node to balance CPU by smart I/O.
SIO_IO_SI_SV =>  [SmartIO] The cumulative number of megabytes saved by the storage index.
SIO_IO_SI_SV_SEC =>  [SmartIO] The number of megabytes per second saved by the storage index.
SIO_IO_WR_FC =>  [SmartIO] The cumulative number of megabytes of flash cache population writes by smart I/O.
SIO_IO_WR_FC_SEC =>  [SmartIO] The number of megabytes per second of flash cache population writes by smart I/O.
SIO_IO_WR_HD =>  [SmartIO] The cumulative number of megabytes written to hard disk by smart I/O.
SIO_IO_WR_HD_SEC =>  [SmartIO] The number of megabytes per second written to hard disk by smart I/O.
SIO_IO_WR_RQ_FC =>  [SmartIO] The cumulative number of I/O requests for flash cache population writes by smart I/O.
SIO_IO_WR_RQ_FC_SEC =>  [SmartIO] The number of I/O requests per second for flash cache population writes by smart I/O.
SIO_IO_WR_RQ_HD =>  [SmartIO] The cumulative number of write I/O requests to hard disk by smart I/O.
SIO_IO_WR_RQ_HD_SEC =>  [SmartIO] The number of write I/O requests per second to hard disk by smart I/O.
CT_FC_IO_BY_SEC =>  [IORM] The number of megabytes of I/O per second for this category to flash cache.
CT_FC_IO_RQ =>  [IORM] The number of I/O requests issued by an IORM category to flash cache.
CT_FC_IO_RQ_LG =>  [IORM] The number of large I/O requests issued by an IORM category to flash cache.
CT_FC_IO_RQ_LG_SEC =>  [IORM] The number of large I/O requests issued by an IORM category to flash cache per second.
CT_FC_IO_RQ_SEC =>  [IORM] The number of I/O requests issued by an IORM category to flash cache per second.
CT_FC_IO_RQ_SM =>  [IORM] The number of small I/O requests issued by an IORM category to flash cache.
CT_FC_IO_RQ_SM_SEC =>  [IORM] The number of small I/O requests issued by an IORM category to flash cache per second.
CT_FD_IO_BY_SEC =>  [IORM] The number of megabytes of I/O per second for this category to flash disks.
CT_FD_IO_LOAD =>  [IORM] The average I/O load from this category for flash disks. For a description of I/O load, see "CD_IO_LOAD".
CT_FD_IO_RQ_LG =>  [IORM] The number of large I/O requests issued by an IORM category to flash disks.
CT_FD_IO_RQ_LG_SEC =>  [IORM] The number of large I/O requests issued by an IORM category to flash disks per second.
CT_FD_IO_RQ_SM =>  [IORM] The number of small I/O requests issued by an IORM category to flash disks.
CT_FD_IO_RQ_SM_SEC =>  [IORM] The number of small I/O requests issued by an IORM category to flash disks per second.
CT_FD_IO_TM =>  [IORM] The cumulative latency of reading or writing blocks for this category from flash disks.
CT_FD_IO_TM_LG =>  [IORM] The cumulative latency of reading or writing large blocks for this category from flash disks.
CT_FD_IO_TM_LG_RQ =>  [IORM] The rate which is the average latency of reading or writing large blocks per request for this category from flash disks.
CT_FD_IO_TM_RQ =>  [IORM] The rate which is the average latency of reading or writing blocks per request for this category from flash disks.
CT_FD_IO_TM_SM =>  [IORM] The cumulative latency of reading or writing small blocks for this category from flash disks.
CT_FD_IO_TM_SM_RQ =>  [IORM] The rate which is the average latency of reading or writing small blocks per request for this category from flash disks.
CT_FD_IO_UTIL =>  [IORM] The percentage of flash resources utilized from this category.
CT_FD_IO_UTIL_LG =>  [IORM] The percentage of flash resources utilized by large requests from this category.
CT_FD_IO_UTIL_SM =>  [IORM] The percentage of flash resources utilized by small requests from this category.
CT_FD_IO_WT_LG =>  [IORM] The IORM wait time for large I/O requests issued to flash disks by an IORM category.
CT_FD_IO_WT_LG_RQ =>  [IORM] The average IORM wait time per request for large I/O requests issued to flash disks by an IORM category.
CT_FD_IO_WT_SM =>  [IORM] The IORM wait time for small I/O requests issued to flash disks by an IORM category.
CT_FD_IO_WT_SM_RQ =>  [IORM] The average IORM wait time per request for small I/O requests issued to flash disks by an IORM category.
CT_IO_BY_SEC =>  [IORM] The number of megabytes of I/O per second for this category to hard disks.
CT_IO_LOAD =>  [IORM] The average I/O load from this category for hard disks. For a description of I/O load, see "CD_IO_LOAD".
CT_IO_RQ_LG =>  [IORM] The cumulative number of large I/O requests issued by the category for hard disks. A large value indicates a heavy I/O workload from this category.
CT_IO_RQ_LG_SEC =>  [IORM] This metric is derived from CT_IO_RQ_LG. It specifies the rate of large I/O requests issued by the category for hard disks. Its units are number of I/O requests per second. A large value indicates a heavy I/O workload from this category in the past minute.
CT_IO_RQ_SM =>  [IORM] The cumulative number of small I/O requests issued by the category for hard disks. A large value indicates a heavy I/O workload from this category.
CT_IO_RQ_SM_SEC =>  [IORM] This metric is derived from CT_IO_RQ_SM. It specifies the rate of small I/O requests issued by the category for hard disks. Its units are number of I/O requests per second. A large value indicates a heavy I/O workload from this category in the past minute.
CT_IO_TM_LG =>  [IORM] The cumulative latency of reading or writing large blocks for this category from hard disks.
CT_IO_TM_LG_RQ =>  [IORM] The rate which is the average latency of reading or writing large blocks per request for this category from hard disks.
CT_IO_TM_SM =>  [IORM] The cumulative latency of reading or writing small blocks for this category from hard disks.
CT_IO_TM_SM_RQ =>  [IORM] The rate which is the average latency of reading or writing small blocks per request for this category from hard disks.
CT_IO_UTIL_LG =>  [IORM] The percentage of disk resources utilized by large requests from this category.
CT_IO_UTIL_SM =>  [IORM] The percentage of disk resources utilized by small requests from this category.
CT_IO_WT_LG =>  [IORM] The cumulative number of milliseconds that large I/O requests issued to hard disks by the category have waited to be scheduled by IORM. A large value indicates that the I/O workload from this category is exceeding the allocation specified for it in the category plan.
CT_IO_WT_LG_RQ =>  [IORM] The average IORM wait time per request for large I/O requests issued to hard disks by an IORM category.
CT_IO_WT_SM =>  [IORM] The cumulative number of milliseconds that small I/O requests issued to hard disks by the category have waited to be scheduled by IORM. A large value indicates that the I/O workload from this category is exceeding the allocation specified for it in the category plan.
CT_IO_WT_SM_RQ =>  [IORM] The average IORM wait time per request for small I/O requests issued to hard disks by an IORM category.
PDB_FC_BY_ALLOCATED =>  [PDB-IORM] The number of megabytes allocated in flash cache for this PDB.
PDB_FC_IO_BY_SEC =>  [PDB-IORM] The number of megabytes of I/O per second for the PDB to flash cache.
PDB_FC_IO_RQ =>  [PDB-IORM] The number of I/O requests issued by this PDB to flash cache.
PDB_FC_IO_RQ_LG =>  [PDB-IORM] The number of large I/O requests issued by this PDB to flash cache.
PDB_FC_IO_RQ_LG_SEC =>  [PDB-IORM] The number of large I/O requests issued by this PDB to flash cache per second.
PDB_FC_IO_RQ_SEC =>  [PDB-IORM] The number of I/O requests issued by this PDB to flash cache per second.
PDB_FC_IO_RQ_SM =>  [PDB-IORM] The number of small I/O requests issued by this PDB to flash cache.
PDB_FC_IO_RQ_SM_SEC =>  [PDB-IORM] The number of small IO requests issued by this PDB to flash cache per second.
PDB_FD_IO_BY_SEC =>  [PDB-IORM] The number of megabytes of I/O per second for the PDB to flash disks.
PDB_FD_IO_LOAD =>  [PDB-IORM] The average I/O load from this PDB for flash disks. For a description of I/O load, see CD_IO_LOAD.
PDB_FD_IO_RQ_LG =>  [PDB-IORM] The number of large I/O requests issued by a PDB to flash disks.
PDB_FD_IO_RQ_LG_SEC =>  [PDB-IORM] The number of large I/O requests issued by a PDB to flash disks per second.
PDB_FD_IO_RQ_SM =>  [PDB-IORM] The number of small I/O requests issued by a PDB to flash disks.
PDB_FD_IO_RQ_SM_SEC =>  [PDB-IORM] The number of small I/O requests issued by a PDB to flash disks per second.
PDB_FD_IO_TM =>  [PDB-IORM] The cumulative latency of reading or writing blocks by this PDB from flash disks.
PDB_FD_IO_TM_LG =>  [PDB-IORM] The cumulative latency of reading or writing large blocks by this PDB from flash disks.
PDB_FD_IO_TM_LG_RQ =>  [PDB-IORM] The rate which is the average latency of reading or writing large blocks per request by this PDB from flash disks.
PDB_FD_IO_TM_RQ =>  [PDB-IORM] The rate which is the average latency of reading or writing blocks per request by this PDB from flash disks.
PDB_FD_IO_TM_SM =>  [PDB-IORM] The cumulative latency of reading or writing small blocks by this PDB from flash disks.
PDB_FD_IO_TM_SM_RQ =>  [PDB-IORM] The rate which is the average latency of reading or writing small blocks per request by this PDB from flash disks.
PDB_FD_IO_UTIL =>  [PDB-IORM] The percentage of flash resources utilized from this PDB.
PDB_FD_IO_UTIL_LG =>  [PDB-IORM] The percentage of flash resources utilized by large requests from this PDB.
PDB_FD_IO_UTIL_SM =>  [PDB-IORM] The percentage of flash resources utilized by small requests from this PDB.
PDB_FD_IO_WT_LG =>  [PDB-IORM] The IORM wait time for large I/O requests issued to flash disks by this PDB.
PDB_FD_IO_WT_LG_RQ =>  [PDB-IORM] The average IORM wait time per request for large I/O requests issued to flash disks by this PDB.
PDB_FD_IO_WT_SM =>  [PDB-IORM] The IORM wait time for small I/O requests issued to flash disks by this PDB.
PDB_FD_IO_WT_SM_RQ =>  [PDB-IORM] The average IORM wait time per request for small I/O requests issued to flash disks by this PDB.
PDB_IO_BY_SEC =>  [PDB-IORM] The number of megabytes of I/O per second for the PDB to hard disks.
PDB_IO_LOAD =>  [PDB-IORM] The average I/O load from this PDB for hard disks. For a description of I/O load, see "CD_IO_LOAD".
PDB_IO_RQ_LG =>  [PDB-IORM] The cumulative number of large I/O requests issued by the PDB to hard disks. A large value indicates a heavy large I/O workload from this PDB.
PDB_IO_RQ_LG_SEC =>  [PDB-IORM] The rate of large I/O requests issued by a PDB per second over the past minute to hard disks. A large value indicates a heavy, large I/O workload from this PDB in the past minute.
PDB_IO_RQ_SM =>  [PDB-IORM] The cumulative number of small I/O requests issued by the PDB to hard disks. A large value indicates a heavy small I/O workload from this PDB.
PDB_IO_RQ_SM_SEC =>  [PDB-IORM] The rate of small I/O requests issued by a PDB per second over the past minute to hard disks. A large value indicates a heavy, small I/O workload issued by this PDB in the past minute.
PDB_IO_TM_LG =>  [PDB-IORM] The cumulative latency of reading or writing large blocks by this PDB from hard disks.
PDB_IO_TM_LG_RQ =>  [PDB-IORM] The rate which is the average latency of reading or writing large blocks per request by this PDB from hard disks.
PDB_IO_TM_SM =>  [PDB-IORM] The cumulative latency of reading or writing small blocks by this PDB from hard disks.
PDB_IO_TM_SM_RQ =>  [PDB-IORM] The rate which is the average latency of reading or writing small blocks per request by this PDB from hard disks.
PDB_IO_UTIL_LG =>  [PDB-IORM] The percentage of disk resources utilized by large requests from this PDB.
PDB_IO_UTIL_SM =>  [PDB-IORM] The percentage of disk resources utilized by small requests from this PDB.
PDB_IO_WT_LG =>  [PDB-IORM] The IORM wait time for large I/O requests issued to hard disks by this PDB.
PDB_IO_WT_LG_RQ =>  [PDB-IORM] The average IORM wait time per request for large I/O requests issued to hard disks by this PDB.
PDB_IO_WT_SM =>  [PDB-IORM] The IORM wait time for small I/O requests issued to hard disks by this PDB.
PDB_IO_WT_SM_RQ =>  [PDB-IORM] The average IORM wait time per request for small I/O requests issued to hard disks by this PDB.
PDB_PC_BY_ALLOCATED =>  [PDB-IORM] Number of megabytes allocated in PMEM cache for this PDB.
DB_FC_BY_ALLOCATED =>  [DB-IORM] The number of megabytes allocated in flash cache for this database.
DB_FC_IO_BY_SEC =>  [DB-IORM] The number of megabytes of I/O per second for this database to flash cache.
DB_FC_IO_RQ =>  [DB-IORM] The number of I/O requests issued by a database to flash cache.
DB_FC_IO_RQ_LG =>  [DB-IORM] The number of large I/O requests issued by a database to flash cache.
DB_FC_IO_RQ_LG_SEC =>  [DB-IORM] The number of large I/O requests issued by a database to flash cache per second.
DB_FC_IO_RQ_SEC =>  [DB-IORM] The number of I/O requests issued by a database to flash cache per second.
DB_FC_IO_RQ_SM =>  [DB-IORM] The number of small I/O requests issued by a database to flash cache.
DB_FC_IO_RQ_SM_SEC =>  [DB-IORM] The number of small I/O requests issued by a database to flash cache per second.
DB_FD_IO_BY_SEC =>  [DB-IORM] The number of megabytes of I/O per second for this database to flash disks.
DB_FD_IO_LOAD =>  [DB-IORM] The average I/O load from this database for flash disks. For a description of I/O load, see CD_IO_LOAD.
DB_FD_IO_RQ_LG =>  [DB-IORM] The number of large I/O requests issued by a database to flash disks.
DB_FD_IO_RQ_LG_SEC =>  [DB-IORM] The number of large I/O requests issued by a database to flash disks per second.
DB_FD_IO_RQ_SM =>  [DB-IORM] The number of small I/O requests issued by a database to flash disks.
DB_FD_IO_RQ_SM_SEC =>  [DB-IORM] The number of small I/O requests issued by a database to flash disks per second.
DB_FD_IO_TM =>  [DB-IORM] The cumulative latency of reading or writing blocks by a database from flash disks.
DB_FD_IO_TM_LG =>  [DB-IORM] The cumulative latency of reading or writing large blocks by a database from flash disks.
DB_FD_IO_TM_LG_RQ =>  [DB-IORM] The rate which is the average latency of reading or writing large blocks per request by a database from flash disks.
DB_FD_IO_TM_RQ =>  [DB-IORM] The rate which is the average latency of reading or writing blocks per request by a database from flash disks.
DB_FD_IO_TM_SM =>  [DB-IORM] The cumulative latency of reading or writing small blocks by a database from flash disks.
DB_FD_IO_TM_SM_RQ =>  [DB-IORM] The rate which is the average latency of reading or writing small blocks per request by a database from flash disks.
DB_FD_IO_UTIL =>  [DB-IORM] The percentage of flash resources utilized from this database.
DB_FD_IO_UTIL_LG =>  [DB-IORM] The percentage of flash resources utilized by large requests from this database.
DB_FD_IO_UTIL_SM =>  [DB-IORM] The percentage of flash resources utilized by small requests from this database.
DB_FD_IO_WT_LG =>  [DB-IORM] The IORM wait time for large I/O requests issued to flash disks by a database.
DB_FD_IO_WT_LG_RQ =>  [DB-IORM] The average IORM wait time per request for large I/O requests issued to flash disks by a database.
DB_FD_IO_WT_SM =>  [DB-IORM] The IORM wait time for small I/O requests issued to flash disks by a database.
DB_FD_IO_WT_SM_RQ =>  [DB-IORM] The average IORM wait time per request for small I/O requests issued to flash disks by a database.
DB_FL_IO_BY =>  [DB-IORM] The number of megabytes written to Exadata Smart Flash Log.
DB_FL_IO_BY_SEC =>  [DB-IORM] The number of megabytes written per second to Exadata Smart Flash Log.
DB_FL_IO_RQ =>  [DB-IORM] The number of I/O requests issued to Exadata Smart Flash Log.
DB_FL_IO_RQ_SEC =>  [DB-IORM] The number of I/O requests per second issued to Exadata Smart Flash Log.
DB_IO_BY_SEC =>  [DB-IORM] The number of megabytes of I/O per second for this database to hard disks.
DB_IO_LOAD =>  [DB-IORM] The average I/O load from this database for hard disks. For a description of I/O load, see CD_IO_LOAD.
DB_IO_RQ_LG =>  [DB-IORM] The cumulative number of large I/O requests issued to hard disks by the database. A large value indicates a heavy large I/O workload from this database.
DB_IO_RQ_LG_SEC =>  [DB-IORM] The rate of large I/O requests issued to hard disks by a database per second over the past minute. A large value indicates a heavy large I/O workload from this database in the past minute.
DB_IO_RQ_SM =>  [DB-IORM] The cumulative number of small I/O requests issued to hard disks by the database. A large value indicates a heavy small I/O workload from this database.
DB_IO_RQ_SM_SEC =>  [DB-IORM] The rate of small I/O requests issued to hard disks by a database per second over the past minute. A large value indicates a heavy small I/O workload issued by this database in the past minute.
DB_IO_TM_LG =>  [DB-IORM] The cumulative latency of reading or writing large blocks by a database from hard disks.
DB_IO_TM_LG_RQ =>  [DB-IORM] The rate which is the average latency of reading or writing large blocks per request by a database from hard disks.
DB_IO_TM_SM =>  [DB-IORM] The cumulative latency of reading or writing small blocks by a database from hard disks.
DB_IO_TM_SM_RQ =>  [DB-IORM] The rate which is the average latency of reading or writing small blocks per request by a database from hard disks.
DB_IO_UTIL_LG =>  [DB-IORM] The percentage of hard disk resources utilized by large requests from this database.
DB_IO_UTIL_SM =>  [DB-IORM] The percentage of hard disk resources utilized by small requests from this database.
DB_IO_WT_LG =>  [DB-IORM] The IORM wait time for large I/O requests issued to hard disks by a database.
DB_IO_WT_LG_RQ =>  [DB-IORM] The average IORM wait time per request for large I/O requests issued to hard disks by a database.
DB_IO_WT_SM =>  [DB-IORM] The IORM wait time for small I/O requests issued to hard disks by a database.
DB_IO_WT_SM_RQ =>  [DB-IORM] The average IORM wait time per request for small I/O requests issued to hard disks by a database.
DB_PC_BY_ALLOCATED =>  [DB-IORM] Number of megabytes allocated in PMEM cache for this database.
CG_FC_IO_BY_SEC =>  [ConsumerGroup-IORM] The number of megabytes of I/O per second for this consumer group to flash cache.
CG_FC_IO_RQ =>  [ConsumerGroup-IORM] The number of I/O requests issued by a consumer group to flash cache.
CG_FC_IO_RQ_LG =>  [ConsumerGroup-IORM] The number of large I/O requests issued by a consumer group to flash cache.
CG_FC_IO_RQ_LG_SEC =>  [ConsumerGroup-IORM] The number of large I/O requests issued by a consumer group to flash cache per second.
CG_FC_IO_RQ_SEC =>  [ConsumerGroup-IORM] The number of I/O requests issued by a consumer group to flash cache per second.
CG_FC_IO_RQ_SM =>  [ConsumerGroup-IORM] The number of small I/O requests issued by a consumer group to flash cache.
CG_FC_IO_RQ_SM_SEC =>  [ConsumerGroup-IORM] The number of small I/O requests issued by a consumer group to flash cache per second.
CG_FD_IO_BY_SEC =>  [ConsumerGroup-IORM] The number of megabytes of I/O per second for this consumer group to flash disks.
CG_FD_IO_LOAD =>  [ConsumerGroup-IORM] The metric shows the average I/O load from this consumer group for flash disks. For a description of I/O load, see CD_IO_LOAD.
CG_FD_IO_RQ_LG =>  [ConsumerGroup-IORM] The number of large I/O requests issued by a consumer group to flash disks.
CG_FD_IO_RQ_LG_SEC =>  [ConsumerGroup-IORM] The number of large I/O requests issued by a consumer group to flash disks per second.
CG_FD_IO_RQ_SM =>  [ConsumerGroup-IORM] The number of small I/O requests issued by a consumer group to flash disks.
CG_FD_IO_RQ_SM_SEC =>  [ConsumerGroup-IORM] The number of small I/O requests issued by a consumer group to flash disks per second.
CG_FD_IO_TM =>  [ConsumerGroup-IORM] The cumulative latency of reading or writing blocks by a consumer group from flash disks.
CG_FD_IO_TM_LG =>  [ConsumerGroup-IORM] The cumulative latency of reading or writing large blocks by a consumer group from flash disks.
CG_FD_IO_TM_LG_RQ =>  [ConsumerGroup-IORM] The rate which is the average latency of reading or writing large blocks per request by a consumer group from flash disks.
CG_FD_IO_TM_RQ =>  [ConsumerGroup-IORM] The rate which is the average latency of reading or writing blocks per request by a consumer group from flash disks.
CG_FD_IO_TM_SM =>  [ConsumerGroup-IORM] The cumulative latency of reading or writing small blocks by a consumer group from flash disks.
CG_FD_IO_TM_SM_RQ =>  [ConsumerGroup-IORM] The rate which is the average latency of reading or writing small blocks per request by a consumer group from flash disks.
CG_FD_IO_UTIL =>  [ConsumerGroup-IORM] The percentage of flash resources utilized from this consumer group.
CG_FD_IO_UTIL_LG =>  [ConsumerGroup-IORM] The percentage of flash resources utilized by large requests from this consumer group.
CG_FD_IO_UTIL_SM =>  [ConsumerGroup-IORM] The percentage of flash resources utilized by small requests from this consumer group.
CG_FD_IO_WT_LG =>  [ConsumerGroup-IORM] The IORM wait time for large I/O requests issued to flash disks by a consumer group.
CG_FD_IO_WT_LG_RQ =>  [ConsumerGroup-IORM] The average IORM wait time per request for large I/O requests issued to flash disks by a consumer group.
CG_FD_IO_WT_SM =>  [ConsumerGroup-IORM] The IORM wait time for small I/O requests issued to flash disks by a consumer group.
CG_FD_IO_WT_SM_RQ =>  [ConsumerGroup-IORM] The average IORM wait time per request for small I/O requests issued to flash disks by a consumer group.
CG_IO_BY_SEC =>  [ConsumerGroup-IORM] The number of megabytes of I/O per second for this consumer group to hard disks.
CG_IO_LOAD =>  [ConsumerGroup-IORM] The metric shows the average I/O load from this consumer group for hard disks. For a description of I/O load, see CD_IO_LOAD.
CG_IO_RQ_LG =>  [ConsumerGroup-IORM] The cumulative number of large I/O requests issued by the consumer group. A large value indicates a heavy I/O workload from this consumer group.
CG_IO_RQ_LG_SEC =>  [ConsumerGroup-IORM] This metric is derived from CG_IO_RQ_LG. It specifies the rate of large I/O requests issued by a consumer group per second over the past minute. A large value indicates a heavy I/O workload from this consumer group in the past minute.
CG_IO_RQ_SM =>  [ConsumerGroup-IORM] The cumulative number of small I/O requests issued by the consumer group. A large value indicates a heavy I/O workload from this consumer group.
CG_IO_RQ_SM_SEC =>  [ConsumerGroup-IORM] This metric is derived from CG_IO_RQ_SM. It specifies the rate of small I/O requests issued by a consumer group per second over the past minute. A large value indicates a heavy I/O workload from this consumer group in the past minute.
CG_IO_TM_LG =>  [ConsumerGroup-IORM] The cumulative latency of reading or writing large blocks by a consumer group from hard disks.
CG_IO_TM_LG_RQ =>  [ConsumerGroup-IORM] The rate which is the average latency of reading or writing large blocks per request by a consumer group from hard disks.
CG_IO_TM_SM =>  [ConsumerGroup-IORM] The cumulative latency of reading or writing small blocks by a consumer group from hard disks
CG_IO_TM_SM_RQ =>  [ConsumerGroup-IORM] The rate which is the average latency of reading or writing small blocks per request by a consumer group from hard disks.
CG_IO_UTIL_LG =>  [ConsumerGroup-IORM] The percentage of disk resources utilized by large requests from this consumer group.
CG_IO_UTIL_SM =>  [ConsumerGroup-IORM] The percentage of disk resources utilized by small requests from this consumer group.
CG_IO_WT_LG =>  [ConsumerGroup-IORM] The IORM wait time for large I/O requests issued to hard disks by a consumer group.
CG_IO_WT_LG_RQ =>  [ConsumerGroup-IORM] The average IORM wait time per request for large I/O requests issued to hard disks by a consumer group.
CG_IO_WT_SM =>  [ConsumerGroup-IORM] The IORM wait time for small I/O requests issued to hard disks by a consumer group.
CG_IO_WT_SM_RQ =>  [ConsumerGroup-IORM] The average IORM wait time per request for small I/O requests issued to hard disks by a consumer group.
CL_BBU_CHARGE =>  [CELL] Disk controller battery charge.
CL_BBU_TEMP =>  [CELL] Temperature of disk controller battery.
CL_CPUT =>  [CELL] The cell CPU utilization which is the instantaneous percentage of time over the previous minute that the system CPUs were not idle (from /proc/stat).
CL_CPUT_CS =>  [CELL] The percentage of CPU time used by CELLSRV.
CL_CPUT_MS =>  [CELL] The percentage of CPU time used by MS.
CL_FANS =>  [CELL] The instantaneous number of working fans on the cell.
CL_FSUT =>  [CELL] The percentage of total space utilized on the file system that is currently in use. This metric shows the space utilization in the various files systems on the cell.
CL_IO_RQ_NODATA =>  [CELL] The number of I/O requests that did not return data.
CL_IO_RQ_NODATA_SEC =>  [CELL] The number of I/O requests that did not return data per second.
CL_MEMUT =>  [CELL] The percentage of total physical memory used on the cell.
CL_MEMUT_CS =>  [CELL] The percentage of physical memory used by CELLSRV.
CL_MEMUT_MS =>  [CELL] The percentage of physical memory used by MS.
CL_RUNQ =>  [CELL] The instantaneous average number (over the preceding minute) of processes in the Linux run queue marked running or uninterruptible (from /proc/loadavg).
CL_SWAP_IN_BY_SEC =>  [CELL] The number of swap pages read in KB per second.
CL_SWAP_OUT_BY_SEC =>  [CELL] The number of swap pages written in KB per second.
CL_SWAP_USAGE =>  [CELL] The percentage of swap space used.
CL_TEMP =>  [CELL] The instantaneous temperature (Celsius) of the server, provided by the Baseboard Management Controller (BMC).
CL_VIRTMEM_CS =>  [CELL] The amount of virtual memory used by CELLSRV in megabytes.
CL_VIRTMEM_MS =>  [CELL] Total memory(resident and swap) used by MS in megabytes.
IORM_MODE =>  [CELL] The I/O Resource Management (IORM) objective for the cell.
N_HCA_MB_RCV_SEC =>  [CELL] The number of megabytes received by the InfiniBand interfaces per second.
N_HCA_MB_TRANS_SEC =>  [CELL] The number of megabytes transmitted by the InfiniBand interfaces per second.
N_NIC_KB_RCV_SEC =>  [CELL] The number of kilobytes received by the Ethernet interfaces per second.
N_NIC_KB_TRANS_SEC =>  [CELL] The number of kilobytes transmitted by the Ethernet interfaces per second.
N_NIC_RCV_SEC =>  [CELL] The rate which is the total number of I/O packets received by interconnections per second.
N_NIC_TRANS_SEC =>  [CELL] The rate which is the total number of I/O packets transmitted by interconnections per second.
CD_BY_FC_DIRTY =>  [CELLDISK] The number of megabytes in flash cache that are not synchronized to the cell disk.
CD_IO_BY_R_LG =>  [CELLDISK] The cumulative number of megabytes read in large blocks from a cell disk.
CD_IO_BY_R_LG_SEC =>  [CELLDISK] The rate which is the number of megabytes read in large blocks per second from a cell disk.
CD_IO_BY_R_SCRUB =>  [CELLDISK] The number of megabytes read from a cell disk by the scrubbing job.
CD_IO_BY_R_SCRUB_SEC =>  [CELLDISK] The number of megabytes read per second from a cell disk by the scrubbing job.
CD_IO_BY_R_SM =>  [CELLDISK] The cumulative number of megabytes read in small blocks from a cell disk.
CD_IO_BY_R_SM_SEC =>  [CELLDISK] The rate which is the number of megabytes read in small blocks per second from a cell disk.
CD_IO_BY_W_LG =>  [CELLDISK] The cumulative number of megabytes written in large blocks on a cell disk.
CD_IO_BY_W_LG_SEC =>  [CELLDISK] The rate which is the number of megabytes written in large blocks per second on a cell disk.
CD_IO_BY_W_SM =>  [CELLDISK] The cumulative number of megabytes written in small blocks on a cell disk.
CD_IO_BY_W_SM_SEC =>  [CELLDISK] The rate which is the number of megabytes written in small blocks per second on a cell disk.
CD_IO_ERRS =>  [CELLDISK] The cumulative number of I/O errors on a cell disk.
CD_IO_ERRS_MIN =>  [CELLDISK] The rate of I/O errors on a cell disk per minute.
CD_IO_ERRS_SCRUB =>  [CELLDISK] The number of bad 1 MB blocks detected during a scrubbing job on a cell disk.
CD_IO_LOAD =>  [CELLDISK] The average I/O load from cell disks.
CD_IO_RQ_R_LG =>  [CELLDISK] The cumulative number of requests to read large blocks from a cell disk.
CD_IO_RQ_R_LG_SEC =>  [CELLDISK] The rate which is the number of requests to read large blocks per second from a cell disk.
CD_IO_RQ_R_SCRUB =>  [CELLDISK] The number of requests to read from a cell disk by the scrubbing job.
CD_IO_RQ_R_SCRUB_SEC =>  [CELLDISK] The number of requests to read per second from a cell disk by the scrubbing job.
CD_IO_RQ_R_SM =>  [CELLDISK] The cumulative number of requests to read small blocks from a cell disk.
CD_IO_RQ_R_SM_SEC =>  [CELLDISK] The rate which is the number of requests to read small blocks per second from a cell disk.
CD_IO_RQ_W_LG =>  [CELLDISK] The cumulative number of requests to write large blocks to a cell disk.
CD_IO_RQ_W_LG_SEC =>  [CELLDISK] The rate which is the number of requests to write large blocks per second to a cell disk.
CD_IO_RQ_W_SM =>  [CELLDISK] The cumulative number of requests to write small blocks to a cell disk.
CD_IO_RQ_W_SM_SEC =>  [CELLDISK] The rate which is the number of requests to write small blocks per second to a cell disk.
CD_IO_ST_RQ =>  [CELLDISK] Average service time per request for small I/O requests to a cell disk. This metric cannot be used for flash devices as explained in Using iostat to monitor I/O service time statistics.
CD_IO_TM_R_LG =>  [CELLDISK] The cumulative latency of reading large blocks from a cell disk. Units are microseconds per request.
CD_IO_TM_R_LG_RQ =>  [CELLDISK] The rate which is the average latency of reading large blocks per request to a cell disk. Units are microseconds per request.
CD_IO_TM_R_SM =>  [CELLDISK] The cumulative latency of reading small blocks from a cell disk.
CD_IO_TM_R_SM_RQ =>  [CELLDISK] The rate which is the average latency of reading small blocks per request from a cell disk. Units are microseconds per request.
CD_IO_TM_W_LG =>  [CELLDISK] The cumulative latency of writing large blocks to a cell disk. Units are microseconds per request.
CD_IO_TM_W_LG_RQ =>  [CELLDISK] The rate which is the average latency of writing large blocks per request to a cell disk. Units are microseconds per request.
CD_IO_TM_W_SM =>  [CELLDISK] The cumulative latency of writing small blocks to a cell disk. Units are microseconds per request.
CD_IO_TM_W_SM_RQ =>  [CELLDISK] The rate which is the average latency of writing small blocks per request to a cell disk. Units are microseconds per request.
CD_IO_UTIL =>  [CELLDISK] The percentage of device utilization for the cell disk.
CD_IO_UTIL_LG =>  [CELLDISK] The percentage of disk resources utilized by large requests for the cell disk.
CD_IO_UTIL_SM =>  [CELLDISK] The percentage of disk resources utilized by small requests for the cell disk.
FC_BY_ALLOCATED =>  [FLASHCACHE] The number of megabytes allocated in flash cache. Tracks how many cachelines are used in the flash cache. If the value is close to the flash cache size, then the flash cache is fully populated.
FC_BY_ALLOCATED_DIRTY =>  [FLASHCACHE] The number of megabytes allocated for unflushed data in flash cache.
FC_BY_ALLOCATED_OLTP =>  [FLASHCACHE] The number of megabytes allocated for OLTP data in flash cache.
FC_BY_DIRTY =>  [FLASHCACHE] The number of megabytes in flash cache that are not synchronized to the grid disks.
FC_BY_STALE_DIRTY =>  [FLASHCACHE] The number of megabytes in flash cache which cannot be synchronized because the cached disks are not accessible.
FC_BY_USED =>  [FLASHCACHE] The number of megabytes used in flash cache. Tracks the valid bytes in flash cache. For some workloads, like OLTP, the FC_BY_USED can be much less than the value of FC_BY_ALLOCATED because an OLTP write might only use 8K out of a 64K cacheline.
FC_BYKEEP_DIRTY =>  [FLASHCACHE] The number of megabytes allocated for unflushed keep objects in flash cache.
FC_BYKEEP_OLTP =>  [FLASHCACHE] The number of megabytes for OLTP keep objects in flash cache.
FC_BYKEEP_OVERWR =>  [FLASHCACHE] The number of megabytes pushed out of flash cache because of the space limit for keep objects.
FC_BYKEEP_OVERWR_SEC =>  [FLASHCACHE] The number of megabytes per second pushed out of flash cache because of space limit for keep objects.
FC_BYKEEP_USED =>  [FLASHCACHE] The number of megabytes used for keep objects on flash cache.
FC_COL_BY_USED =>  [FLASHCACHE] The number of megabytes used in columnar flash cache.
FC_COL_BYKEEP_USED =>  [FLASHCACHE] The number of megabytes used for keep objects in columnar flash cache.
FC_COL_IO_BY_R =>  [FLASHCACHE] The number of megabytes that were read from columnar flash cache.
FC_COL_IO_BY_R_ELIGIBLE =>  [FLASHCACHE] The number of megabytes eligible to read from columnar flash cache.
FC_COL_IO_BY_R_ELIGIBLE_SEC =>  [FLASHCACHE] The number of megabytes per second eligible to read from columnar flash cache.
FC_COL_IO_BY_R_SEC =>  [FLASHCACHE] The number of megabytes per second that were read from columnar flash cache.
FC_COL_IO_BY_SAVED =>  [FLASHCACHE] The number of megabytes saved by reads from columnar flash cache.
FC_COL_IO_BY_SAVED_SEC =>  [FLASHCACHE] The number of megabytes saved per second by reads from columnar flash cache.
FC_COL_IO_BY_W_POPULATE =>  [FLASHCACHE] The number of megabytes that are population writes into columnar flash cache due to read misses.
FC_COL_IO_BY_W_POPULATE_SEC =>  [FLASHCACHE] The number of megabytes per second that are population writes into columnar flash cache due to read misses.
FC_COL_IO_BYKEEP_R =>  [FLASHCACHE] The number of megabytes read from columnar flash cache for keep objects.
FC_COL_IO_BYKEEP_R_SEC =>  [FLASHCACHE] The number of megabytes read per second from columnar flash cache for keep objects.
FC_COL_IO_RQ_R =>  [FLASHCACHE] The number of requests that were read from columnar flash cache.
FC_COL_IO_RQ_R_ELIGIBLE =>  [FLASHCACHE] The number of read requests eligible for columnar flash cache.
FC_COL_IO_RQ_R_ELIGIBLE_SEC =>  [FLASHCACHE] The number of read requests per second eligible for columnar flash cache.
FC_COL_IO_RQ_R_SEC =>  [FLASHCACHE] The number of requests per second that were read from columnar flash cache.
FC_COL_IO_RQ_W_POPULATE =>  [FLASHCACHE] The number of requests that are population writers into columnar flash cache due to read misses.
FC_COL_IO_RQ_W_POPULATE_SEC =>  [FLASHCACHE] The number of requests per second that are population writes into columnar flash cache due to read misses.
FC_COL_IO_RQKEEP_R =>  [FLASHCACHE] The number of requests read for keep objects from columnar flash cache.
FC_COL_IO_RQKEEP_R_SEC =>  [FLASHCACHE] The number of requests read per second for keep objects from columnar flash cache.
FC_IO_BY_ALLOCATED_OLTP =>  [FLASHCACHE] The number of megabytes allocated for OLTP data in flash cache.
FC_IO_BY_DISK_WRITE =>  [FLASHCACHE] The number of megabytes written from flash cache to hard disks.
FC_IO_BY_DISK_WRITE_SEC =>  [FLASHCACHE] The number of megabytes per second written from flash cache to hard disks.
FC_IO_BY_R =>  [FLASHCACHE] The number of megabytes read from flash cache.
FC_IO_BY_R_ACTIVE_SECONDARY =>  [FLASHCACHE] The number of megabytes for active secondary reads satisfied from flash cache.
FC_IO_BY_R_ACTIVE_SECONDARY_MISS =>  [FLASHCACHE] The number of megabytes for active secondary reads not satisfied from flash cache.
FC_IO_BY_R_ACTIVE_SECONDARY_MISS_SEC =>  [FLASHCACHE] The number of megabytes per second for active secondary reads not satisfied from flash cache.
FC_IO_BY_R_ACTIVE_SECONDARY_SEC =>  [FLASHCACHE] The number of megabytes per second for active secondary reads satisfied from flash cache.
FC_IO_BY_R_DISK_WRITER =>  [FLASHCACHE] The number of megabytes read from flash cache by disk writer.
FC_IO_BY_R_DISK_WRITER_SEC =>  [FLASHCACHE] The number of megabytes per second read from flash cache by disk writer.
FC_IO_BY_R_DW =>  [FLASHCACHE] The number of megabytes of DW data read from flash cache.
FC_IO_BY_R_MISS =>  [FLASHCACHE] The number of megabytes read from disks because not all requested data was in flash cache.
FC_IO_BY_R_MISS_DW =>  [FLASHCACHE] The number of megabytes of DW data read from disks because not all requested data was in flash cache.
FC_IO_BY_R_MISS_SEC =>  [FLASHCACHE] The number of megabytes read from disks per second because not all requested data was in flash cache.
FC_IO_BY_R_SEC =>  [FLASHCACHE] The number of megabytes read per second from flash cache.
FC_IO_BY_R_SKIP =>  [FLASHCACHE] The number of megabytes read from disks for I/O requests that bypass flash cache.
FC_IO_BY_R_SKIP_FC_THROTTLE =>  [FLASHCACHE] The number of megabytes read from disk for I/O requests that bypass flash cache due to heavy load on flash cache.
FC_IO_BY_R_SKIP_FC_THROTTLE_SEC =>  [FLASHCACHE] The number of megabytes read per second from disk for I/O requests that bypass flash cache due to heavy load on flash cache.
FC_IO_BY_R_SKIP_LG =>  [FLASHCACHE] The number of megabytes read from disk for I/O requests that bypass flash cache due to the large I/O size.
FC_IO_BY_R_SKIP_LG_SEC =>  [FLASHCACHE] The number of megabytes read per second from disk for I/O requests that bypass flash cache due to the large I/O size.
FC_IO_BY_R_SKIP_NCMIRROR =>  [FLASHCACHE] The number of megabytes read from disk for I/O requests that bypass flash cache as the I/O is on non-primary, non-active secondary mirror.
FC_IO_BY_R_SKIP_SEC =>  [FLASHCACHE] The number of megabytes read from disks per second for I/O requests that bypass flash cache.
FC_IO_BY_W =>  [FLASHCACHE] The number of megabytes written to flash cache.
FC_IO_BY_W_DISK_WRITER =>  [FLASHCACHE] The number of megabytes written to hard disks by disk writer.
FC_IO_BY_W_DISK_WRITER_SEC =>  [FLASHCACHE] The number of megabytes per second written to hard disks by disk writer.
FC_IO_BY_W_FIRST =>  [FLASHCACHE] The number of megabytes that are first writes into flash cache.
FC_IO_BY_W_FIRST_SEC =>  [FLASHCACHE] The number of megabytes per second for first writes into flash cache.
FC_IO_BY_W_METADATA =>  [FLASHCACHE] The number of megabytes that are flash cache metadata writes
FC_IO_BY_W_METADATA_SEC =>  [FLASHCACHE] The number of megabytes per second that are flash cache metadata writes
FC_IO_BY_W_OVERWRITE =>  [FLASHCACHE] The number of megabytes that are overwrites into flash cache.
FC_IO_BY_W_OVERWRITE_SEC =>  [FLASHCACHE] The number of megabytes per second that are overwrites into flash cache.
FC_IO_BY_W_POPULATE =>  [FLASHCACHE] The number of megabytes for population writes into flash cache due to read misses.
FC_IO_BY_W_POPULATE_SEC =>  [FLASHCACHE] The number of megabytes per second that are population writes into flash cache due to read misses into flash cache.
FC_IO_BY_W_SEC =>  [FLASHCACHE] The number of megabytes per second written to flash cache.
FC_IO_BY_W_SKIP =>  [FLASHCACHE] The number of megabytes written to disk for I/O requests that bypass flash cache.
FC_IO_BY_W_SKIP_FC_THROTTLE =>  [FLASHCACHE] The number of megabytes written to disk for I/O requests that bypass flash cache due to heavy load on flash cache.
FC_IO_BY_W_SKIP_FC_THROTTLE_SEC =>  [FLASHCACHE] The number of megabytes written per second to disk for I/O requests that bypass flash cache due to heavy load on flash cache.
FC_IO_BY_W_SKIP_LG =>  [FLASHCACHE] The number of megabytes written to disk for I/O requests that bypass flash cache due to the large I/O size.
FC_IO_BY_W_SKIP_LG_SEC =>  [FLASHCACHE] The number of megabytes written per second to disk for I/O requests that bypass flash cache due to the large I/O size.
FC_IO_BY_W_SKIP_NCMIRROR =>  [FLASHCACHE] The number of megabytes written to disk for I/O requests that bypass flash cache as the I/O is on non-primary, non-active secondary mirror.
FC_IO_BY_W_SKIP_SEC =>  [FLASHCACHE] The number of megabytes written to disk per second for I/O requests that bypass flash cache.
FC_IO_BYKEEP_R =>  [FLASHCACHE] The number of megabytes read from flash cache for keep objects.
FC_IO_BYKEEP_R_SEC =>  [FLASHCACHE] The number of megabytes read per second from flash cache for keepobjects
FC_IO_BYKEEP_W =>  [FLASHCACHE] The number of megabytes written to flash cache for keep objects.
FC_IO_BYKEEP_W_SEC =>  [FLASHCACHE] The number of megabytes per second written to flash cache for keepobjects.
FC_IO_ERRS =>  [FLASHCACHE] The number of I/O errors on flash cache.
FC_IO_RQ_DISK_WRITE =>  [FLASHCACHE] The number of requests written from flash cache to hard disks.
FC_IO_RQ_DISK_WRITE_SEC =>  [FLASHCACHE] The number of requests per second for flash cache writing data to hard disks.
FC_IO_RQ_R =>  [FLASHCACHE] The number of read I/O requests satisfied from flash cache.
FC_IO_RQ_R_ACTIVE_SECONDARY =>  [FLASHCACHE] The number of requests for active secondary reads satisfied from flash cache.
FC_IO_RQ_R_ACTIVE_SECONDARY_MISS =>  [FLASHCACHE] The number of requests for active secondary reads not satisfied from flash cache.
FC_IO_RQ_R_ACTIVE_SECONDARY_MISS_SEC =>  [FLASHCACHE] The number of requests per second for active secondary reads not satisfied from flash cache.
FC_IO_RQ_R_ACTIVE_SECONDARY_SEC =>  [FLASHCACHE] The number of requests per second for active secondary reads satisfied from flash cache.
FC_IO_RQ_R_DISK_WRITER =>  [FLASHCACHE] The number of requests read from flash cache by disk writer.
FC_IO_RQ_R_DISK_WRITER_SEC =>  [FLASHCACHE] The number of requests per second read from flash cache by disk writer.
FC_IO_RQ_R_DW =>  [FLASHCACHE] The number of read I/O requests of DW data read from flash cache.
FC_IO_RQ_R_MISS =>  [FLASHCACHE] The number of read I/O requests which did not find all data in flash cache.
FC_IO_RQ_R_MISS_DW =>  [FLASHCACHE] The number of read I/O requests of DW data read from disks because not all requested data was in flash cache.
FC_IO_RQ_R_MISS_SEC =>  [FLASHCACHE] The number of read I/O requests per second which did not find all data in flash cache.
FC_IO_RQ_R_SEC =>  [FLASHCACHE] The number of read I/O requests satisfied per second from flash cache.
FC_IO_RQ_R_SKIP =>  [FLASHCACHE] The number of read I/O requests that bypass flash cache.
FC_IO_RQ_R_SKIP_FC_THROTTLE =>  [FLASHCACHE] The number of requests read from disk that bypass flash cache due to heavy load on flash cache.
FC_IO_RQ_R_SKIP_FC_THROTTLE_SEC =>  [FLASHCACHE] The number of requests per second read from disk that bypassed flash cache due to heavy load on flash cache.
FC_IO_RQ_R_SKIP_LG =>  [FLASHCACHE] The number of read I/O requests that bypass flash cache due to the large I/O size.
FC_IO_RQ_R_SKIP_LG_SEC =>  [FLASHCACHE] The number of read I/O requests per second that bypass flash cache due to the large I/O size.
FC_IO_RQ_R_SKIP_NCMIRROR =>  [FLASHCACHE] The number of requests read from disk that bypass flash cache as the I/O is on non-primary non-active secondary mirror.
FC_IO_RQ_R_SKIP_SEC =>  [FLASHCACHE] The number of read I/O requests per second that bypass flash cache.
FC_IO_RQ_REPLACEMENT_ATTEMPTED =>  [FLASHCACHE] The number of requests attempted to find space in the flash cache.
FC_IO_RQ_REPLACEMENT_DW_FAILED =>  [FLASHCACHE] Number of times that client DW IOs failed to find a replacement buffer
FC_IO_RQ_REPLACEMENT_DW_SUCCEEDED =>  [FLASHCACHE] Number of times that client DW IOs succeeded in finding a replacement buffer.
FC_IO_RQ_REPLACEMENT_OLTP_FAILED =>  [FLASHCACHE] Number of times that client OLTP IOs failed to find a replacement buffer.
FC_IO_RQ_REPLACEMENT_OLTP_SUCCEEDED =>  [FLASHCACHE] Number of times that client OLTP IOs succeeded in finding a replacement buffer.
FC_IO_RQ_REPLACEMENT_FAILED =>  [FLASHCACHE] The number of requests that failed to find space in the flash cache.
FC_IO_RQ_W =>  [FLASHCACHE] The number of I/O requests which resulted in flash cache being populated with data.
FC_IO_RQ_W_DISK_WRITER =>  [FLASHCACHE] The number of requests written to hard disks by disk writer.
FC_IO_RQ_W_DISK_WRITER_SEC =>  [FLASHCACHE] The number of requests per second written to hard disks by disk writer.
FC_IO_RQ_W_FIRST =>  [FLASHCACHE] The number of requests that are first writes into flash cache.
FC_IO_RQ_W_FIRST_SEC =>  [FLASHCACHE] The number of requests per second that are first writes into flash cache.
FC_IO_RQ_W_METADATA =>  [FLASHCACHE] The number of requests that are flash cache metadata writes
FC_IO_RQ_W_METADATA_SEC =>  [FLASHCACHE] The number of requests per second that are flash cache metadata writes
FC_IO_RQ_W_OVERWRITE =>  [FLASHCACHE] The number of requests that are overwrites into flash cache.
FC_IO_RQ_W_OVERWRITE_SEC =>  [FLASHCACHE] The number of requests per second that are overwrites into flash cache.
FC_IO_RQ_W_POPULATE =>  [FLASHCACHE] The number of requests that are population writes into flash cache due to read misses.
FC_IO_RQ_W_POPULATE_SEC =>  [FLASHCACHE] The number of requests per second that are population writes into flash cache due to read misses.
FC_IO_RQ_W_SEC =>  [FLASHCACHE] The number of I/O requests per second which resulted in flash cache being populated with data.
FC_IO_RQ_W_SKIP =>  [FLASHCACHE] The number of write I/O requests that bypass flash cache.
FC_IO_RQ_W_SKIP_FC_THROTTLE =>  [FLASHCACHE] The number of requests written to disk that bypass flash cache due to heavy load on flash cache.
FC_IO_RQ_W_SKIP_FC_THROTTLE_SEC =>  [FLASHCACHE] The number of requests written to disk per second that bypass flash cache due to heavy load on flash cache.
FC_IO_RQ_W_SKIP_LG =>  [FLASHCACHE] The number of requests written to disk that bypass flash cache due to the large I/O size.
FC_IO_RQ_W_SKIP_LG_SEC =>  [FLASHCACHE] The number of requests written to disk per second that bypass flash cache due to the large I/O size.
FC_IO_RQ_W_SKIP_NCMIRROR =>  [FLASHCACHE] The number of requests written to disk that bypass flash cache as the I/O is on non-primary, non-active secondary mirror.
FC_IO_RQ_W_SKIP_SEC =>  [FLASHCACHE] The number of write I/O requests per second that bypass flash cache.
FC_IO_RQKEEP_R =>  [FLASHCACHE] The number of read I/O requests for keep objects from flash cache.
FC_IO_RQKEEP_R_MISS =>  [FLASHCACHE] The number of read I/O requests for keep objects which did not find all data in flash cache.
FC_IO_RQKEEP_R_MISS_SEC =>  [FLASHCACHE] The number of read I/O requests per second for keep objects which did not find all data in flash cache.
FC_IO_RQKEEP_R_SEC =>  [FLASHCACHE] The number of read I/O requests per second for keep objects satisfied from flash cache.
FC_IO_RQKEEP_R_SKIP =>  [FLASHCACHE] The number of read I/O requests for keep objects that bypass flash cache.
FC_IO_RQKEEP_R_SKIP_SEC =>  [FLASHCACHE] The rate which is the number of read I/O requests per second for keepobjects that bypass flash cache.
FC_IO_RQKEEP_W =>  [FLASHCACHE] The number of I/O requests for keep objects which resulted in flash cache being populated with data.
FC_IO_RQKEEP_W_SEC =>  [FLASHCACHE] The number of I/O requests per second for keep objects which resulted in flash cache being populated with data.
FC_PREFETCH_HIT =>  [FLASHCACHE] The number of prefetch hits in flash cache. A hit means a page is prefetched and later used by a client for read or write. Once a prefetched page is hit, it is no longer marked as prefetched.
FC_PREFETCH_MISS =>  [FLASHCACHE] The number of prefetch misses in flash cache. A miss means a page is prefetched but never used by a client before the page is freed or reused.
FC_PREFETCH_RQ =>  [FLASHCACHE] The number of prefetch requests in flash cache.
FC_PREFETCH_SKIP =>  [FLASHCACHE] The number of prefetch requests skipped in flash cache. A prefetch request can be skipped if a prefetch disk IO is not issued due to error, throttling, or no buffer.
FC_PREFETCH_USED =>  [FLASHCACHE] The number of megabytes in flash cache holding prefetched pages that have not been used by client yet.
FL_ACTUAL_OUTLIERS =>  [FLASHLOG] The number of redo writes written to flash and disk that exceeded the outlier threshold
FL_BY_KEEP =>  [FLASHLOG] The number of redo data bytes saved on flash due to disk I/O errors
FL_DISK_FIRST =>  [FLASHLOG] The number of redo writes first written to disk
FL_DISK_IO_ERRS =>  [FLASHLOG] The number of disk I/O errors encountered by Exadata Smart Flash Log
FL_EFFICIENCY_PERCENTAGE =>  [FLASHLOG] The efficiency of Exadata Smart Flash Log expressed as a percentage
FL_EFFICIENCY_PERCENTAGE_HOUR =>  [FLASHLOG] The efficiency of Exadata Smart Flash Log over the past hour expressed as a percentage
FL_FLASH_FIRST =>  [FLASHLOG] The number of redo writes first written to flash
FL_FLASH_IO_ERRS =>  [FLASHLOG] The number of flash I/O errors encountered by Exadata Smart Flash Log
FL_FLASH_ONLY_OUTLIERS =>  [FLASHLOG] The number of redo writes written to flash that exceeded the outlier threshold.
FL_IO_DB_BY_W =>  [FLASHLOG] The number of megabytes written to hard disk by Exadata Smart Flash Log
FL_IO_DB_BY_W_SEC =>  [FLASHLOG] The number of megabytes written per second were written to hard disk by Exadata Smart Flash Log
FL_IO_FL_BY_W =>  [FLASHLOG] The number of megabytes written to flash by Exadata Smart Flash Log
FL_IO_FL_BY_W_SEC =>  [FLASHLOG] The number of megabytes written per second were written to flash by Exadata Smart Flash Log
FL_IO_TM_W =>  [FLASHLOG] Cumulative redo log write latency. It includes latency for requests not handled by Exadata Smart Flash Log.
FL_IO_TM_W_RQ =>  [FLASHLOG] Average redo log write latency. It includes write I/O latency only
FL_IO_W =>  [FLASHLOG] The number of writes serviced by Exadata Smart Flash Log
FL_IO_W_SKIP_BUSY =>  [FLASHLOG] The number of redo writes that bypassed Exadata Smart Flash Log because the flash log disks contained too much active data, which is data that has not yet been written to disk, or has been checkpointed by flash log.
FL_IO_W_SKIP_BUSY_MIN =>  [FLASHLOG] The number of redo writes during the last minute that could not be serviced by Exadata Smart Flash Log because too much data had not yet been written to disk.
FL_IO_W_SKIP_DISABLED_GD =>  [FLASHLOG] The number of times Exadata Smart Flash Log was disabled for the underlying grid disk, usually caused by recent write errors on that disk
FL_IO_W_SKIP_IORM_LIMIT =>  [FLASHLOG] The number of times IORM limit was reached for the disk containing the redo log
FL_IO_W_SKIP_IORM_PLAN =>  [FLASHLOG] The number of times the flash log was disabled in the IORM plan
FL_IO_W_SKIP_LARGE =>  [FLASHLOG] The number of large redo writes that could not be serviced by Exadata Smart Flash Log because the size of the data was larger than the amount of available space on any flash disk.
FL_IO_W_SKIP_LOG_ON_FLASH =>  [FLASHLOG] The number of times the redo log resided on flash (for systems that are not Extreme Flash systems)
FL_IO_W_SKIP_NO_BUFFER =>  [FLASHLOG] The metric shows the number of redo writes that could not be serviced by Exadata Smart Flash Log due to a lack of available buffers.
FL_IO_W_SKIP_NO_FL_DISKS =>  [FLASHLOG] The number of times there were no active flash log disks because the disks were inactive or unhealthy
FL_PREVENTED_OUTLIERS =>  [FLASHLOG] The number of redo writes written to disk that exceeded the outlier threshold. These writes would have been outliers if not for Exadata Smart Flash Log.
FL_RQ_TM_W =>  [FLASHLOG] Cumulative redo log write request latency. It includes networking and other overhead.
FL_RQ_TM_W_RQ =>  [FLASHLOG] Average redo log write request latency.
FL_RQ_W =>  [FLASHLOG] Total number of redo log write requests. It includes requests not handled by Exadata Smart Flash Log.
FL_SKIP_OUTLIERS =>  [FLASHLOG] The number of outliers when redo log write skips use of the flash log. The use of the flash log can be skipped because of FL_IO_W_SKIP_DISABLED_GD, FL_IO_W_SKIP_IORM_LIMIT, FL_IO_W_SKIP_IORM_PLAN, FL_IO_W_SKIP_LOG_ON_FLASH, or FL_IO_W_SKIP_NO_FL_DISKS.
DB_PC_BY_ALLOCATED =>  [PMEM] Number of megabytes allocated in PMEM cache for this database.
PC_BY_ALLOCATED =>  [PMEM] The number of megabytes allocated in PMEM cache. Tracks how many cachelines are used in the PMEM cache. If the value is close to the PMEM cache size, then the PMEM cache is fully populated.
PDB_PC_BY_ALLOCATED =>  [PMEM] Number of megabytes allocated in PMEM cache for this pluggable database (PDB).
===================================================
DW setttings;
_cell_fc_dw_min_pcntg reduce the large read(i.e. temp read,smart scan) misses (which was going to disk) and get this served from flash
cat > setparams.sh<<'EOF'
#cellcli -e 'alter iormplan objective=balanced'

cellcli -e "alter cell events = \"immediate cellsrv.cellsrv_setparam('_cell_cache_thrashing_detection_tolerance', 1)\""
cellcli -e "alter cell events = \"immediate cellsrv.cellsrv_setparam('_cell_fc_lw_max_percentage', 70)\""
cellcli -e "alter cell events = \"immediate cellsrv.cellsrv_setparam('_cell_fc_oltp_nonprio_resv_pcntg', 10)\""
cellcli -e "alter cell events = \"immediate cellsrv.cellsrv_setparam('_cell_iorm_lw_flash_busy_threshold', 40)\""
cellcli -e "alter cell events = \"immediate cellsrv.cellsrv_setparam('_cell_iorm_lw_flash_idle_hd_util_threshold',30)\""
cellcli -e "alter cell events = \"immediate cellsrv.cellsrv_setparam('_cell_fc_disable_lw_flash_wear_heuristic', 'TRUE')\""
cellcli -e "alter cell events = \"immediate cellsrv.cellsrv_setparam('_cell_fc_datasync_hd_busy_wait_us', 10000)\""
cellcli -e "alter cell events = \"immediate cellsrv.cellsrv_setparam('_cell_flashcache_dsync_jobs', 8)\""
cellcli -e "alter cell events = \"immediate cellsrv.cellsrv_setparam('_cell_fc_dw_min_pcntg', 15)\""
v=`date +'%Y%m%d%H%M'`
cp /opt/oracle/cell/cellsrv/deploy/config/cellinit.ora /opt/oracle/cell/cellsrv/deploy/config/cellinit.ora.$v
echo "_cell_cache_thrashing_detection_tolerance=1">>/opt/oracle/cell/cellsrv/deploy/config/cellinit.ora
echo "_cell_fc_oltp_nonprio_resv_pcntg=10">>/opt/oracle/cell/cellsrv/deploy/config/cellinit.ora
echo "_cell_fc_lw_max_percentage=70">>/opt/oracle/cell/cellsrv/deploy/config/cellinit.ora
echo "_cell_iorm_lw_flash_busy_threshold=40">>/opt/oracle/cell/cellsrv/deploy/config/cellinit.ora
echo "_cell_iorm_lw_flash_idle_hd_util_threshold=30">>/opt/oracle/cell/cellsrv/deploy/config/cellinit.ora
echo "_cell_fc_disable_lw_flash_wear_heuristic=TRUE">>/opt/oracle/cell/cellsrv/deploy/config/cellinit.ora
echo "_cell_fc_datasync_hd_busy_wait_us=10000">>/opt/oracle/cell/cellsrv/deploy/config/cellinit.ora
echo "_cell_flashcache_dsync_jobs=8">>/opt/oracle/cell/cellsrv/deploy/config/cellinit.ora
echo "_cell_fc_dw_min_pcntg=15">>/opt/oracle/cell/cellsrv/deploy/config/cellinit.ora
EOF
dcli -g cells -l root -f setparams.sh
dcli -g cells -l root sh setparams.sh

====================================================
FlashCache: cellcli -e 'alter cell events = "immediate cellsrv.cellsrv_flashcache(Reset,0,0,0)"'      -- or 0,0,1
            cellcli -e 'alter cell events = "immediate cellsrv.cellsrv_flashcache(Resetstats,0,0,0)"' -- or 0,0,1
            cellcli -e 'alter cell events = "immediate cellsrv.cellsrv_flashcache(dumpStats,0,0,0)"'  -- or 0,0,1
			cellcli -e 'alter cell events="immediate cellsrv.cellsrv_flashcache(dumpheader, <addr1>, <addr2>, 1)'
			cellcli -e 'alter cell events = "immediate cellsrv.cellsrv_flashcache(dumpGroups,0,0,0)"' 
			cellcli -e 'alter cell events = "immediate cellsrv.cellsrv_flashcache(dumpobj,0,0,0)"' 
			cellcli -e 'alter cell events = "immediate cellsrv.cellsrv_flashcache(dumplru,0,0,0)"'  
			cellcli -e 'alter cell events = "immediate cellsrv.cellsrv_flashcache(dumplru,0,2,3)"' (where parameter=2 means medium-level dump, parameter=3 means for all lru lists.)
			cellcli -e 'alter cell events = "trace[cellsrv_flash_cache_layer] disk=high,memory=high"'
			cellcli -e 'alter cell events = "trace[cellsrv_flash_cache_layer] off"'
            alter cell events="trace[CELLSRV_Flash_Cache_Layer.*] disk=highest/default" --turn on/off
            --to fix large IO throttling which could cause 'direct path read'
            alter cell events = "cellsrv.cellsrv_iorm_ctl[MAX_LIO] opval=250"  --_cell_iorm_max_lio
            alter cell events = "cellsrv.cellsrv_iorm_ctl[WL_MODE] opval=1" --_cell_iorm_wl_mode
            alter cell events = "cellsrv.cellsrv_iorm_ctl[PERF_STATS] opval=1" --Collect IORM performance stats, set it back to 0 after several minutes
            cellcli -e $'alter cell events = "immediate cellsrv.cellsrv_setparam(\'_cell_oflsrv_fplib_passthru_timeout_msec\', 20000)"';
            alter cell events = "immediate cellsrv.cellsrv_setparam('_cell_fc_toresilver_limit_chdrs', 390000)"; -Datasync starts at the condition of numElems>target to flush dirty data into hard disk
            alter cell events = "immediate cellsrv.cellsrv_setparam('_cell_fc_datasync_hd_idle_wait_us', 50000)";
            alter cell events = "immediate cellsrv.cellsrv_setparam('_cell_flashcache_dsync_jobs', 8)";
            alter cell events = "immediate cellsrv.cellsrv_setparam('_cell_fc_datasync_max_iops', 120)";
            alter cell events = "immediate cellsrv.cellsrv_setparam('_cell_fc_datasync_min_iops', 30)";
            alter cell events = "immediate cellsrv.cellsrv_setparam('_cell_cache_thrashing_detection_tolerance', 1)"; --95 to 1 to reduce temp io/large io latency due to spill to disk
                                                                     _cell_fc_row_allowlist
                                                                     _cell_fc_lw_max_row_age_in_sec
                                                                     _cell_iorm_lw_flash_busy_threshold --if the flash is utilized <_cell_iorm_lw_flash_busy_threshold(20%,not counting LW), will use _cell_iorm_lw_flash_idle_hd_util_threshold(50%) as the IORM disk busy threshold instead of 100%.
                                                                     _cell_fc_disable_lw_flash_wear_heuristic=TRUE --those 3 are to disable large write rejections due to max limit
                                                                     _cell_fc_lw_max_percentage=100  --0 to disable large write(tempsort) on FC
                                                                     _cell_fc_disable_lw_background_flush=TRUE --to disable datasync job
                                                                     _cell_fc_target_fraction_lw_to_replenish_per_scan
            cellcli -e 'alter cell events = "immediate cellsrv.cellsrv_flashcache(dumpctdstats,0,0,0)"'; 
Storage Indexe:   cellcli -e 'alter cell events="immediate cellsrv.cellsrv_storidx('dumpridx','all',0, 0,0)"'
                  cellcli -e 'alter cell offloadgroupEvents = "immediate cellsrv.cellsrv_storidx(dumpridx,all, 0, 0, 0)"'
		          #1: dumpridx/purge/enable/disable
				  #2: all/<griddiskname>
				  #3: 0/<data_object_id>
				  #4: 0/<tablespace_id>
				  #5: 0/<unique dbid> (x$ksqdn.KSQDNGUNID)
Ramcache: cellcli -e 'alter cell events="immediate cellsrv.cellsrv_ramcache(addstore,1,0,0)"'
          cellcli -e 'alter cell events="immediate cellsrv.cellsrv_ramcache(dumpstats, 0,0,1)"'
          cellcli -e 'alter cell events="immediate cellsrv.cellsrv_ramcache(dropstore,1,0,0)"'
resetstats  ：   cellcli -e 'alter cell events = "immediate cellsrv.cellsrv_resetstats('all')"'  
                     or the items from: cellcli -e 'alter cell events="immediate cellsrv.cellsrv_dump(list,0)"'
cellsrv_dump：   List all: cellcli -e 'alter cell events="immediate cellsrv.cellsrv_dump(list,0)"'
                 dump all: cellcli -e 'alter cell events="immediate cellsrv.cellsrv_dump(all,0)"'
                 system state dump: cellcli -e 'alter cell events="immediate cellsrv.cellsrv_statedump(0|1|2,0)"'
                 Basic iostats: cellcli -e 'alter cell events="immediate cellsrv.cellsrv_dump('devio_stats',0)"'
                 IO latency: cellcli -e 'alter cell events="immediate cellsrv.cellsrv_dump('iolstats',0)"'
				             cellcli -e 'alter cell events="immediate cellsrv.cellsrv_resetstats(iolstats)"'
                 ioreasons:  cellcli -e 'alter cell events="immediate cellsrv.cellsrv_dump('ioreasons',0)"'
				             cellcli -e 'alter cell events="immediate cellsrv.cellsrv_resetstats(ioreasons)"' 
				 PMMstats(passthrough): cellcli -e 'alter cell events="immediate cellsrv.cellsrv_dump('mpp_stats',0)"'
				 Memory usage summary: cellcli -e 'alter cell events="immediate cellsrv.cellsrv_dump('memsummary',0)"'
				 SGA Memory Summary: cellcli -e 'alter cell events="immediate cellsrv.cellsrv_dump('sgaheapsummary',0)"'
				 SGA Memory Summary: cellcli -e 'alter cell events="immediate cellsrv.cellsrv_dump('pgaheap',0)"'
                 params : cellcli -e 'alter cell events="immediate cellsrv.cellsrv_dump('cellparams',0)"' 
				          cellcli -e 'alter cell events="immediate cellsrv.cellsrv_setparam('_cell_io_hang_time','90')"' 
				 Predicate I/O: cellcli -e 'alter cell events="immediate cellsrv.cellsrv_dump('predicateio',0)"' 
				 Clear Stats: cellcli -e 'alter cell events = "immediate cellsrv.cellsrv_resetstats()"'
				 Trace: cellcli -e 'alter cell events='trace[cellsrv.cellsrv_events_layer] memory=highest,disk=highest''
				        cellcli -e 'alter cell events='trace[cellsrv.cellsrv_events_layer] off''
				 Boot Time: cellcli -e ''alter cell events="immediate cellsrv.cellsrv_dump(start_time,1)"''

Cell Parameters:
================
_cell_in_lrg_testing = FALSE
_cell_big_data_sql_software_only = FALSE
_cell_big_data_sql_enable_authentication = TRUE
_cell_fake_num_cpu_cores = 0
version = 0.0
_cell_max_pll_pred_writes = 36
_cell_pred_writes_autotune_enabled = TRUE
_cell_max_pll_pred_reads = 36
_cell_pred_reads_autotune_enabled = TRUE
_cell_max_cellsup_time_in_sec = 60
_cell_max_flash_largeios = -1
_remote_cell_mgr_instances = 8
_cell_num_threads = 154 (default = 125)
_cell_num_threads_in_short_wait = 20 (default = 0)
_cell_max_pll_pred_filters = 128 (default = 0)
_cell_pred_filters_autotune_enabled = TRUE
_cell_pred_selectivity_cap = 16
_cell_pred_buffer_credits_enabled = TRUE
_cell_pred_max_buffer_credits = 250
_cell_num_buffers = 9000
_cell_num_1mb_buffers = 10000 (default = 0)
_cell_num_1mb_ocl_cache_buffers_ratio = 10
_cell_num_1mb_bwr_buffers = 180
_cell_num_1mb_brr_buffers = 180
_cell_num_1mb_sar_buffers = 200
_cell_max_dynbufs_memsize = 3072 (default = 0)
_cell_listener_port = 5042
_exc_bsm_listener_port = 5047
_exc_bsw_listener_port = 5048
_exc_syseds_listener_port = 5046
_exc_usreds_listener_port = 5050
_exc_egs_listener_port = 5045
_exc_ers_listener_port = 5049
_exc_ers_fcgi_port = 9000
_exc_ebts_listener_port = 5044
_exc_edv_listener_port = 5051
_exc_esnp_listener_port = 5055
_exc_ifd_listener_port = 5056
_ifd_allow_nontls_connections = TRUE
_cell_in_container = FALSE
_cell_listener_backlog = 1000
_cell_listener_pll_jobs = 23
_cell_listener_req_batch = 100
_cell_num_0_byte_recv_ports = 14
_cell_num_0_byte_srq_ports = 1
_cell_num_512_byte_recv_ports = 1
_cell_num_512_byte_srq_ports = 1
_cell_num_2_kb_recv_ports = 1
_cell_num_2_kb_srq_ports = 1
_cell_num_4_kb_recv_ports = 2
_cell_num_4_kb_srq_ports = 1
_cell_num_8_kb_recv_ports = 20 (default = 12)
_cell_num_8_kb_srq_ports = 8
_cell_num_8_kb_recv_ports_all_flash = 20 (default = 12)
_cell_num_8_kb_srq_ports_all_flash = 8
_cell_num_16_kb_recv_ports = 2
_cell_num_16_kb_srq_ports = 1
_cell_num_32_kb_recv_ports = 2
_cell_num_32_kb_srq_ports = 1
_cell_num_64_kb_recv_ports = 1
_cell_num_64_kb_srq_ports = 1
_cell_num_1_mb_recv_ports = 2 (default = 1)
_cell_num_1_mb_srq_ports = 2 (default = 1)
_ms_cell_ioctl_timeout = 600000
_cell_cd_metadata_slow_list = 
_cell_cd_metadata_prepare_timeout_in_sec = 5
_cell_iorm_test_mode = FALSE
_cell_iorm_perf_stats = FALSE
_cell_iorm_wl_mode = 0
_cell_iorm_hipri_alloc = 0
_cell_iorm_medpri_alloc = 0
_cell_iorm_lowpri_alloc = 0
_cell_iorm_asm_alloc = 0
_cell_iorm_lutil_limit = 0
_cell_iorm_hints_enabled = FALSE
_iorm_hint0 = -1
_iorm_priority0 = -1
_iorm_hint1 = -1
_iorm_priority1 = -1
_iorm_hint2 = -1
_iorm_priority2 = -1
_iorm_hint3 = -1
_iorm_priority3 = -1
_iorm_hint4 = -1
_iorm_priority4 = -1
_iorm_hint5 = -1
_iorm_priority5 = -1
_iorm_hint6 = -1
_iorm_priority6 = -1
_iorm_hint7 = -1
_iorm_priority7 = -1
_cell_iorm_pri_catidx = -1
_cell_iorm_pri_dbidx = -1
_cell_iorm_pri_cgidx = -1
_cell_iorm_enable = TRUE
_cell_iorm_enable_protect_sm = TRUE
_cell_iorm_enable_protect_lg = TRUE
_cell_iorm_max_io = 0
_cell_iorm_max_lio = 0
_cell_iorm_conc_writes = 0
_cell_iorm_deadline = 0
_cell_iorm_outlier_fd_msec = 2000
_cell_iorm_outlier_hd_msec = 2000
_cell_iorm_flood_control_interval_sec = 3600
_cell_iorm_lowpri_delay_ms = 0
_cell_iorm_fake_vaults = 0
_cell_iorm_fake_cls = 0
_cell_iorm_fake_dbs = 0
_cell_iorm_busy_util = 15
_cell_iorm_test_plan_conversion = FALSE
_cell_fc_warm_up_timeout = 2880
_cell_use_wtfc_for_cc = FALSE
_cell_fc_warm_up_percent = 99
_cell_fc_warm_up_io_time_percent = 10
_cell_fc_warm_up_io_time_us = 100
_cell_fc_warm_up_counter = 1
_cell_fc_pop_percent = 100
_cell_fc_warmup_minutes_since_online = 60
_cell_fc_warmup_asmquery_interval_in_min = 15
_cell_fc_pop_min_fs_size_mb = 3145728
_cell_iorm_adjust_fcmin = 50
_cell_iorm_maxpending_io_flash = 0
_cell_iorm_maxpending_lio_hdd = 3
_cell_iorm_cdbroot_fcsize_percent = 500
_cell_hard_disable = FALSE
_cell_fc_warmup_mirror_cell_query_interval_in_min = 5
_cell_raise_softassert_on_harderr = FALSE
_cell_enable_ossnet_checksum = 0
_cell_enable_skgxp_stats = TRUE
_skgxp_udp_use_tcb = TRUE
_skgxp_udp_use_tcb_client = TRUE
_cell_memory_tracing = TRUE
_cell_client_dump_interval = 0
_cell_rq_dump_frequency_minutes = 1440 (default = 0)
_cell_dmpsga_enabled = FALSE
_cell_enable_dynamic_credits = -1
_cell_num_ios_per_predjob = 16
_cell_max_kuty_failure_diagnostics = 0
_cell_print_all_params = FALSE
_cell_smartio_passthru_enabled = FALSE
_cell_pred_enable_fp_preprocess = TRUE
_cell_pred_no_predio_limit = FALSE
_cell_pred_enable_io_buffer_eviction = TRUE
_cell_pred_enable_dest_buffer_eviction = TRUE
_cell_pred_enable_flashio = TRUE
_cell_snapshot_bufsize = 1
_cell_snapshot_interval = 100
_cell_gen_time_stats_level = 1
_cell_fsa_free_time_stats_enabled = FALSE
_cell_force_split_gdisk = FALSE
_cell_testlevel = 0
_cell_max_receive_buffers_per_port = 600
_cell_max_receive_buffers_per_srqport = 512
_cell_num_4k_buffers = 20000
_cell_num_8k_buffers = 62000 (default = 30000)
_cell_num_8k_buffers_all_flash = 120000 (default = 35000)
_cell_num_16k_buffers = 10000 (default = 5000)
_cell_num_32k_buffers = 5000
_cell_num_64k_buffers = 5000
_cell_num_128k_buffers = 6000
_cell_max_receive_buffers_8k_port = 1000
_cell_max_receive_buffers_8k_srqport = 1024
_cell_max_receive_buffers_1mb_port = 50
_cell_max_receive_buffers_1mb_srqport = 50
_cell_crash_on_error = 0
_cell_crash_on_error_skip_n = 0
_restart_cellsrv_on_dimm_ue = FALSE
_cell_safefile_sync_enabled = TRUE
_cell_1mb_buffers_hugepage_support = TRUE
_skgxp_udp_interface_detection_time_secs = 1
_skgxp_gen_ant_ping_misscount = 8
_skgxp_gen_ant_ping_misscount_delay = 225
_disable_diskmon_tcp_monitor = FALSE
_disable_diskmon_subnet_manager_query = FALSE
_disable_diskmon_clsb = FALSE
_enable_diskmon_roce_query = TRUE
_diskmon_enable_dead_cell_monitor_bdsql = TRUE
_skgxp_min_zcpy_len = 2147483647
_skgxp_min_rpc_rcv_zcpy_len = 2147483647
_skgxp_zcpy_flags = 2147483647
_skgxp_ctx_flags1 = 0
_skgxp_ctx_flags1mask = 0
_skgxp_dynamic_protocol = 0
_skgxp_inets = 0
_skgxpg_last_parameter = 27
_skgxp_ant_options = 0
_libcell_enable_libcell_interrupts = 1
_cell_rcvport_hist_size = 0
_skgxp_gen_rpc_no_path_check_in_sec = 1
_skgxp_gen_rpc_timeout_in_sec = 300
_skgxp_gen_ant_off_rpc_timeout_in_sec = 10
_enable_lgwr_blkno_trace = FALSE
_libcell_enable_reid_memory_protect = FALSE
_reconnect_to_cell_freq_in_sec = 2
_reconnect_to_cell_attempts = 11
_disconnect_to_cell_attempts = 2
_reconnect_controls_reset_interval = 60
_dskm_disable_reconnect_to_cell = FALSE
_diskmon_use_storage_network = FALSE
_diskmon_debug_flags = 0
_cell_disable_resource_leak_check = FALSE
_cell_disable_ant_check_reid = FALSE
_cell_disable_proactive_drop = FALSE
_cell_server_event = 
_cell_client_event = 
_cell_offloadserver_event = 
_egs_client_event = 
_cell_reserve_hugepage_memory_mb = 24
_cell_num_extra_hugepages_for_offlining = 10
_cell_num_overcommit_hugepages = 13
_cell_tolerates_max_backward_drift_microsecs = 300000
_cell_num_sched_log_entries = 8192
_cell_storage_index_columns = 8 (default = 0)
_cell_storage_index_partial_reads_threshold_percent = 85
_cell_enable_storage_index_for_loads = TRUE
_cell_enable_storage_index_for_writes = TRUE
_cell_storage_index_diag_mode = 0
_cell_storage_index_sizing_factor = 2
_cell_pred_max_smartio_sessions = 4820 (default = 0)
_cell_pred_max_core_exec_threads = 204 (default = 14)
_cell_imcpop_max_req_with_io_buf_percent = 30
_cell_max_pending_imcpop_req_limit = 200000 (default = 0)
_cell_core_exec_ctl_level = 0
_cell_pred_num_ios_toissue_flashobj = 2
_cell_max_topheap_references = 50
_cell_pred_max_cus_per_filter = 1
_cell_load_timezone_during_boot = TRUE
_cell_sendport_private_rqh_pool_size = 10
_cell_rdmainfo_ipcdat_rqh_size = 4096
_cell_sendport_global_rqh_num_pools = 512
_cell_sendport_global_rqh_pool_maxincr = 150
_cell_capability_version = 0
_cell_iolat_stats_disable = FALSE
_cell_pred_mapelem_split_size = -1
_cell_perf_flags = 0
_cell_enable_sbuf_check = FALSE
_cell_fc_columnar_force_cc1 = FALSE
_cell_columnar_cache_no_pruning = FALSE
_cell_sbuf_size_in_mb = 36 (default = 0)
_cell_disable_crash_dump_enhancement = FALSE
_cell_object_expiration_hours = 24
_cell_mutex_stats = 0
_cell_port_activity_threshold = 300000
_cell_ant_port_activity_threshold = 1800000
_cell_ant_port_noopen_threshold = 60000
_cell_write_simulate_hard_error_freq = 0
_cell_assert_on_flash_data_corruption = 0
_cell_flashcache_diag_reads_frequency = 0
_cell_flashcache_enable_coalescing = TRUE
_cell_flashcache_mdextent_chksum = 2
_cell_read_flash_data_verif_level = -1
_cell_read_pmem_data_verif_level = -1
_cell_fc_do_read_verification = -1
_cell_fc_auto_upgrade_ctrlblk = TRUE
_cell_fc_columnar_enblchksm = FALSE
_cell_fc_columnar_persistence_mode = 2
_cell_enable_tier1_columnar_cache = TRUE
_cell_enable_tier1_columnar_cache_direct_access = TRUE
_cell_tier1_columnar_cache_min_pop_size_in_kb = 384 (default = 0)
_cell_read_flash_gdisk_verif_level = 1
_cell_max_retry_on_read_flash_gdisk_verif_err = 2
_cell_enable_read_verif_on_these_gdisks = 
_cell_enable_read_verif_on_gdisk_first_N_MB = -1
_cell_small_read_verif_memory_budget_MB = -1
_cell_flash_cache_sanity_checking = 0
_cell_fc_force_caching_for_nocache_ios = FALSE
_cell_fc_enable_unaligned_caching = TRUE
_cell_fc_enable_redolog_caching = TRUE
_cell_fc_enable_advm_largeio_caching = TRUE
_cell_fc_enable_shutdown_mdsync = TRUE
_cell_fc_shutdown_jobs_per_store = 16
_cell_shutdown_timeout_in_sec = 6
_cell_state_dump_timeout_in_sec = 4
_cell_max_memory = 256344 (default = 0)
_cell_max_dump_objects = 300000
_cell_max_connections = 1500 (default = 0)
_cell_sga_lowmem_threshold_size = 3096 (default = 0)
_cell_nomem_threshold_enabled = TRUE
_cell_sga_lowmem_threshold_enabled = TRUE
_cell_disable_heap_summary = FALSE
_cell_disable_subheap_summary = TRUE
_cell_disable_pgaheap_summary = FALSE
_cell_disable_cachepage_checksum = FALSE
_cell_flashcache_max_FDOM_outst_ios = 70
_cell_flashcache_throttle_client_io = FALSE
_cell_flashcache_dsync_jobs = 6
_cell_flashcache_gd_slowflush_jobs = 16
_cell_wait_gdisk_refcnt_timeout_in_sec = 600
_cell_gd_io_quiescent_timeout = 10
_cell_auto_close_fd_interval = 120
_cell_dump_sga_on_oom_exception = FALSE
_cell_quarantine_manager_disabled = FALSE
_cell_qm_disable_sql_step_quarantine = FALSE
_cell_qm_disable_disk_region_quarantine = FALSE
_cell_qm_db_quarantine_threshold = 10
_cell_qm_sqlps_quarantine_threshold = 9
_cell_qm_offload_quarantine_threshold = 3
_cell_qm_db_imc_threshold = 30
_cell_qm_db_imc_time_threshold = 86400
_cell_thread_max_trace_file_size = -1
_cell_redolog_fast_ack = FALSE
_cell_disable_flashcache_db_blk_chksum = FALSE
_cell_disable_platform_decryption = FALSE
_cell_offload_decryption = TRUE
_cell_fips_compliant_decryption = TRUE
_cell_disable_flash_gdisk_db_blk_chksum = FALSE
_cell_disable_columnar_cache = FALSE
_cell_disable_columnar_cache_for_encrypted_tbs = FALSE
_cell_disable_columnar_cache_for_nonehcc_tbs = FALSE
_cell_disable_background_CC2_for_nonehcc = FALSE
_cell_high_comp_algo_level_cc2 = 1 (default = 0)
_cell_ivfscan_opt_enabled = TRUE
_cell_imc_pop_job_limit = 100
_cell_cc2_population_debug = 0
_cell_region_heuristics_read_count_threshold = 10
_cell_region_heuristics_gdsize_factor = 10
_cell_region_heuristics_linked_list_test = FALSE
_cell_region_heuristics_ovrflw_rgn_pool_size = 10000
_cell_disable_byte_swap_optimization = FALSE
_cell_auto_dump_errstack = TRUE
_cell_auto_dump_errstack_interval = 900
_cell_si_max_num_diag_mode_dumps = 20
_cell_flashdisk_blocksize = 0
_cell_fc_persistence_max_io_retry = 1
_cell_fc_slowflush_sleep_interval = 500
_cell_nc_slowflush_sleep_interval = 0
_cell_fc_persistence_state = 2
_cell_nc_persistence_state = 0
_cell_fc_md_shadow_paging_enabled = TRUE
_cell_nc_md_shadow_paging_enabled = TRUE
_cell_enable_fcgroups = TRUE
_cell_enable_allflash = FALSE
_cell_fc_use_32k_cachelines = FALSE
_cell_fc_scan_tc_blksize = 4
_cell_fc_autocache_scans = TRUE
_cell_fc_scan_elgblty_threshold = 1
_cell_fc_scan_tc_threshold = 2
_cell_fc_scan_tc_cooling_threshold = 10
_cell_fc_scan_tc_decay_zone_sz = 4
_cell_fc_scan_tc_num_decay_zones = 6
_cell_fc_scan_threshold_timeout = 1
_cell_fc_oltp_resv_pcntg = 50
_cell_fc_oltp_nonprio_resv_pcntg = 10
_cell_fc_oltp_max_pcntg = 100
_cell_fc_dw_max_pcntg = 100
_cell_fc_dw_min_pcntg = 0
_cell_xc_oltp_resv_pcntg = 50
_cell_xc_oltp_nonprio_resv_pcntg = 10
_cell_xc_oltp_max_pcntg = 100
_cell_xc_dw_max_pcntg = 100
_cell_xc_dw_min_pcntg = 0
_cell_fc_lw_min_pcntg = 0
_cell_fc_cache_unkept_tbls = TRUE
_cell_fc_num_hashbuckets = 0
_cell_fc_aura2_md_shadow_paging_enabled = TRUE
_cell_fc_bootstrap_timeout = 135000000
_cell_fc_max_FFI_region_allowed = 8912896
_cell_fc_bootstrap_jobs_per_store = 16
_cell_fc_bootstrap_prim_rd_jobs_per_store = 16
_cell_fc_bootstrap_shad_rd_jobs_per_store = 96 (default = 16)
_cell_fc_bootstrap_prim_rd_multi_io_enabled = TRUE
_cell_fc_bootstrap_ios_per_job = 16 (default = 1)
_cell_fc_resready_timeout_in_sec = 6
_cell_fc_cache_mirror_writes = 1
_cell_fc_dw_batch_size = 1
_cell_fc_lru_scan4freeable_depth = -1
_cell_nc_lru_scan4freeable_depth = 8
_cell_fc_enable_opread = TRUE
_cell_fc_replacement_threshold = 94
_cell_fc_trim_threshold = 97
_cell_fc_lrg_compression_ratio = 5
_cell_fc_outstanding_trim_ios = 1
_cell_fc_aging_write_hd_wait_us = 10000
_cell_fc_aging_write_qlc_wait_us = 1000
_cell_fc_datasync_hd_idle_wait_us = 6000
_cell_fc_datasync_hd_busy_wait_us = 200000
_cell_fc_datasync_qlc_idle_wait_us = 5000
_cell_fc_datasync_qlc_busy_wait_us = 10000
_cell_fc_toresilver_limit_mb = -1
_cell_nc_toresilver_limit_mb = -1
_cell_fc_toresilver_limit_chdrs = 390000
_cell_qm_max_simulated_railroad_crashes = 0
_cell_latency_warning_threshold = 
_cell_latency_threshold_check_interval_122 = 150000
_cell_latency_threshold_print_resource = 
_cell_latency_warning_max_num = 10
_cell_si_expensive_debug_tracing = FALSE
_cell_si_lock_pool_num_locks = 1024
_cell_poor_perf_schedule_time = 5000
_cell_iohang_schedule_time = 500
_cell_assert_unsafe_allocmem = FALSE
_cell_fplib_fix_control = 0
_cell_recover_enabled = TRUE
_cell_num_vers_check_fail_messages = 0
_cell_qm_db_quarantine_time_threshold = 86400
_cell_pthread_stacksize = 10485760
_ms_listener_port = 5043
HTTPS_PORT = 443
_cell_flashlog_flags = 0
_cell_flashlog_max_active_table_size = 8388608
_cell_secure_erase_power = 5
_cell_diag_mode_force = FALSE
_gentimestats_rut_thresh = 2000000
_gentimestats_rut_disable_stkdmp = FALSE
_gentimestats_rut_hang_factor = 5
_thread_hang_detection_disable = FALSE
_cell_mpp_cpu_freq = 1
_cell_mpp_threshold = 90
_cell_mpp_max_pushback = 100
_cell_mpp_cell_outnet_threshold = 50
_cell_mpp_rn_cpu_target = 95
_cell_mpp_rn_innet_threshold = 50
_cell_mpp_rn_sysmon_channel_timeout = 600000
_cell_mpp_ri_staleness_limit = 12000
_cell_mpp_pb_base_step = 5
_cell_mpp_pb_init_rate = 0
_cell_port_frozen_threshold = 3600000
_cell_io_to_drain_for_femcing_wait_time_in_sec = 5
_dskm_test_fence_postpone = 0
_dskm_ossthrd_wakeup_interval = 5000
_dskm_sysmon_collect_interval_in_ms = 500
_diskmon_member_fence_ignore_ack = FALSE
_cell_max_cellsrvstat_sessions = 3
_diskmon_simulation_event = 
_cell_tracefile_max_size = 1610612736
_cell_event_log_size_kb = 1024
_cell_disable_event_registry = FALSE
_si_write_diag_disable = FALSE
_cell_disable_si_minmax_for_valid_approx = FALSE
_cell_si_relocate_disabled = FALSE
_cell_iorm_reject_io_disabled = FALSE
_cell_iorm_pdb_fcgroup_drop = TRUE
_cell_iorm_flash_busy_threshold = 70
_cell_state_dump_options = 0
_libcell_all_high_bandwidth = FALSE
_libcell_lane0_failover_enabled = TRUE
_cell_num_offload_recv_queues = 1
_cell_num_offload_groups = 16
_cell_num_offload_processes = 1
_cell_num_offload_groupmsg_threads = 256 (default = 0)
Unable to lookup value for parameter _cell_in_debug_mode
_cell_trigger_egs_dscv_disk_online = FALSE
_cell_diag_flags = 1
_cell_ocl_sysrpc_timeout_ms = 1000
Unable to lookup value for parameter _cell_oflgrp_in_debug_mode
_cell_oflsrv_heartbeat_hard_timeout_sec = 600
_cell_oflsrv_heartbeat_soft_timeout_sec = 90
_cell_oflsrv_heartbeat_soft_timeout_thread_factor = 10
_cell_oflsrv_fplib_passthru_timeout_msec = 3000
_bdsql_oflsrv_heartbeat_timeout_sec = 600 (default = 240)
_cell_oflsrv_heartbeat_num_processed_rows = 7
_bdsql_oflsrv_heartbeat_num_processed_rows = 7 (default = 15)
_cell_enable_oflsrv_hang_quarantine = TRUE
_cell_oflsrv_start_timeout_sec = 120
_cell_oflsrv_max_repeated_restarts = 18
_cell_oflsrv_filter_idle_threshold_in_msec = 5000
_cell_oflsrv_subheap_threshold_in_kb = 1600
_cell_oflsrv_subheap_trim_enabled = TRUE
_cell_oflsrv_subheap_pre_trim_dump_cnt = 0
_cell_oflsrv_subheap_post_trim_dump_cnt = 0
_cell_enable_metadata_timed_action_cellsrv = TRUE
_cell_enable_metadata_sharing_cellsrv = TRUE
_cell_enable_metadata_sharing_oflsrv = TRUE
_cell_oflsrv_enable_parallel_metadata_cloning = TRUE
_cell_oflsrv_metadata_sharing_threshold_kb = 128
_cell_oflsrv_verify_shared_metadata_pages = FALSE
_cell_oflsrv_clonemd_privpage_percent = 0
_cell_oflsrv_sharedmd_ineffclone_percent = 0
_cell_oflsrv_cc2_build_client_or_mpp_passthru = TRUE
_libcell_diag_bucket_size = 32
_skgxp_diag_bucket_size = 32
_cell_diag_bucket_size = 131072 (default = 128)
_cell_shared_memory_address = 
_cell_shared_memory_protection = TRUE
_cell_mpk_quarantine_threshold = 3
_cell_memory_protection_flags = 9 (default = 0)
_cell_storage_index_cellsrv_pers_mode = 1 (default = 0)
_cell_storage_index_celloflsrv_pers_mode = 1 (default = 0)
_cell_storage_index_encryption_pers_mode = 1 (default = 0)
_cell_storage_index_enable_column_checksum = TRUE
_cell_storage_index_write_crypto_disabled = FALSE
_cell_storage_index_write_crypto_timeout_sec = 300
_cell_max_persistent_memory = 0
_ms_mprotect_corrupt_buf = TRUE
_cell_perf_action = 
_cell_perf_tests = 
_remote_io_1mb_bufs = 50
_cell_fc_enable_resilvering = TRUE
_cell_fc_columnar_test = 0
_cell_io_latency_sanity_check_threshold = 600000
_cell_enable_time_jump_forward_assert = TRUE
_cell_fc_logger_bootstrap_backwardscan = FALSE
_cell_fc_logger_bootstrap_timeout_in_sec = 60
_cell_fc_group_gc_threshold_in_sec = 86400
_cell_opendisk_timeout_in_sec = 20
_cell_ocl_health_check_interval = 0
_cell_oflissue_job_timeout = 3600000
_cell_cache_out_jobq_count = 50
_cell_si_pop_cache_usage_threshold = 50
_cell_flags_sparsegd = 0
_cell_aio_ctx_count = 32
_cell_netpoll_pps_count = 2
_cell_netpoll_snack_jobq_count = 6
_cell_spare0 = 0
_cell_spare1 = 0
_cell_spare2 = 0
_cell_iops_perf_testing = FALSE
_cell_netsend_returnjob_thres_for_8Kbuf = 500
_kse_snap_ring_size = 20 (default = 0)
_kse_snap_ring_record_stack = FALSE
_cell_num_priv_fsa_8k_buffers = 0
_cell_num_dynamic_priv_fsa_8k_buffers = 60
_cell_num_dynamic_priv_fsa_cachegets = 80
_cell_num_dynamic_priv_fsa_bids = 80
_cell_dynamic_priv_fsa_8k_iops_threshold = 160000
_cell_assert_on_diagmode_catching_wrong_results = FALSE
_cell_cd_scrubbing_exclude_list = 
_disk_scrubbing_bypass_asm_check = FALSE
_cell_use_1m_scrubbing_io = FALSE
_cell_receiveport_buf_alloc_incr = 10
_cell_receiveport_buf_alloc_margin = 50
_cell_num_qos_1_mb_recv_ports = 1
_cell_num_qos_1_mb_srq_ports = 1
_cell_max_receive_buffers_qos_1mb_port = 10
_cell_max_receive_buffers_qos_1mb_srqport = 64
_cell_num_dedicated_reap_jobs = 1 (default = 0)
_cell_oob_max_growth_percent = 20
_cell_oob_max_growth_qos = 250
_cell_enable_oss_metrics = TRUE
_cell_metricpoll_interval = 60
_cell_metric_ageout_time_mins = 60
_cell_system_thread_max_trace_file_size = 6291456
_cell_netpoll_snack_queue_thresh = 500
_cell_ffi_flush_interval = 2000
_cell_ffi_max_memory_usage_in_mb = 3000 (default = 2000)
_cell_purge_groupdir_time_interval = 0
_cell_enable_oss_metrics_ioreason_other = FALSE
_cell_timer_granularity_msec = 5
_cell_num_dynamic_priv_fsa_fcctxs = 20
_cell_executing_in_vm = FALSE
_cell_num_dynamic_objid_in_testing = 0
_cell_disable_state_dump_by_client_on_hang = TRUE
_cell_bio_disable = 0
_cell_disable_mc = FALSE
_cell_disable_mc_for_sparse = TRUE
_cell_enable_mprot_for_mc = FALSE
_cell_mc_max_pin_time_usec = 5000000
_cell_mc_op_hist_sz = 4000
_cell_mc_aging_policy = 0
_cell_rslv_poor_health = TRUE
_cell_mc_hash_tbl_sz = 251
_cell_ref_cnt_log_enable = FALSE
_cell_enable_rsp_msghist_lgwr = FALSE
_cell_hugetlbtext_relocate = TRUE
_cell_db_unique_name_check = TRUE
_cell_fxtab_metrics_test_cookie = 0
_cell_allow_write_cancellation_upon_hair_trigger = TRUE
_cell_allow_read_cancellation_upon_hair_trigger = TRUE
_cell_fxtab_metrics_testing = 0
_cell_dump_all_rsp = FALSE
_cell_enable_buffer_hist = FALSE
_cell_enable_buffer_iotype_hist = FALSE
_dbms = FALSE
_cell_sparse_saved_min_kb = 8
_cell_sparse_saved_min_prct = 10
_cell_sparse_ht_buckets = 25165824
_cell_sparse_ht_buckets_all_flash = 33554432
_cell_use_sparse_bitmap_extension = TRUE
_cell_convert_sparse_bitmap_to_map_elem = FALSE
_cell_disable_128K_client = FALSE
_cell_oflsrv_jvm_max_heap_size_in_mb = 0
Unable to lookup value for parameter _cell_os_memory_limit_in_mb
_cell_fxtab_metrics_history_duration = 0
_cell_fxtab_metrics_test_rankstat = FALSE
_cell_storage_index_max_memory_factor = 10
_cell_storage_index_init_memory_factor = 4
_cell_storage_index_avgnum_ridx_per_rgnhdr = 5
_cell_storage_index_eviction_disable = FALSE
_cell_storage_index_background_eviction_disable = FALSE
_cell_storage_index_target_free_ridx_percent = 1
_cell_storage_index_ridx_histogram_time_unit = 60
_cell_storage_index_group_ridx_histogram_bin_interval = 60
_cell_storage_index_group_ridx_histogram_number_bins = 360
_cell_storage_index_ridx_histogram_eviction_threshold = 192
_cell_storage_index_page_ridx_histogram_scale_factor = 4
_cell_storage_index_simulate_ridx_relocation = 0
_cell_enable_sparse_v2p_ht_dump = FALSE
_cell_assert_on_remote_read_wrc_mismatch = FALSE
_cell_xtss_max_filter_tokens = 0
_cell_xtss_max_filter_token_waiters = 0
_cell_xtss_max_filter_token_wait_time_in_sec = 60
_cell_xtss_force_protocol = 0
_cell_pdisk_max_inactive_time_in_sec = 900
_cell_enable_io_path_debug = FALSE
_cell_dax_hugepage_size = 4096
_cell_dxf_disk_size = 2097152
_cell_disable_commitcache_onemb_ioctl = FALSE
_cell_disable_ipcdat_on_server = FALSE
Unable to lookup value for parameter _cell_disable_ipcdat_on_client
_cell_enable_ipcdat_on_non_roce_client = FALSE
_cell_ipcdat_reduce_send_q_size = 0
_cell_ipcdat_do_sync_cache_ht_probe = FALSE
_cell_ipcdat_do_sync_cache_read = FALSE
_cell_estimated_ht_probe_latency_usec = 0
_cell_estimated_cache_read_latency_usec = 0
_cell_ipcdat_spin_before_block_wait_time_usec = 100
_cell_ipcdat_register_only_shmem = FALSE
_cell_nvcache_dump_ht = FALSE
_cell_nvcache_ht_max_entries = 20564352 (default = 0)
_cell_nvcache_ht_entries_per_bucket = 10
_cell_nvcache_ht_extid_entries_per_bucket = 10
_cell_enable_ipcdat_srq = FALSE
_cell_ipcdat_keep_alive_test = FALSE
_ipcdat_roce_port_num = 1
_ipcdat_roce_traffic_class = 0
_ipcdat_roce_sl = 4
_ipcdat_roce_vlan_id = 0
_ipcdat_roce_gid_override = 
_ipcdat_device_list = 
_ipcdat_completion_vec_mode = 0
_ipcdat_gid_fetch_mode = 0
_ipcdat_local_ack_timeout = 14
_ipcdat_retry_cnt = 1
_ipcdat_rnr_retry = 1
_ipcdat_min_rnr_timer = 0
_ipcdat_port_up_migration_delay_msec = 180000
_ipcdat_qp_drain_timeout_msec = 60000
_cell_max_ports_per_ip = 60000
_cell_kdzk_lib_name = 1
_cell_use_platform_compression = TRUE
_cell_num_8k_buffers_reserved_for_fcmd = 1000 (default = 1)
_cell_num_8k_buffers_reserved_for_mm = 1
_cell_primmd_badsec_dev = 
_cell_secmd_badsec_dev = 
_cell_undomd_badsec_dev = 
_cell_enable_gdisk_write_history = FALSE
_cell_num_1m_buffers_reserved_for_cdmd = 1
_cell_num_buffers_reserved_for_fcloggermd = 4000
_cell_sparse_scan_type_on_free = 0
_cell_disk_metadata_scrubbing_interval = 720
_cell_storage_index_set_membership_disabled = FALSE
_cell_storage_index_dense_bloom_max_ndv = 255
_cell_storage_index_dense_bloom_bit_ratio = 4
_cell_sipj_region_limit = 5
_cell_storage_index_max_rgnhdl_id = 65535
_cell_storage_index_num_stores = 12
_cell_storage_index_timeout_margin_msec = 700
_cell_fc_lwlrumove_enabled = TRUE
_cell_fc_hugepage_memory_enabled = TRUE
_cell_fc_hugepage_memory_mb = 0
_cell_health_factor_adjust_timeout_in_minute = 0
_cell_rolling_upgrade_warmup_enabled = FALSE
_cell_warmup_compare_mirror_hitrate = FALSE
_cell_cpurm_perf_stats = FALSE
_cell_cpurm_enable = TRUE
_cell_cpurm_disable_db_limits = FALSE
_cell_cpurm_use_avg_db_cpu_usage = FALSE
_cell_cpurm_db_hard_limit = FALSE
_cell_cpurm_db_hard_limit_scale_factor = 2
_cell_cpurm_imc_limit = 0
_cell_cpurm_imc_share = 1
_cell_cpurm_pf_share = 4
_cell_cpurm_max_reqs = -1
_cell_fc_columnar_size_limit_in_bytes = 131072 (default = 0)
_cell_cpurm_bkt_size = 1
_cell_cpurm_imc_lowlimit = 20
_cell_cache_thrashing_detection_tolerance = 95
_cell_cache_thrashing_detection_vfactor = -1
_cell_ctd_recent_thrashing_threshold_secs = 0
_cell_cache_thrashing_detection_use_aux_adjustment = TRUE
_cell_cache_thrashing_detection_frequency = 10
_cell_fc_nrw_allowlist = 4;10;12;16;26
_cell_fc_mrw_allowlist = 2
_cell_fc_row_allowlist = 2;6
_cell_fc_mrw_tempfilelist = 6
_cell_fc_high_priority_nrw_list = 17
_cell_fc_allow_asm_lw_caching = TRUE
_cell_iorm_lw_util_threshold = 100
_cell_iorm_lw_flash_idle_hd_util_threshold = 50
_cell_iorm_lw_flash_busy_threshold = 20
_cell_iorm_lw_flush_threshold = 50
_cell_redirect_cdmd_update_threshold = -1
_cell_iorm_flash_lw_weight = 5 (default = 4)
_cell_iorm_srd_fdcost = 0
_cell_iorm_swr_fdcost = 0
_cell_iorm_lrd_fdcost = 0
_cell_iorm_exc_util_mgr_enable = TRUE
_cell_iorm_exc_util_borrow_pct_small = 100
_cell_iorm_exc_util_borrow_pct_medium = 100
_cell_iorm_exc_util_borrow_pct_large = 100
_cell_iorm_exc_util_active_threshold = 75
_cell_fc_lw_max_percentage = 20
_cell_fc_dw_workload_lw_max_pct = 70
_cell_fc_enable_lw_imbalance_check = TRUE
_cell_fc_lw_max_deviation_pct = 10
_cell_fc_max_lw_to_replenish_per_scan_per_lru = 8192
_cell_fc_min_lw_to_replenish_per_scan_per_lru = 512
_cell_fc_target_fraction_lw_to_replenish_per_scan = 50
_cell_fc_thrashing_lw_replenish_interval_in_sec = 10
_cell_fc_lw_datasync_driver_sysjob_interval_in_msec = 300
_cell_fc_disable_lw_background_flush = FALSE
_cell_fc_disable_lw_flash_wear_heuristic = TRUE
_cell_fc_pct_keep_IOs_cant_find_CLs_stop_lw_caching = 5
_proxy_pipe_count = 4
_diskmon_server_proxy_threads = 4
_enable_proxy = FALSE
_enforce_client_idle_limit = FALSE
_enforce_client_message_protocol = FALSE
_dskm_proxy_socket_buffer_size = 262144
_cell_proxy_socket_buffer_size = 262144
_firewall_client_connection_limit = 8
_send_partial_proxy_data = FALSE
_cell_fc_min_victim_cache_size = 1
_cell_fc_ramp_up_percentage = 100
_cell_fc_lw_absorption_interval_in_sec = 30
_cell_fc_flash_bw_mb_per_sec = 0
_cell_perf_skip_trimerrs = TRUE
_cell_fc_flash_write_weighted_cost = 0
_cell_fc_lw_nontemp_bw_pct = 60
_cell_fc_lw_datatemp_ageout_time_minutes = 60
_cell_fc_lw_tempreadonce_ageout_time_minutes = 60
_cell_fc_lw_writeonly_ageout_time_minutes = 0
_cell_fc_lw_enable_replenish_if_thrashing = FALSE
_cell_fc_lw_temp_ignores_thrashing = TRUE
_cell_pcislot_socket0 = 255
_cell_ramcache_mode = 0
_cell_ramcache_max_mem_mb = 0
_cell_ramcache_max_stores = 16
_cell_ramcache_store_size_mb = 0
_cell_ramcache_max_pop_jobs = 60
_cell_ramcache_max_pop_reqs = 524288
_cell_ramcache_gc_port_threshold_ms = 259200000
_cell_writecache_debug_flags = 0
_cell_dxf_local_read_enabled = TRUE
_cell_ramcache_max_pop_reqs_per_job = 16
_cell_threads_enable_socket_affinity = TRUE
_cell_buffers_enable_socket_affinity = TRUE
_cell_flash_enable_socket_affinity = TRUE
_cell_enable_socket_affinity = TRUE
_cell_pred_filter_socket_jump_enabled = TRUE
_cell_socket_pre_jump_enabled = TRUE
_cell_pred_disk_max_reuse_cnt = 100
_cell_pred_filt_max_subheap_size_mb = 10 (default = -1)
_cell_cc_max_subheap_size_mb = 36
_cell_pred_metadata_subheap_size_mb = 36
_cell_seccomp_mode = 0
_cell_initial_average_flashdisk_io_latency_in_us = 100
_cell_initial_average_disk_io_latency_in_us = 10000
_cell_max_num_threads_issuing_io_per_device = 30
_cell_ipcdat_recycle_vip_eps = TRUE
_cell_ipcdat_async_wait_polling = FALSE
_cell_enable_ipcdat_qp_netdiag_dump = TRUE
_cell_ves_preinit = FALSE
_cell_drl_clean_frequency_secs = 30
_cell_drl_readlock_model = 1
_cell_ves_simulation = 0
_cell_ves_bulk_move_algorithm = 3
_cell_ves_snaptree = 
_cell_ves_xln_jobs = 4
_cell_ves_schedops_pooldisk_limit = 1
_cell_ves_xln_max_reqs = 10000
_cell_ipcdat_vip_async_wait_polling = TRUE
_cell_dax_protection_blocksize_bytes = 65536
_cell_enable_dax_torn_io_recovery = TRUE
_cell_pmemlog_band_weights = 32K:1,128K:2,1M:1
_cell_pmemlog_no_scan_reasons = 
_cell_pmemlog_flags = 2048
_cell_pmemlog_cq_multiplier = 2
_cell_dax_staging_buf_num_non1mb = 128 (default = 64)
_cell_enable_pmem_adr_dsc_check = TRUE
_cell_oss_rs_pipe_mutex_timeout = 1000 (default = -1)
_cell_enable_hd_scrub_confine_trigger = TRUE
_fndd_listener_port = 5053
_fndd_trace_credits = -1
_cell_use_fake_diskstats_on_rh = FALSE
_dskm_control_flags = 0
_cell_nc_throttle_wr_iops_threshold = 150000
_cell_nc_throttle_wr_mbps_threshold = 1500
_cell_num_buffers_reserved_for_asmquery = 1
_cell_num_offload_system_threads = 20
_cell_io_submit_hang_threshold = 0
_cell_xdmg_dscv_quiesce = 300
_cell_enable_cc1_to_cc2 = TRUE
_cell_enable_c2c_quarantine_check = TRUE
_egs_inactive_timeout = 86400
_egs_comm_timeout_in_sec = 600
_cell_hddctrl_hang_after_ioerr_time_in_ms = 30000
_cell_mixed_env_exadata_exascale = FALSE
_max_ossmsg_message_rdma_size = 512
_cell_no_global_queuing_iops_threshold = 100000
_cell_pdname_validation_interval_in_sec = 3600
_cell_fc_cache_line_shift = 17
_cell_nc_cache_line_shift = 16
_cell_rc_cache_line_shift = 16
_cell_pmemlog_buffer_stats_interval_in_sec = 10
_cell_fc_cache_only_dirty_data = FALSE
_cell_enable_sql_stats = TRUE
_libcell_hard_check_for_pmemlog = post-rdma
_libcell_enable_hardcheck_xrmemcache = FALSE
_cell_rds_tcp_reverse_ping_enabled = FALSE
_cell_allow_pooldisk_force_drop = FALSE
_cell_disk_state_change_notification_delay_in_sec = 0
_cell_confine_enable_history_failure = TRUE
_cell_confine_simulation = 0
_cell_confine_poweroff_nvme = 1
_cell_bad_disk_health_on_rebal_mode = 0
_cell_good_disk_health_fc_hit_ratio_percent = 99
_cell_good_disk_health_io_time_percent = 10
_cell_good_disk_health_io_time_us = 100
_cell_xrmem_cache_size_mb = -1
_cell_enroll_egs = TRUE
_cell_nc_disable_prefetch_buffer_usage_pct_threshold = 50
_cell_outstanding_res_q_count = 1021
_cell_num_aio_ctx_per_flash = 4 (default = 1)
_cell_max_num_events_aio_ctx = 64000
_cell_enable_pmemcache_crc_validation = TRUE
_client_pmemcache_rdma_read_disable = FALSE
_client_pmemcache_rdma_crc_check_mode = unsafe
_client_disable_exascale_crc_check = TRUE
_client_disable_exascale_inc_read = FALSE
_cell_fc_iohnt_forcecache_list = 51;52;56;61 //from X$KXDCM_IOREASON_NAME rebalance (50) and redo archives (33)
_cell_fc_iohnt_forcenocache_list = 51;52;56;61
_cell_enable_jumbo_alloc = TRUE
_cell_feature_test = FALSE
_client_ipcdat_outlier_threshold_ms = 4000
_cell_fsa_prot_config = 0
_cell_fsa_prot_by_size_in_bytes = -1
_cell_fsa_prot_by_name = 
Unable to lookup value for parameter _libcell_defer_ipcdat
_libcell_use_only_one_port = TRUE
_libcell_two_port_ipcdat = FALSE
_disk_scrub_io_latency_threshold_ms = 1000
_num_slow_disk_scrub_io_for_1m_region_threshold = 3
_cell_enable_readonlyfshung_reboot = TRUE
_cell_ves_disk_max_move_power_write = 4
_cell_ves_disk_max_move_power_add_disk = 8
_cell_ves_disk_max_move_power_read = 4
_cell_ves_memory_quota_mb = 51200
_cell_cacheable_history_size = 64
_cell_persist_member_fence = TRUE
_cell_fm_evict_timeout_in_hour = 24
_client_xrmemcache_rdma_atomic_rd_max = 12
