/*[[
    Show chart for dba_hist_librarycache. Usage: @@NAME {["<namespace>"] [0|inst_id] [yymmddhh24mi] [yymmddhh24mi]} [-f"<filter>"]
    Impacted by settings: starttime,endtime,instance
    inst_id: Default as all instances, other options are:
                0         - Separate all instances
                a         - Group all instances
                <inst_id> - Only the specific instance
    -f       : User-defined filter. For example, -f"latch_name like '%XDB%'"
    --[[
        &V2     : default={&INSTANCE}
        &V3     : default={&STARTTIME}
        &V4     : default={&ENDTIME}
        &filter : default={1=1},f={}
    --]]
]]*/
{
    _attrs=[[
        SELECT 'System Latch State Chart' title
        from dual]],
    _sql=[[
        WITH snap AS
         (SELECT /*+materialize no_expand*/
                trunc(end_interval_time + 0, 'mi') end_time, instance_number inst_id, dbid,
                ((end_interval_time + 0) - lead(end_interval_time + 0) OVER(PARTITION BY instance_number, startup_time ORDER BY snap_id desc)) * 86400 Slot_size,
                CASE WHEN end_interval_time+0 between NVL(to_date(:V3,'yymmddhh24miss'),sysdate-7) AND NVL(to_date(:V4,'yymmddhh24miss'),sysdate+1) THEN 0 END flag, 
                snap_id, instance_number, -9e8 * (startup_time + 0 - SYSDATE) + instance_number part_key
          FROM   dba_hist_snapshot
          WHERE  end_interval_time+0 between NVL(to_date(:V3,'yymmddhh24miss'),sysdate-7)-1.2/24 AND NVL(to_date(:V4,'yymmddhh24miss'),sysdate+1)
          AND    (:V2 IS NULL OR lower(:V2) IN ('0', 'a') OR instance_number = :V2)) 
        SELECT to_char(end_time,'YYYY-MM-DD HH24:MI') sample_time,namespace,
               round(sum(gets/slot_size),2) "Gets per Second",
               round(sum(PINS/slot_size),2) "Pins per Second",
               round(sum(GETHITS)*100/nullif(sum(GETS),0),2) "Gets Hit Ratio(%)",
               round(sum(PINHITS)*100/nullif(sum(PINS),0),2) "Pins Hit Ratio(%)"
        FROM   (SELECT /*+merge no_expand ordered_predicates*/
                      inst_id,end_time,flag,Slot_size,namespace|| decode(nvl(lower(:V2), 'a'), 'a', NULL, ' #' || inst_id) namespace,
                      GETHITS - nvl(LAG(GETHITS) OVER(PARTITION BY part_key,namespace ORDER BY snap_id),0) GETHITS,
                      GETS - nvl(LAG(GETS) OVER(PARTITION BY part_key,namespace ORDER BY snap_id),0) GETS,
                      PINS - nvl(LAG(PINS) OVER(PARTITION BY part_key,namespace ORDER BY snap_id),0) PINS,
                      PINHITS - nvl(LAG(PINHITS) OVER(PARTITION BY part_key,namespace ORDER BY snap_id),0) PINHITS
               FROM   DBA_HIST_LIBRARYCACHE NATURAL JOIN snap
               WHERE  (&filter)
               AND    (:V1 is null or upper(namespace) like upper('%&V1%'))) a
        WHERE  flag=0 and (GETS>0 OR PINS>0)
        GROUP  BY namespace, end_time
        ORDER  BY 1]],
    _pivot=true,
    labelsKMB=true,
}