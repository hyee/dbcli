/*[[
    Show chart for dba_hist_interconnect_pings. Usage: @@NAME {[0|inst_id] [yymmddhh24mi] [yymmddhh24mi]} [-byte|-ms|-sec] [-f"<filter>"]
    Impacted by settings: starttime,endtime,instance
    inst_id: Default as all instances, other options are:
                0         - Separate all instances
                a         - Group all instances
                <inst_id> - Only the specific instance
    -f       : User-defined filter. For example, -f"stat_name like '%time%'"
    -byte    : Only show bytes/sec
    -ms      : Only show ms/req
    -sec     : Only show seconds/sec
    --[[
        &V1     : default={&INSTANCE}
        &V2     : default={&STARTTIME}
        &V3     : default={&ENDTIME}
        &filter : default={1=1},f={}
        &COL    : default={A},byte={B},ms={M},sec={S}
    --]]
]]*/
{
    title="RAC Inter-Connect Ping Stats Chart",
    _sql=[[
        WITH snap AS
         (SELECT /*+materialize no_expand*/
                to_char(end_interval_time + 0, 'YYYY-MM-DD HH24:MI') end_time, instance_number inst_id, dbid,
                ((end_interval_time + 0) - lead(end_interval_time + 0) OVER(PARTITION BY instance_number, startup_time ORDER BY snap_id desc)) * 86400 Slot_size,
                CASE WHEN end_interval_time+0 between NVL(to_date(:V2,'yymmddhh24miss'),sysdate-7) AND NVL(to_date(:V3,'yymmddhh24miss'),sysdate+1) THEN 0 END flag, 
                snap_id, instance_number, -9e8 * (startup_time + 0 - SYSDATE) + instance_number part_key
          FROM   dba_hist_snapshot
          WHERE  end_interval_time+0 between NVL(to_date(:V2,'yymmddhh24miss'),sysdate-7)-1.2/24 AND NVL(to_date(:V3,'yymmddhh24miss'),sysdate+1)
          AND    (:V1 IS NULL OR lower(:V1) IN ('0', 'a') OR instance_number = :V1))
        SELECT end_time sample_time, event,
               case when '&COL' in ('A','M') then round(AVG(AVG_500B),2)  end "Ms/Req(500B)",
               case when '&COL' in ('A','B') then round(sum(CNT_500B),2)  end "Bytes(500B)/Sec",
               case when '&COL' in ('A','S') then round(sum(WAIT_500B),2) end "Ms(500B)/Sec",
               case when '&COL' in ('A','B') then round(sum(CNT_8K),2)    end "Bytes(8K)/Sec",
               case when '&COL' in ('A','S') then round(sum(WAIT_8K),2)   end "Ms(8K)/Sec",
               case when '&COL' in ('A','M') then round(AVG(AVG_8K),2)    end "Ms/Req(8K)"
        FROM  (SELECT /*+merge*/
                       end_time,
                       event || decode(nvl(lower(:V2), 'a'), 'a', NULL, ' #' || inst_id) event,
                       CNT_500B/Slot_size*500 CNT_500B,
                       WAIT_500B/Slot_size*1E-3 WAIT_500B,
                       WAIT_500B/CNT_500B*1E-3 AVG_500B,
                       CNT_8K/Slot_size*8192 CNT_8K,
                       WAIT_8K/Slot_size*1E-3 WAIT_8K,
                       WAIT_8K/CNT_8K*1E-3 AVG_8K
               FROM   (SELECT /*+merge no_expand ordered_predicates*/
                              inst_id,end_time,flag,Slot_size,
                              '#'||INSTANCE_NUMBER||'-#'||TARGET_INSTANCE event,
                              CNT_500B - nvl(LAG(CNT_500B) OVER(PARTITION BY part_key,TARGET_INSTANCE ORDER BY snap_id),0) CNT_500B,
                              WAIT_500B - nvl(LAG(WAIT_500B) OVER(PARTITION BY part_key,TARGET_INSTANCE ORDER BY snap_id),0) WAIT_500B,
                              WAIT_8K - nvl(LAG(WAIT_8K) OVER(PARTITION BY part_key,TARGET_INSTANCE ORDER BY snap_id),0) WAIT_8K,
                              CNT_8K - nvl(LAG(CNT_8K) OVER(PARTITION BY part_key,TARGET_INSTANCE ORDER BY snap_id),0) CNT_8K
                       FROM   DBA_HIST_INTERCONNECT_PINGS NATURAL JOIN snap
                       WHERE  (&filter)
                       AND    INSTANCE_NUMBER!=TARGET_INSTANCE) a
               where (WAIT_500B>0 or WAIT_8K>0) and flag=0)
        GROUP  BY event, end_time
        ORDER  BY 1]],
    _pivot="mixed",
    _sorter=2,
    labelsSeparateLines=true,
    deviation=true,
    labelsKMG2=true,
    height=400,
}