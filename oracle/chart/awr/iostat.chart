/*[[
    Show chart for dba_hist_iostat_detail. Usage: @@NAME {["<function/file type name>"] [0|inst_id] [yymmddhh24mi] [yymmddhh24mi]} [-n] [-f"<filter>"]
    Impacted by settings: starttime,endtime,instance
    inst_id: Default as all instances, other options are:
                0         - Separate all instances
                a         - Group all instances
                <inst_id> - Only the specific instance
    -f       : User-defined filter. For example, -f"stat_name like '%time%'"
    -n       : Group by FILETYPE_NAME, default as group by FUNCTION_NAME
    --[[
        @VERSION: 11.2={}
        &V2     : default={&INSTANCE}
        &V3     : default={&STARTTIME}
        &V4     : default={&ENDTIME}
        &GRP    : default={FUNCTION_NAME}, n={FILETYPE_NAME}
        &filter : default={1=1},f={}
    --]]
]]*/
{
    title="System IO State Chart",
    _sql=[[
        WITH snap AS
         (SELECT /*+materialize no_expand*/
                trunc(end_interval_time + 0, 'mi') end_time, instance_number inst_id, dbid,
                ((end_interval_time + 0) - lead(end_interval_time + 0) OVER(PARTITION BY instance_number, startup_time ORDER BY snap_id desc)) * 86400 Slot_size,
                CASE WHEN end_interval_time+0 between NVL(to_date(:V3,'yymmddhh24miss'),sysdate-7) AND NVL(to_date(:V4,'yymmddhh24miss'),sysdate) THEN 0 END flag, 
                snap_id, instance_number, -9e8 * (startup_time + 0 - SYSDATE) + instance_number part_key
          FROM   dba_hist_snapshot
          WHERE  end_interval_time+0 between NVL(to_date(:V3,'yymmddhh24miss'),sysdate-7)-1.2/24 AND NVL(to_date(:V4,'yymmddhh24miss'),sysdate)
          AND    (:V2 IS NULL OR lower(:V2) IN ('0', 'a') OR instance_number = :V2))    
        SELECT to_char(MAX(end_time), 'YYYY-MM-DD HH24:MI') sample_time, event,
               Round(SUM(RMB+WMB/Slot_size*1024*1024),2)  "Bytes per Second",
               Round(SUM(RREQ+WREQ/Slot_size),2) "Requests per Second",
               nvl(Round(SUM((RMB+WMB)*1024*1024/nullif(RREQ+WREQ,0)),2),0) "Bytes per Request",
               Round(SUM(WAIT_TIME/slot_size*1e-3),2) "Wait Seconds per Second",
               Round(sum(WAIT_TIME)/sum(WAITS),2) "AVG Milliseconds per Request",
               Round(SUM(RMB/Slot_size*1024*1024),2)  "Read Bytes per Second",
               Round(SUM(WMB/Slot_size*1024*1024),2)  "Write Bytes per Second",
               Round(SUM(RREQ/Slot_size),2) "Read Requests per Second",
               Round(SUM(WREQ/Slot_size),2) "Write Requests per Second"
        FROM  (SELECT /*+merge*/
                       A.*,
                       GROUP_BY || decode(nvl(lower(:V2), 'a'), 'a', NULL, ' #' || inst_id) event
               FROM   (SELECT /*+merge no_expand ordered_predicates*/
                              inst_id,end_time,flag,Slot_size,
                              CASE WHEN :V1 IS NOT NULL then FILETYPE_NAME ELSE &GRP END GROUP_BY,
                              SMALL_READ_MEGABYTES + LARGE_READ_MEGABYTES - nvl(LAG(SMALL_READ_MEGABYTES + LARGE_READ_MEGABYTES) OVER(PARTITION BY part_key, FUNCTION_ID, FILETYPE_ID ORDER BY snap_id),0) rmb,
                              SMALL_WRITE_MEGABYTES + LARGE_WRITE_MEGABYTES - nvl(LAG(SMALL_WRITE_MEGABYTES + LARGE_WRITE_MEGABYTES) OVER(PARTITION BY part_key, FUNCTION_ID, FILETYPE_ID ORDER BY snap_id),0) wmb,
                              SMALL_READ_REQS+LARGE_READ_REQS-nvl(LAG(SMALL_READ_REQS+LARGE_READ_REQS) OVER(PARTITION BY part_key, FUNCTION_ID, FILETYPE_ID ORDER BY snap_id),0) RREQ,
                              SMALL_WRITE_REQS+LARGE_WRITE_REQS-nvl(LAG(SMALL_WRITE_REQS+LARGE_WRITE_REQS) OVER(PARTITION BY part_key, FUNCTION_ID, FILETYPE_ID ORDER BY snap_id),0) WREQ,
                              WAIT_TIME-nvl(LAG(WAIT_TIME) OVER(PARTITION BY part_key, FUNCTION_ID, FILETYPE_ID ORDER BY snap_id),0) WAIT_TIME,
                              NUMBER_OF_WAITS-nvl(LAG(NUMBER_OF_WAITS) OVER(PARTITION BY part_key, FUNCTION_ID, FILETYPE_ID ORDER BY snap_id),0) WAITS
                       FROM   DBA_HIST_IOSTAT_DETAIL NATURAL JOIN snap
                       WHERE  (&filter)
                       AND    (:V1 is null or upper(FUNCTION_NAME)=upper(:V1) or upper(FILETYPE_NAME)=upper(:V1))) a
               where WAIT_TIME>0 and flag=0)
         GROUP  BY event, end_time]],
    _pivot=true,
    labelsKMG2=true,
    height=400,
}