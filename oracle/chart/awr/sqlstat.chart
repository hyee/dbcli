/*[[
    Show chart for dba_hist_sqlstat. Usage: @@NAME {[0|inst_id] [yymmddhh24mi] [yymmddhh24mi]} [-time|-io|-exec] [-u|-f"<filter>"]
    Impacted by settings: starttime,endtime,instance
    -time      : Show the report related to time cost, this is the default option
    -io        : Show the report related to IO cost
    -exec      : Show the report related to execution count
    -u         : Only show the report whose executor is current_schema
    -s"<name>" : Only show the report whose executor is <name>
    --[[
        &V1     : default={&INSTANCE}
        &V2     : default={&STARTTIME}
        &V3     : default={&ENDTIME}
        &GRP    : {
            time={ela "Elapsed Time",cpu "CPU Time",io "IO Time",ap "Application Time",cc "Concurrency Time",cl "Cluster Time",pl "PL/SQL Exec Time",java "Java Exec Time"},
            io={phr "Physical Reads",phw "Physical writes",buff "Logical Reads" &VER,opr "Optimized Physical Reads", clr "Cluster Communication",iooff "I/O Offload",cuzip "Cell Un-Compressed"},
            exec={exec "Executions",parses "Parse Calls",loads "Loads",pxe "PX Executions"}
        }
        &LABEL  : time={Seconds per Second}, io={Bytes per Second}, exec={Count per Second}
        &FILTER : default={1=1}, u={PARSING_SCHEMA_NAME=nvl('&0',sys_context('userenv','current_schema'))},s={PARSING_SCHEMA_NAME='&0'}, f={}
        @VER    : 11.2={}, default={--}
    --]]
]]*/
{
    title='System SQL Stats Chart',
    _attrs=[[select '&LABEL' ylabel from dual]],
    _sql=[[
        WITH snap AS(
        SELECT a.*,
               MAX(snap_id) over(PARTITION BY pkey ORDER BY etime RANGE BETWEEN UNBOUNDED PRECEDING AND diff PRECEDING) min_snap,
               round(86400*(etime-LAG(etime,1,stime) OVER(PARTITION BY pkey ORDER BY snap_id))) secs
        FROM   (SELECT /*+no_merge no_expand no_or_expand opt_param('container_data' 'current_dictionary')*/ 
                       snap_id,
                       dbid,
                       instance_number,
                       instance_number inst_id,
                       begin_interval_time+0 btime,
                       end_interval_time+0 etime,
                       startup_time+0 stime,
                       (dbid+to_char(startup_time,'yymmddhh24mi'))*1e3+instance_number pkey,
                       (end_interval_time+0) - GREATEST(startup_time+0, MIN(end_interval_time+0) over(PARTITION BY dbid, instance_number,startup_time)) diff
                FROM   dba_hist_snapshot
                WHERE  dbid=:dbid
                 AND   end_interval_time+0 BETWEEN 
                       NVL(to_date(:V2,'yymmddhh24miss'),sysdate-7) AND 
                       NVL(to_date(:V3,'yymmddhh24miss'),sysdate+1)
                 AND  (:V1 IS NULL OR lower(:V1) IN ('0', 'a') OR instance_number = :V1)) a)
        SELECT etime sample_time,inst,&GRP
        FROM (
            SELECT etime,
                   inst,
                   round(sum(ela),2) ela ,
                   round(sum(cpu),2) cpu,
                   round(sum(io),2) io,
                   round(sum(ap),2) ap ,
                   round(sum(cc),2) cc ,
                   round(sum(cl),2) cl ,
                   round(sum(pl),2) pl,
                   round(sum(java),2) java,
                   round(sum(phr),2) phr,
                   round(sum(phw),2) phw,
                   round(sum(buff),2) buff,
                   &VER round(sum(opr),2) opr,
                   &VER round(sum(clr),2) clr,
                   &VER round(sum(cuzip),2) cuzip,
                   &VER round(sum(iooff),2) iooff,
                   round(sum(exec),2) exec,
                   round(sum(pxe),2) pxe,
                   round(sum(parses),2) parses,
                   round(sum(loads),2) loads
            FROM   (SELECT /*+merge no_expand*/
                          inst_id,etime,secs,
                          decode(nvl(lower(:V1), 'a'), 'a', '', ' #' || inst_id) inst,
                          ELAPSED_TIME_DELTA*1e-6/secs ela,
                          IOWAIT_DELTA*1e-6/secs io,
                          APWAIT_DELTA*1e-6/secs ap,
                          CCWAIT_DELTA*1e-6/secs cc,
                          CLWAIT_DELTA*1e-6/secs cl,
                          PLSEXEC_TIME_DELTA*1e-6/secs pl,
                          JAVEXEC_TIME_DELTA*1e-6/secs java,
                          CPU_TIME_DELTA*1e-6/secs cpu,
                          block_size*(DISK_READS_DELTA)/secs phr,
                          block_size*DIRECT_WRITES_DELTA/secs phw,
                          block_size*BUFFER_GETS_DELTA/secs buff,
                          &VER  block_size*OPTIMIZED_PHYSICAL_READS_DELTA opr,
                          &VER IO_INTERCONNECT_BYTES_DELTA/secs clr,
                          &VER CELL_UNCOMPRESSED_BYTES_DELTA/secs cuzip,
                          &VER IO_OFFLOAD_RETURN_BYTES_DELTA/secs iooff,
                          EXECUTIONS_DELTA/secs exec,
                          PX_SERVERS_EXECS_DELTA/secs pxe,
                          PARSE_CALLS_DELTA/secs parses,
                          LOADS_DELTA/secs loads
                   FROM   DBA_HIST_SQLSTAT 
                   JOIN   snap a USING(snap_id,dbid,instance_number),
                          (select /*+no_merge*/ value block_size from v$parameter where name='db_block_size') c
                   WHERE  dbid=:dbid AND (&FILTER)) a
            group by etime,inst
        )
        ORDER  BY 1]],
    _pivot="mixed",
    _sorter=2,
    labelsKMB=true,
}