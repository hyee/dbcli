/*[[Show chart for gv$sysmetric_history/dba_hist_sysmetric_summary. Usage: @@NAME <metric_name|metric_group_name> {[0|inst_id] [yymmddhh24mi] [yymmddhh24mi]} [-d|-h] [-eff] [-max]
    -d    : Based on DBA_HIST_SYSMETRIC_SUMMARY
    -h    : Based on DBA_HIST_SYSMETRIC_HISTORY
    -eff  : Show metrics related to DB efficiency
    -iops : Show TPS/IOPS(read)/IOPS(write)
    -time : Show CPU/DB usage(in centiseconds)
    -ratio: Show metrics based on percentage
    -max  : Use max value across all instances, default as avg value
    --[[
      &V2   : default={&INSTANCE}
      &V3   : default={&STARTTIME}
      &V4   : default={&ENDTIME}
      @BASE : 10.2={}
      &DICT : V={V}, D={D} H={H}
      &TITLE: V={GV$SYSMETRIC_HISTORY}, D={DBA_HIST_SYSMETRIC_SUMMARY}
      &CAT  : {
            default={1=1},
            iops={METRIC_NAME in ('User Transaction Per Sec','Physical Read Total IO Requests Per Sec',
                                 'Physical Write Total IO Requests Per Sec')},
            time={metric_unit='CentiSeconds Per Second'},
            ratio={METRIC_NAME like '%Ratio' and METRIC_NAME not like '% Miss %'},
            eff={METRIC_NAME in ('Host CPU Utilization (%)','Database CPU Time Ratio',
                                 'Database Wait Time Ratio','Executions Per Sec',
                                 'Redo Generated Per Sec','User Calls Per Sec','Logons Per Sec','DB Block Changes Per Sec','Logical Reads Per Sec',
                                 'Total Parse Count Per Sec','Hard Parse Count Per Sec','User Transaction Per Sec',
                                 'SQL Service Response Time','Physical Read Total Bytes Per Sec','Physical Write Total Bytes Per Sec')}
        }
      &UNIT : default={Value},time={CentiSeconds},Ratio={Ratio(%)},iops={Count}
      &AGG  : default={avg} ,max={max}
      &VAL  : default={AVERAGE}, max={maxval}
    ]]--
]]*/

   {
       _attrs=[[select 'System Metric History(&TITLE)' title,'&UNIT' ylabel from dual]],
       _sql=[[
        SELECT sample_time, 
               REPLACE(METRIC_NAME, ' Per ', '/') metric_name,
               VALUE metric_value,
               STD RNK_
        FROM   (SELECT /*+merge no_expand*/
                        A.end_time sample_time, A.METRIC_NAME , A.metric_unit, ROUND(&AGG(VALUE),3) VALUE,STDDEV(&AGG(VALUE)) OVER(PARTITION BY A.METRIC_NAME) std
                FROM   (SELECT inst_id, end_time, metric_unit,group_id, VALUE,
                              METRIC_NAME||(case when lower(metric_unit)='bytes' and instr(lower(METRIC_NAME),'bytes')=0 then '(bytes)' end)||decode(nvl(lower(:V2), 'a'), 'a', NULL, ' #' || inst_id) METRIC_NAME
                        FROM  (SELECT inst_id, round(END_TIME,'MI') end_time, METRIC_NAME, metric_unit,group_id, VALUE
                              FROM   GV$SYSMETRIC_HISTORY
                              WHERE  'V' = UPPER(:DICT)
                              UNION ALL
                              SELECT INSTANCE_NUMBER, ROUND(max(END_TIME) OVER(partition by dbid,snap_id),'MI'), METRIC_NAME, metric_unit,group_id,&VAL
                              FROM   DBA_HIST_SYSMETRIC_SUMMARY
                              WHERE  'D' = UPPER(:DICT)
                              UNION ALL
                              SELECT INSTANCE_NUMBER, ROUND(max(END_TIME) OVER(partition by dbid,snap_id),'MI'), METRIC_NAME, metric_unit,group_id,VALUE
                              FROM   DBA_HIST_SYSMETRIC_HISTORY
                              WHERE  'H' = UPPER(:DICT)) A 
                              JOIN (SELECT distinct group_id,group_name FROM V$METRICNAME) b USING(group_id)
                        WHERE  (:V2 IS NULL  OR lower(:V2) IN ('0', 'a') OR inst_id = :V2)
                        AND    group_id NOT IN(3,5,10)
                        AND    (:V1 IS NULL AND &CAT OR :V1 IS NOT NULL AND (UPPER(METRIC_NAME) LIKE UPPER('%&V1%') OR upper(B.GROUP_NAME)=upper(:V1)))
                        AND    end_time between nvl(to_date(:V3,'yymmddhh24mi'),sysdate-7) and nvl(to_date(:V4,'yymmddhh24mi'),sysdate+1)) A
                 GROUP  BY a.end_time, A.METRIC_NAME, a.metric_unit
                 ORDER BY STD DESC)
        ]],
       _pivot=true,
       labelsKMB=true,
       deviation=true,
   }