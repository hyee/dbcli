/*[[
    Show chart for dba_hist_system_event. Usage: @@NAME {[<event_id>|<event_abbr>|"<event_name>"|"<wait_class>"] [0|inst_id] [yymmddhh24mi] [yymmddhh24mi]} [-e] [-f"<filter>" [-f1"<filter>"]]
    Impacted by settings: starttime,endtime,instance
    inst_id: Default as all instances, other options are:
                0         - Separate all instances
                a         - Group all instances
                <inst_id> - Only the specific instance
    -f     : User-defined filter. For example, -f"wait_class in('User I/O','System I/O')"
    -e     : Group by event name, default is wait class.
    Examples:   
      1) @@NAME: show all events group by wait_class within current instance
      2) @@NAME . 0: show all events group by wait_class,instance for all instances
      3) @@NAME "user i/o": show events belong to group "User I/O" group by event name
      4) @@NAME "db file sequential read" or awrevent dfsr: show the chart on "db file sequential read" event
      5) @@NAME "user i/o" a avg: show events belong to group "User I/O" group by event name based on avg time per request
    --[[
        &V2 : default={&INSTANCE}
        &V3 : default={&STARTTIME}
        &V4 : default={&ENDTIME}
        &f0 : default={0},f={}
        &f1 : default={:V1 IS NULL OR LOWER(:V1) IN (lower(wait_class),abbr,LOWER(event_id)) OR lower(event_name) LIKE lower('%&V1%')}, f={}
        &grp: default={wait_class}, e={event_name}
        &ADDITIONAL_FILTER: default={1=1}, f1={}
    --]]
]]*/
{
    _attrs=[[
        SELECT a.*,'System Wait Event ('||filter||')' title
        FROM (     
            SELECT decode(q'[&F0]','0',NVL2(:V1,FIELD_NAME || ' = ''' || FIELD_VALUE||'''','Wait_Class != ''Idle'''),q'[&F0]') filter,
                   case when q'[&F0]'='0' then nvl2(:V1,'event_name','&grp') when lower(q'[&F0]') not like '%event_name%' then 'wait_class' else 'event_name' end group_by
            FROM   (SELECT CASE WHEN lower(wait_class) = LOWER(:V1) OR :V1 IS NULL THEN 'Wait_Class' ELSE 'Event_name' END FIELD_NAME,
                           CASE WHEN lower(wait_class) = LOWER(:V1) OR :V1 IS NULL THEN wait_class ELSE event_name END FIELD_VALUE
                     FROM  (select /*+merge*/ s.*,
                                   name event_name,
                                   lower(LOWER(regexp_replace(NAME || ' ', '(\w)[^ ]* ', '\1'))) abbr
                            from v$event_name s)
                     WHERE  ROWNUM < 2 and (&F1))) a]],
    _sql=[[
        WITH snap AS(
            SELECT a.*,
                   MAX(snap_id) over(PARTITION BY pkey ORDER BY etime RANGE BETWEEN UNBOUNDED PRECEDING AND diff PRECEDING) min_snap,
                   round(86400*(etime-LAG(etime,1,stime) OVER(PARTITION BY pkey ORDER BY snap_id))) secs
            FROM   (SELECT /*+no_merge no_expand no_or_expand*/ 
                           snap_id,
                           dbid,
                           instance_number,
                           instance_number inst_id,
                           begin_interval_time+0 btime,
                           MAX(end_interval_time+0) OVER(PARTITION BY snap_id) etime,
                           startup_time+0 stime,
                           (dbid+to_char(startup_time,'yymmddhh24mi'))*1e3+instance_number pkey,
                           (end_interval_time+0) - GREATEST(startup_time+0, MIN(end_interval_time+0) over(PARTITION BY dbid, instance_number,startup_time)) diff
                    FROM   dba_hist_snapshot
                    WHERE  dbid=&dbid
                     AND   end_interval_time+0 BETWEEN 
                           NVL(to_date(:V3,'yymmddhh24miss'),sysdate-7) AND 
                           NVL(to_date(:V4,'yymmddhh24miss'),sysdate+1)
                     AND  (:V2 IS NULL OR lower(:V2) IN ('0', 'a') OR instance_number = :V2)) a)
        SELECT time sample_time,event,
               round(total_time*1e-6,1) "Seconds per Second",
               round(count,3) "Requests per Second",
               round(total_time/count/1000,2) "Milliseconds per Request",
               sum(total_time) over(partition by event) RNK_
        FROM   (SELECT to_char(etime, 'YYYY-MM-DD HH24:MI') TIME, event,
                       SUM(v1) total_time,
                       SUM(v2) count
                FROM  (SELECT /*+merge*/
                               A.*,
                               &group_by || decode(nvl(lower(:V2), 'a'), 'a', NULL, ' #' || inst_id) event,
                               TIME_WAITED/secs v1, TOTAL_WAITS/secs v2
                       FROM   (SELECT /*+merge no_expand ordered_predicates*/
                                      inst_id,etime,secs,wait_class,event_name,
                                      TIME_WAITED_MICRO-nvl(LAG(TIME_WAITED_MICRO) OVER(PARTITION BY event_name,pkey ORDER BY snap_id),0) TIME_WAITED,
                                      TOTAL_WAITS-nvl(LAG(TOTAL_WAITS) OVER(PARTITION BY event_name,pkey ORDER BY snap_id),0) TOTAL_WAITS
                               FROM   DBA_HIST_SYSTEM_EVENT NATURAL JOIN snap
                               WHERE  DBID=&dbid AND (&filter) AND (&ADDITIONAL_FILTER)) a)
                 WHERE nvl(v1,0)>0
                 GROUP  BY event, etime
                 HAVING SUM(v2) > 0)
        ORDER  BY 1]],
    _pivot=true,
    labelsKMB=true,
    height=400,
}