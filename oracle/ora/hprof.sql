/*[[
    Show the data that generated by dbms_hprof. Usage: @@NAME {[<runid>] [<sort_by>]}|{<Dir> <File> [PLSQL_BLOCK]}
    
    Install:
        11g: @?/rdbms/admin/dbmshptab.sql
        18c: EXEC DBMS_HPROF.create_tables(force_it => TRUE);

    Example:
        @@NAME DATA_PUMP_DIR 1.txt "dbms_lock.sleep(10);dbms_session.sleep(10)"
    --[[
        @CHECK_ACCESS: dba_source={DBA_SOURCE}, all_source={ALL_SOURCE}
        @CHECK_ACCESS2: SYS.DBMS_HPROF/DBMSHP_RUNS={}
    --]]
]]*/
set feed off verify off printsize 1000
VAR cur REFCURSOR
VAR html CLOB
VAR filename VARCHAR2(100)
ora _find_object "&V1" 1
col subtree_time,func_time for usmhd2

DECLARE
    run_id     INT;
    dir        VARCHAR2(128) := :V1;
    file       VARCHAR2(100) := :V2;
    output     CLOB;
    trace_file BFILE;
    pos        INT := 1;
    startpos   PLS_INTEGER := 1;
    lang_ctx   PLS_INTEGER := 0;
    csid       PLS_INTEGER := 0;
    warn       PLS_INTEGER := 0;
BEGIN
    IF dir IS NULL THEN
        OPEN :cur FOR
            SELECT * FROM DBMSHP_RUNS ORDER BY RUN_TIMESTAMP DESC;
    ELSE
        IF regexp_like(dir, '^\d+$') THEN
            run_id := dir;
        ELSE
            dir := :OBJECT_NAME;
            IF file IS NULL THEN
                raise_application_error(-20001, 'Usage: ora hprof <Directory Name> <File Name> [PLSQL_BLOCK].');
            ELSIF USER != nvl(:OBJECT_OWNER, '_') THEN
                SELECT COUNT(1)
                INTO   run_id
                FROM   table_privileges
                WHERE  owner = :OBJECT_OWNER
                AND    table_name = dir;
            
                IF run_id = 0 THEN
                    raise_application_error(-20001,'Directory ' || dir ||' does not exist or you don''t have its access right.');
                END IF;
            END IF;
        
            IF :V3 IS NOT NULL THEN
                BEGIN
                    SYS.DBMS_HPROF.start_profiling(location => dir, filename => file);
                EXCEPTION WHEN OTHERS THEN
                    raise_application_error(-20001,'Error on executing "SYS.DBMS_HPROF.start_profiling" on directory "'||dir||'": '||sqlerrm);
                END;
                BEGIN
                    EXECUTE IMMEDIATE 'BEGIN ' || regexp_replace(:V3, ';\s*$') || ';END;';
                EXCEPTION WHEN OTHERS THEN
                    SYS.DBMS_HPROF.stop_profiling;
                    RAISE;
                END;
                SYS.DBMS_HPROF.stop_profiling;
            END IF;

            BEGIN
                trace_file := bfilename(dir, file);
                dbms_lob.fileopen(trace_file);
            EXCEPTION WHEN OTHERS THEN
                raise_application_error(-20001, 'File ' || file || ' under directory ' || dir || ' does not exist!');
            END;
        
            run_id := dbms_lob.getlength(trace_file);
            IF run_id = 0 THEN
                raise_application_error(-20001, 'Cannot read file ' || file || ' under directory ' || dir || '.');
            END IF;
            /*IF DBMS_DB_VERSION.VERSION < 12 THEN
                dbms_lob.createtemporary(output, TRUE);
                dbms_lob.loadclobfromfile(output, trace_file, DBMS_LOB.LOBMAXSIZE, startpos, pos, csid, lang_ctx, warn);
            END IF;*/
            dbms_lob.fileclose(trace_file);

            run_id := SYS.DBMS_HPROF.analyze(location => dir, filename => file);
            $IF DBMS_DB_VERSION.VERSION > 11 $THEN
                SYS.DBMS_HPROF.analyze(location => dir, filename => file, report_clob => output);
                file := NULL;
            $END

            :html     := output;
            :filename := nvl(file, 'plshprof_' || run_id || '.html');
            dbms_output.put_line('Runid is ' || run_id ||', file size is '||length(output)||' bytes.');
        END IF;

        OPEN :cur FOR
            WITH SRC AS
             (SELECT /*+MATERIALIZE no_merge(u) opt_param('cursor_sharing' 'force')*/
                    U.*, EXTRACTVALUE(b.COLUMN_VALUE,'//TEXT') text
              FROM  (SELECT * FROM dbmshp_function_info WHERE RUNID = run_id) u,
                    TABLE(XMLSEQUENCE(EXTRACT(dbms_xmlgen.getxmltype(
                       q'[SELECT regexp_substr(ltrim(TEXT,chr(9)||' '),'[^'||chr(10)||']+') text
                          FROM &CHECK_ACCESS
                          WHERE OWNER=']' ||owner || 
                          ''' AND line=''' || LINE# || 
                          ''' AND NAME=''' || MODULE || 
                          ''' AND TYPE=''' || replace(type,' SPEC') ||''''),'//ROW')))(+) B),
            hier AS(
                SELECT RPAD(' ', (LEVEL - 1) * 2, ' ') || name AS HNAME,a.*,
                       (SELECT MAX(subtree_elapsed_time) from dbmshp_parent_child_info WHERE RUNID = run_id) max_time
                FROM   (SELECT fi.symbolid,
                               pci.parentsymid,
                               TRIM('.' from fi.owner || '.' || fi.module || '.' || NULLIF(fi.function, fi.module)) ||
                               decode(line#, 0, '', ' (Line #' || line# || ')') AS NAME,
                               SQL_ID,
                               nvl(SQL_TEXT,TEXT) text,
                               NVL(pci.subtree_elapsed_time, fi.subtree_elapsed_time) AS subtree_time,
                               NVL(pci.function_elapsed_time, fi.function_elapsed_time) AS func_time,
                               NVL(pci.calls, fi.calls) AS calls
                        FROM   src fi
                        LEFT   JOIN dbmshp_parent_child_info pci
                        ON     fi.runid = pci.runid
                        AND    fi.symbolid = pci.childsymid) a
                CONNECT BY a.parentsymid = PRIOR a.symbolid
                START  WITH a.parentsymid IS NULL
                ORDER  SIBLINGS BY subtree_time DESC)
            SELECT hname function_name,
                   subtree_time,
                   to_char(100*subtree_time/max_time,'990.00')||'%' "Subtree(%)",
                   func_time,
                   to_char(100*func_time/max_time,'990.00')||'%' "Func(%)",
                   calls,SQL_ID,'|' "|",TEXT
            FROM   (select a.*,rownum r from hier a)
            WHERE  greatest(subtree_time,func_time)*10000/max_time>=1
            ORDER  BY r;
    END IF;
END;
/
print cur
save html filename
    