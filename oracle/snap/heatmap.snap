/*[[
    Generate delta values based on gv$event_histogram. Usage: @@NAME <options> [0|inst_id] [-lgwr|-io|-gc|-w"<event|wait_class>"|-f"<filter>"] [-c|-n]
    
    inst_id : The instance id,when 0 then the result will be grouped by instance. Defaults to sum all instances. 
    -lgwr   : show only the events relative to LGWR
    -io     : show only the events belong to User/System I/O
    -gc     : show only the events belong to Cluster waits
    -w      : show only the events belong to specific event/wait class
    -c      : the percentages of the histogram is based on wait count, instead of wait time
    -n      : the value of the histogram is the number of waits, instead of percentage

                  EVENT                 TIME    WAITS   AVG_TIME| <1us  <2us  <4us  <8us   <16us <32us  <64us <128us <256us <512us  <1ms   <2ms <4ms <16ms <32ms <64ms
     -------------------------------- -------- -------- --------+----- ----- ----- ------ ------ ----- ------ ------ ------ ------ ------ ----- ---- ----- ----- -----
     - Wait Class: All                173.04ms 1,363.79 126.88us| 0.05  0.47  5.27  32.33  22.55  9.44   4.51   4.63   5.34   6.70   4.63  3.13 0.04  0.01  0.83  0.03
     - Wait Class: Other              168.05ms 1,334.77 125.90us| 0.04  0.42  5.38  33.26  23.12  9.44   4.41   4.61   5.12   5.30   4.72  3.23 0.04  0.01  0.86  0.03
     - Wait Class: System I/O           2.84ms    14.28 198.53us|                    1.17   8.25 12.22   3.06         21.39  52.87   1.06
     - Wait Class: User I/O             1.94ms     5.20 373.20us|                                        2.24          1.94  89.93   5.90
     - Wait Class: Application          6.57us     0.12  54.75us|            27.48                             72.52
     - Wait Class: Network                         4.42         | 0.38  0.76  3.39               19.34  39.76  36.33
     - Wait Class: Concurrency                     5.01         | 5.61 31.78 21.93  36.09   2.16  2.59
     RMA: IPC0 completion sync         68.42ms     3.52  19.44ms|                           1.43                                                           98.55
     latch free                        46.68ms    37.51   1.24ms|                                               0.45   2.77   7.69  37.04 51.32 0.73
     enq: PS - contention              15.03ms    39.30 382.44us|                                               1.63  27.72  45.58  25.07
     PX Deq: Join ACK                   7.76ms    50.59 153.44us| 0.02  1.01  2.70   0.67   0.46  1.83  19.02  20.64  32.01  14.04   7.05  0.55
     PX Deq: reap credit                7.45ms   881.44   8.45us|       0.31  7.00  42.73  34.42 12.90   2.58   0.06
     PX Deq: Slave Session Stats        5.27ms    36.80 143.10us| 0.26  3.38  4.43   3.94   1.76  1.41   5.25  14.44  37.56  24.38   2.06  1.12
     Sync ASM rebalance                 4.53ms     0.42  10.79ms|                   12.57   7.59                      13.87  15.71                   23.56       26.44
     ASM file metadata operation        3.03ms     3.94 769.35us|                                        8.61  67.51  17.42   3.53                                2.97
     IMR slave acknowledgement msg      2.66ms    12.36 214.84us|             0.63          0.27 16.82  13.70  19.47   6.19  19.05  23.86
     PX Deq: Slave Join Frag            2.43ms    36.79  65.92us| 0.95  1.65  0.07                1.42  34.06  56.87   4.46          0.52
     reliable message                   2.33ms     4.60 506.73us|                                                            60.00  38.51  1.51
     control file sequential read       2.33ms    13.08 177.96us|                    1.30   9.15 13.56   3.39         23.71  48.92
     Disk file Mirror Read              1.93ms     5.01 384.59us|                                                      1.96  92.00   6.03
     IPC send completion sync         545.66us    86.36   6.32us|             7.89  70.91  13.32  7.64   0.23
     control file parallel write      507.26us     1.19 426.27us|                                                            89.06  10.94
  --[[
      @tab: 12.1={gv$event_histogram_micro} 11.1={gv$event_histogram}
      @micro: 12.1={wait_time_micro} 11.1={wait_time_milli*1024}
      @flds : 12.1={} default={--}
      &u : t={log(2,slot_time*2)} c={1}
      &calc: default={[total]} n={100}
      &filter: {
          all={1=1}
          lgwr={event IN ('log file sync',
                         'log file parallel write',
                         'LGWR any worker group',
                         'LGWR all worker groups',
                         'LGWR wait for redo copy',
                         'LGWR worker group ordering',
                         'latch: redo allocation',
                         'latch: redo writing',
                         'ASM IO for non-blocking poll',
                         'gcs log flush sync',
                         'log switch/archive',
                         'log file switch completion',
                         'log file switch (checkpoint incomplete)',
                         'log file switch (private strand flush incomplete)')},
          io={(wait_class in('System I/O','User I/O') or event like 'cell%')},
          gc={wait_class='Cluster' or event like 'gc%'},
          w={lower('&0') in (lower(event),lower(wait_class))},
          f={}
      }
      &showzero: default={false},lgwr={true},io={true},gc={true},w={true},f={true}
      }
  --]]
]]*/
{
    sql=[[
        SELECT /*grid={topic='Event Histogram(based on wait_count*&u)',autosize='trim',zero2null=true}*/ *
        FROM   (SELECT /*+ordered use_nl(timer stat) no_merge(stat) no_expand*/
                       nullif(inst,0) inst,nvl(event,'- Wait Class: '||nvl(wait_class,'All')) event,
                       grouping_id(wait_class,event) g,
                       CASE
                           WHEN slot_time <= 512 THEN
                            '<' || slot_time || 'us'
                           WHEN slot_time <= 524288 THEN
                            '<' || round(slot_time / 1024) || 'ms'
                           WHEN slot_time <= 33554432 THEN
                            '<' || round(slot_time / 1024 / 1024) || 's'
                           WHEN slot_time <= 67108864 THEN
                            '<' || round(slot_time / 1024 / 1024 / 64) || 'm'
                           ELSE
                            '>=1m'
                       END unit,
                       MAX(SUM(TIME_WAITED_MICRO)/1E3) over(PARTITION BY inst,wait_class,event) Time,
                       MAX(SUM(TIME_WAITED_MICRO)/1E3) over() "Time%",
                       MAX(SUM(total_waits)) over(PARTITION BY inst,wait_class,event) Waits,
                       0 avg_time,
                       '|' "|",
                       SUM(SUM(svalue*&u)) OVER(partition by inst,wait_class,event) total,
                       nullif(SUM(svalue*&u), 0) pct
                FROM   (
                          SELECT /*+ordered use_hash(a b)*/
                                 decode(lower(nvl('&v1','a')),'a',0,inst_id)  inst,
                                 trim(substr(event,1,40)) event, a.total_waits, a.time_waited_micro, b.&micro slot_time, b.wait_count svalue,
                                 a.wait_class
                          FROM   gv$system_event a
                          JOIN   &tab b
                          USING  (inst_id,event)
                          WHERE  a.wait_class != 'Idle'
                          AND    lower(nvl('&v1','a')) in('a','0',to_char(inst_id))
                          AND    (&filter)) stat
                GROUP  BY inst,rollup(wait_class,event),
                          CASE
                              WHEN slot_time <= 512 THEN
                               '<' || slot_time || 'us'
                              WHEN slot_time <= 524288 THEN
                               '<' || round(slot_time / 1024) || 'ms'
                              WHEN slot_time <= 33554432 THEN
                               '<' || round(slot_time / 1024 / 1024) || 's'
                              WHEN slot_time <= 67108864 THEN
                               '<' || round(slot_time / 1024 / 1024 / 64) || 'm'
                              ELSE
                               '>=1m'
                          END
                HAVING (:filter!='1=1' OR SUM(total_waits)>0)
                )
        PIVOT(MAX(pct)
        FOR    unit IN(
                       '<1us' "<1us",'<2us' "<2us",'<4us' "<4us",'<8us' "<8us",'<16us' "<16us",'<32us' "<32us",'<64us' "<64us",'<128us' "<128us",'<256us' "<256us",'<512us' "<512us",
                       '<1ms' "<1ms",
                       '<2ms' "<2ms",
                       '<4ms' "<4ms",
                       '<8ms' "<8ms",
                       '<16ms' "<16ms",
                       '<32ms' "<32ms",
                       '<64ms' "<64ms",
                       '<128ms' "<128ms",
                       '<256ms' "<256ms",
                       '<512ms' "<512ms",
                       '<1s' "<1s",
                       '<2s' "<2s",
                       '<4s' "<4s",
                       '<8s' "<8s",
                       '<16s' "<16s",
                       '<32s' "<32s",
                       '<1m' "<1m",
                       '>=1m' ">1m"))
    ]],
    delta_by="TIME,Time%,AVG_TIME,WAITS,TOTAL,<1us,<2us,<4us,<8us,<16us,<32us,<64us,<128us,<256us,<512us,<1ms,<2ms,<4ms,<8ms,<16ms,<32ms,<64ms,<128ms,<256ms,<512ms,<1s,<2s,<4s,<8s,<16s,<32s,<1m,>1m",
    group_by="inst,event,g",
    include_zero=&showzero,
    fixed_title=true,
    order_by="-g,-time",
    column_formatter={
        noprint='total,g',
        MSMHD2="time",
        USMHD2='avg_time',
        ['%.1f%%']='Time%',
        k='WAITS,<1us,<2us,<4us,<8us,<16us,<32us,<64us,<128us,<256us,<512us,<1ms,<2ms,<4ms,<8ms,<16ms,<32ms,<64ms,<128ms,<256ms,<512ms,<1s,<2s,<4s,<8s,<16s,<32s,<1m,>1m'
    },
    calc_rules={
        avg_time='[Time]/[waits]*1E3',
        ["Time%"]="100*[Time]/[Time%]",
        ["<1us"]="100*[<1us]/&calc",
        ["<2us"]="100*[<2us]/&calc",
        ["<4us"]="100*[<4us]/&calc",
        ["<8us"]="100*[<8us]/&calc",
        ["<16us"]="100*[<16us]/&calc",
        ["<32us"]="100*[<32us]/&calc",
        ["<64us"]="100*[<64us]/&calc",
        ["<128us"]="100*[<128us]/&calc",
        ["<256us"]="100*[<256us]/&calc",
        ["<512us"]="100*[<512us]/&calc",
        ["<1ms"]="100*[<1ms]/&calc",
        ["<2ms"]="100*[<2ms]/&calc",
        ["<4ms"]="100*[<4ms]/&calc",
        ["<8ms"]="100*[<8ms]/&calc",
        ["<16ms"]="100*[<16ms]/&calc",
        ["<32ms"]="100*[<32ms]/&calc",
        ["<64ms"]="100*[<64ms]/&calc",
        ["<128ms"]="100*[<128ms]/&calc",
        ["<256ms"]="100*[<256ms]/&calc",
        ["<512ms"]="100*[<512ms]/&calc",
        ["<1s"]="100*[<1s]/&calc",
        ["<2s"]="100*[<2s]/&calc",
        ["<4s"]="100*[<4s]/&calc",
        ["<8s"]="100*[<8s]/&calc",
        ["<16s"]="100*[<16s]/&calc",
        ["<32s"]="100*[<32s]/&calc",
        ["<1m"]="100*[<1m]/&calc",
        [">1m"]="100*[>1m]/&calc"
    }
}