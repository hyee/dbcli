/*[[Show System statistics summary. Usage: @@NAME <options> {[<inst_id>] [<keyword>|-im]} [-iostat|-latch] [-filestat|-dlm] [-f"<event_filter>"]
    
Options:
    <inst_id>     : Specify the instance number, default to aggregrate all instances' stats. When '0' means don't aggregrate across all instances
    <keyword>     : The keyword to filter gv$sysstat
    <event_filter>: The predicate to filter gv$system_event
    -latch        : Show latch stats instead of active sessions
    -iostat       : Show I/O stats instead of active sessions
    -im           : Only list the system global stats relative to In-Memory
    -filestat     : Show Tablespace and file stats instead of system global stats
    -dlm          : Show info of gv$dlm_misc instead of system global stats
Examples:
     @@NAME  10           : takes 2 snapshots within 10 seconds and report the delta stats
     @@NAME  10 . time    : takes 2 snapshots within 10 seconds and report the delta stats, as well as show the stats contain the word "time" 
     @@NAME  10 1         : takes 2 snapshots within 10 seconds and report the delta stats in instance#1
     @@NAME  10 1 -sec    : takes 2 snapshots within 10 seconds and report the delta stats in instance#1, of which the delta values are devided by 10
     @@NAME  15+ -top -sec: compute and print the stats in TOP mode with 15 seconds interval, of which the delta values are devided by 15 (same to alias "top")
     @@NAME  "select count(distinct column_name) from dba_Tab_cols" :  execute target SQL and compute the system delta stats

[| grid:{topic="Output fields(When execute with '-sec' then most all values are based on per second)"}
 | Field Name       | Source View                  | Description / Delta Value                                                                                          |
 | #                | gv$*                         | 'inst_id' or '*' for all instances                                                                                 |
 | Name             | gv$*                         | 'name' or 'stat_name'                                                                                              |
 | -                |-                             |-                                                                                                                   |
 | OS Time          | gv$session                   | MAX(logon_time) of each instance                                                                                   |
 | CPU & Load       | gv$osstat                    | NUM_CPU_SOCKETS/NUM_CPU_CORES/NUM_CPUS\|LOAD                                                                       |
 | PhyMem           | gv$osstat                    | PHYSICAL_MEMORY_BYTES                                                                                              |
 | -                |-                             |-                                                                                                                   |
 | Pct(Time Model)  | gv$sys_time_model            | 100*value/value['DB time'+'background elapsed time']                                                               |
 | -                |-                             |-                                                                                                                   |
 | Busy             | gv$osstat                    | 100*BUSY_TIME/(BUSY_TIME+IDLE_TIME)                                                                                |
 | User             | gv$osstat                    | 100*USER_TIME/(BUSY_TIME+IDLE_TIME)                                                                                |
 | Sys              | gv$osstat                    | 100*SYS_TIME /(BUSY_TIME+IDLE_TIME)                                                                                |
 | DB               | gv$osstat                    | 100*gv$sys_time_model.value['DB CPU'+'background cpu time'] / (BUSY_TIME+IDLE_TIME)                                |
 | FreeMem          | gv$osstat                    | FREE_MEMORY_BYTES                                                                                                  |
 | Swap             | gv$osstat                    | VM_IN_BYTES + VM_OUT_BYTES                                                                                         |
 | FreeMem          | gv$osstat                    | FREE_MEMORY_BYTES                                                                                                  |
 | -                |-                             |-                                                                                                                   |
 | IO Wait          | gv$system_event              | TIME_WAITED_MICRO/TOTAL_WAITS where WAIT_CLASS in('User I/O','System I/O')                                         |
 | IOPS             | gv$sysstat                   | Value['physical write total IO requests'+'physical read total IO requests']                                        |
 | TPS              | gv$sysstat                   | Value['user commits'+'user rollbacks']                                                                             |
 | Resp             | gv$sysstat                   | gv$sys_time_model.value['sql execute elapsed time'] / Value['user calls']                                          |
 | -                |-                             |-                                                                                                                   |
 | SQL_ID & SQL_TEXT| gv$sql                       | SQL_ID/SQL_TEXT where greatest(users_executing,users_opening) > 0 or last_active_time > :prev_snap_time            |
 | AAS              | gv$active_session_history    | COUNT(1) where SQL_ID=<SQL_ID> and sample_time > :prev_snap_time                                                   |
 | CPU              | gv$active_session_history    | COUNT('ON CPU') where SQL_ID=<SQL_ID> and sample_time > :prev_snap_time                                            |
 | -                |-                             |-                                                                                                                   |
 | Logon            | gv$sysstat                   | Value['user logons cumulative']                                                                                    |
 | Call             | gv$sysstat                   | Value['user calls']                                                                                                |
 | Exec             | gv$sysstat                   | Value['execute count']                                                                                             |
 | Parse            | gv$sysstat                   | Value['parse count (total)']                                                                                       |
 | Hard             | gv$sysstat                   | Value['parse count (hard)'] * 100 / Value['parse count (total)']                                                   |
 | Buffer           | gv$sysstat                   | Value['session logical reads'] * db_block_size                                                                     |
 | PhyRead          | gv$sysstat                   | Value['physical read total bytes']                                                                                 |
 | PhyWrite         | gv$sysstat                   | Value['physical write total bytes']                                                                                |
 | dxr              | gv$sysstat                   | 100 * Value['physical reads direct'] * db_block_size / <PhyRead>                                                   |
 | dxw              | gv$sysstat                   | 100 * Value['physical writes direct'] * db_block_size / <PhyWrite>                                                 |
 | dxscan           | gv$sysstat                   | 100 * Value['%scans (direct read)'] /  [fscan]                                                                     |
 | fscan            | gv$sysstat                   | Value['%scans (^[rowid range])' excluding rowid]                                                                   |
 | Redo             | gv$sysstat                   | Value['redo size'+'flashback log write bytes']                                                                     |
 | Undo             | gv$sysstat                   | Value['DBWR undo block writes']                                                                                    |
 | Temp             | gv$sysstat                   | Value['physical reads direct temporary tablespace'+'physical writes direct temporary tablespace'] * db_block_size  |
 | SQL*Net          | gv$sysstat                   | Value[stat_name like 'byte%SQL*Net%']                                                                              |
 | DBWR             | gv$iostat_function           | DBWR[SMALL_READ_MEGABYTES+SMALL_WRITE_MEGABYTES+LARGE_READ_MEGABYTES+LARGE_WRITE_MEGABYTES]                        |
 | LGWR             | gv$iostat_function           | LGWR[SMALL_READ_MEGABYTES+SMALL_WRITE_MEGABYTES+LARGE_READ_MEGABYTES+LARGE_WRITE_MEGABYTES]                        |
 | -                |-                             |-                                                                                                                   |
 | IOPS             | v$cell_db                    | METRIC_VALUE['Per Db Number of IOs'+'Per Db Number of IOs for Flash']                                              |
 | MBPS             | v$cell_db                    | METRIC_VALUE['Per Db Bytes of IO'+'Per Db Bytes of IO for Flash']                                                  |
 | FLASH            | v$cell_db                    | METRIC_VALUE['Per Db Number of IOs for Flash']                                                                     |
 | SMALL            | v$cell_db                    | METRIC_VALUE['Per Db Number of small IOs'+'Per Db Number of small IOs for Flash']                                  |
 | BandWidth        | gv$sysstat                   | Value['cell physical IO interconnect bytes']                                                                       |
 | Offload          | gv$sysstat                   | Value['cell physical IO bytes eligible for predicate offload'+'cell physical write IO bytes eligible for offload'] |
 | OflOut           | gv$sysstat                   | 100 * Value['cell physical IO interconnect bytes returned by smart scan'] / <BandWidth>                            |
 | OflEff           | gv$sysstat                   | 100-100*Value['cell physical IO interconnect bytes returned by smart scan']/(<Unzip>+<SISave>+<CCSave>)            |
 | Unzip            | gv$sysstat                   | Value['cell IO uncompressed bytes']                                                                                |
 | zip              | gv$sysstat                   | Value['HCC scan cell bytes compressed'+'HCC scan rdbms bytes compressed']                                          |
 | OptRead          | gv$sysstat                   | Value['physical read total bytes optimized']                                                                       |
 | OptWrite         | gv$sysstat                   | Value['physical write total bytes optimized']                                                                      |
 | CellIM           | gv$sysstat                   | Value['cell physical IO bytes processed for IM capacity'+'cell physical IO bytes processed for IM query']          |
 | SISave           | gv$sysstat                   | Value['cell physical IO bytes saved by storage index']                                                             |
 | CCSave           | gv$sysstat                   | Value['cell physical IO bytes saved by columnar cache']                                                            |
 | FcHit            | gv$sysstat                   | 100 * Value['cell flash cache read hits'+'cell ram cache read hits'] / Value['physical read total IO requests']    |
 | -                |-                             |-                                                                                                                   |
 | IM-LIO           | gv$sysstat                   | Value['session logical reads - IM']                                                                                |
 | LIO(%)           | gv$sysstat                   | 100 * Value['session logical reads - IM'] / Value['session logical reads']                                         |
 | Bytes            | gv$sysstat                   | Value['IM scan bytes in-memory']                                                                                   |
 | Unzip            | gv$sysstat                   | Value['IM scan bytes uncompressed']                                                                                |
 | IMCU             | gv$sysstat                   | Value['IM scan CUs current']                                                                                       |
 | Prun             | gv$sysstat                   | 100 * Value['IM scan CUs predicates optimized'+'IM scan CUs pruned'] / <IMCU>                                      |
 | Miss             | gv$sysstat                   | Value['IM scan CUs invalid or missing revert to on disk extent']                                                   |
 | Rows             | gv$sysstat                   | Value['IM scan rows']                                                                                              |
 | Valid            | gv$sysstat                   | 100 * Value['IM scan rows valid']     / Value['IM scan rows']                                                      |
 | Proj             | gv$sysstat                   | 100 * Value['IM scan rows projected'] / Value['IM scan rows']                                                      |
 | Skip             | gv$sysstat                   | 100 * Value['IM scan rows optimized'] / Value['IM scan rows']                                                      |
 | Exclude          | gv$sysstat                   | 100 * Value['IM scan rows excluded']  / Value['IM scan rows']                                                      |
 | pcode            | gv$sysstat                   | Value['IM scan rows pcode aggregated']                                                                             |
 | Popr             | gv$sysstat                   | Value['IM populate rows'+'IM prepopulate rows']                                                                    |
 | re-Popr          | gv$sysstat                   | Value['IM repopulate (trickle incremental) total rows'+'IM repopulate rows']                                       |
 | IMA              | gv$sysstat                   | Value['key vector CU codes processed']                                                                             |
 | IMDS             | gv$sysstat                   | Value['IM scan (dynamic) rows']                                                                                    |
 | JP               | gv$sysstat                   | Value['vector group by accumspace size']                                                                           |
 | IMEU             | gv$sysstat                   | Value['IM scan EU rows']                                                                                           |
 | -                |-                             |-                                                                                                                   |
 | Traffic          | gv$sysstat                   | Cluster data transfer in bytes, similar to AWR                                                                     |
 | enq              | gv$sysstat                   | 1E4 * Value['global enqueue get time'] / Value['global enqueue gets sync'+'global enqueue gets async']             |
 | Lost             | gv$sysstat                   | Value['gc blocks lost'+'gc blocks corrupt'] * db_block_size                                                        |
 | Fail             | gv$system_event              | Value['gc cr failure']                                                                                             |
 | CR Rec           | gv$sysstat                   | Value['gc cr blocks received'] * db_block_size                                                                     |
 | CR Busy          | gv$instance_cache_transfer   | CR_BUSY * db_block_size                                                                                            |
 | CR Traf          | gv$instance_cache_transfer   | CR_CONGESTED * db_block_size                                                                                       |
 | CR Avg           | gv$sysstat                   | 1E4 * Value['gc cr block receive time'] /  Value['gc cr blocks received']                                          |
 | CR Bld           | gv$sysstat                   | 1E4 * Value['gc cr block build time'+'gc cr multiblock grant time'] / Value['gc cr blocks served']                 |
 | CR Fls           | gv$sysstat                   | 1E4 * Value['gc cr block flush time'] / Value['gc cr blocks served']                                               |
 | CU Rec           | gv$sysstat                   | Value['gc current blocks received']                                                                                |
 | CU Busy          | gv$instance_cache_transfer   | CU_BUSY * db_block_size                                                                                            |
 | CU Traf          | gv$instance_cache_transfer   | CU_CONGESTED * db_block_size                                                                                       |
 | CU Avg           | gv$sysstat                   | 1E4 * Value['gc current block receive time'] /  Value['gc current blocks received']                                |
 | CU Fls           | gv$sysstat                   | 1E4 * Value['gc current block build time'+'gc current multiblock grant time']/Value['current current blocks served']|
 | CU Pin           | gv$sysstat                   | 1E4 * Value['gc current block pin time'] / Value['gc current blocks served']                                       |
 | -                |-                             |-                                                                                                                   |
 | WAIT_CLASS       | gv$system_event              | WAIT_CLASS                                                                                                         |
 | TOP_SQL          | gv$active_session_history    | MAX(SQL_ID) KEEP(DENSE_RANK LAST ORDER BY <AAS> DESC) where sample_time > :prev_snap_time                          |
 | AAS              | gv$active_session_history    | COUNT(1) where sample_time > :prev_snap_time                                                                       |
 | Waits            | gv$system_event              | TOTAL_WAITS                                                                                                        |
 | Cost             | gv$system_event              | WAIT_WAITED_MICRO, and 'ON CPU' is from gv$sys_time_model                                                          |
 | PCT              | gv$system_event              | 100 * <cost> / SUM(<cost>)                                                                                         |
 | AVG              | gv$system_event              | <Cost> / TOTAL_WAITS                                                                                               |
 | Max              | gv$active_session_history    | MAX(TIME_WAITED)                                                                                                   |
|]
    --[[
        @CHECK_ACCESS_ALL: gv$px_session/gv$session/gv$latch/gv$osstat/gv$sysstat/gv$sys_time_model/gv$system_event/gv$active_session_history/gv$sqlstats={true}
        @ash_cost: 11={tm_delta_db_time*1e-6} default={1}
        @ver     : 11={} default={--}
        @gv      : 11={TABLE(gv$(cursor(} 10={(((}
        @sysstat : {12.2={json_table(sysstat,'$[*]' columns
                              inst_id number path '$[0]',
                              name    varchar2(100) path '$[1]',
                              value number path '$[2]')} 
                  default={(
                  select  extractvalue(column_value,'/ROW/INST_ID')+0 inst_id,
                          extractvalue(column_value,'/ROW/NAME') name,
                          extractvalue(column_value,'/ROW/VALUE')+0 VALUE
                  from    TABLE(XMLSEQUENCE(EXTRACT(sysstat,'/ROWSET/ROW'))))}
                  }
        @sysevent :{12.2={json_table(sysevent,'$[*]' columns
                              inst_id number path '$[0]',
                              WAIT_CLASS    varchar2(30) path '$[1]',
                              EVENT varchar2(300) path '$[2]',
                              TOTAL_WAITS number path '$[3]',
                              TIME_WAITED_MICRO number path '$[4]')}
                   default={(select extractvalue(column_value,'/ROW/INST_ID')+0 inst_id,
                            extractvalue(column_value,'/ROW/WAIT_CLASS') WAIT_CLASS,
                            extractvalue(column_value,'/ROW/EVENT') EVENT,
                            extractvalue(column_value,'/ROW/TOTAL_WAITS')+0 TOTAL_WAITS,
                            extractvalue(column_value,'/ROW/TIME_WAITED_MICRO')+0 TIME_WAITED_MICRO
                   from    TABLE(XMLSEQUENCE(EXTRACT(sysevent,'/ROWSET/ROW'))))}}
        @timemodel:{12.2={json_table(timemodel,'$[*]' columns
                              inst_id   number path '$[0]',
                              stat_name varchar2(100) path '$[1]',
                              value     number path '$[2]')} 
                    default={(select extractvalue(column_value,'/ROW/INST_ID')+0 inst_id,
                             extractvalue(column_value,'/ROW/STAT_NAME') STAT_NAME,
                             extractvalue(column_value,'/ROW/VALUE')+0 VALUE
                    from     TABLE(XMLSEQUENCE(EXTRACT(timemodel,'/ROWSET/ROW'))))}
                    } 
        @check_access_celldb: {v$cell_db={(
                  SELECT SUM(decode(METRIC_NAME,'Per Db Number of IOs',METRIC_VALUE,'Per Db Number of IOs for Flash',METRIC_VALUE)) IOPS,
                         SUM(decode(METRIC_NAME,'Per Db Bytes of IO',METRIC_VALUE,'Per Db Bytes of IO for Flash',METRIC_VALUE)) MBPS,
                         SUM(decode(METRIC_NAME,'Per Db Number of IOs for Flash',METRIC_VALUE)) FLASH,
                         SUM(decode(METRIC_NAME,'Per Db Number of small IOs',METRIC_VALUE,'Per Db Number of small IOs for Flash',METRIC_VALUE)) SMALL
                  FROM   V$CELL_DB
                ),}, default={}}
        &statfilter: {
            default={:V2 IS NULL OR regexp_like(name,:v2,'i')},
            im={name like '%IM%' or name like 'key vectors%' or name like 'vector%'}
        }
        &V1: default={&instance}
        &statfilter1: default={} im={1}
        &global_stats:{
          default={[[/*grid={topic='System Stats(Excluding Profiles)',include_zero=true,height=0}*/
              SELECT inst,name,sum(value) value 
              FROM ( 
                SELECT /*+no_expand*/ &inst1  inst, 
                       substr(NAME,1,45) name, 
                       value
                FROM   &sysstat
                WHERE &inst_filter
                AND   (:V2 IS NOT NULL OR value>0)
                AND   (&statfilter)
                AND   ((:statfilter1 IS NOT NULL OR :V2 IS NOT NULL) OR 
                       NAME not like '%SQL*Net%' AND NAME not like 'OS%' AND NAME not in (
                            'DB time',
                            'logical read bytes from cache',
                            'physical read bytes',
                            'physical write bytes',
                            'user logons cumulative',
                            'user calls',
                            'execute count',
                            'user commits','user rollbacks',
                            'parse count (total)',
                            'parse count (hard)',
                            'session cursor cache hits',
                            'cell flash cache read hits',
                            'session logical reads',
                            'physical read total bytes',
                            'physical write total bytes',
                            'redo size',
                            'physical read total bytes optimized',
                            'cell physical IO bytes eligible for predicate offload',
                            'physical read total bytes',
                            'cell physical IO interconnect bytes returned by smart scan',
                            'physical write total bytes optimized',
                            'cell physical IO bytes saved by storage index',
                            'physical read total IO requests',
                            'cell IO uncompressed bytes',
                            'cell physical IO interconnect bytes',
                            'IM scan bytes uncompressed',
                            'IM scan bytes in-memory',
                            'IM populate bytes from storage',
                            'IM repopulate (trickle) bytes from storage',
                            'IM scan rows',
                            'IM scan rows valid',
                            'IM scan rows optimized',
                            'IM scan rows excluded',
                            'IM scan rows projected',
                            'IM populate rows',
                            'IM populate rows',
                            'cell physical IO interconnect bytes', 
                            'IM repopulate (trickle incremental) total rows',
                            'IM prepopulate bytes from storage',
                            'IM scan rows pcode aggregated','session logical reads - IM',
                            'IM scan CUs invalid or missing revert to on disk extent',
                            'temp space allocated (bytes)',
                            'cell physical IO bytes saved by columnar cache',
                            'cell physical IO bytes eligible for smart IOs',
                            'physical reads direct', 'physical writes direct','cell physical write IO bytes eligible for offload',
                            'cell physical IO bytes processed for IM capacity','cell physical IO bytes processed for IM query',
                            'session uga memory','session pga memory','session uga memory max','session pga memory max'))
                )
              GROUP BY inst,name]]},

            filestat={[[/*grid={topic='File I/O Stats',height=-1,order_by='-bytes,-tablespace_or_file',fixed_title='on'}*/ 
                WITH stat AS
                     (SELECT inst,
                             TABLESPACE_NAME,
                             regexp_substr(file_name, '[^\\/]+$') file_name,
                             PHYRDS + PHYWRTS IOPS,
                             BYTES / BLOCKS * (PHYBLKRD + PHYBLKWRT) bytes,
                             PHYRDS READS,
                             (READTIM + WRITETIM) * 10000 AVG_WAIT
                      FROM   DBA_DATA_FILES a
                      JOIN   (SELECT &inst1 inst, a.*
                             FROM    gv$filestat a
                             WHERE  (:V2 IS NOT NULL OR PHYRDS + PHYWRTS > 0)
                             AND    (&inst_filter)) b
                      ON     b.file# = a.file_id
                      UNION ALL
                      SELECT inst,
                             TABLESPACE_NAME,
                             regexp_substr(file_name, '[^\\/]+$') file_name,
                             PHYRDS + PHYWRTS IOPS,
                             BYTES / BLOCKS * (PHYBLKRD + PHYBLKWRT) bytes,
                             PHYRDS READS,
                             (READTIM + WRITETIM) * 10000 AVG_WAIT
                      FROM   DBA_TEMP_FILES a
                      JOIN   (SELECT &inst1 inst, a.*
                             FROM    gv$tempstat a
                             WHERE  (:V2 IS NOT NULL OR PHYRDS + PHYWRTS > 0)
                             AND    (&inst_filter)) b
                      ON     b.file# = a.file_id)
                SELECT * FROM (  
                    SELECT inst,
                           NVL2(file_name, 
                            '[F]'||case when upper(file_name) like TABLESPACE_NAME||'%' then file_name else SUBSTR(TABLESPACE_NAME, 1, 20) || '->' || file_name end, 
                            '[T]'||substr(tablespace_name,1,30)) tablespace_or_file,
                           SUM(iops) iops,
                           SUM(bytes) bytes,
                           SUM(READS) READS,
                           SUM(avg_Wait) avg_wait
                    FROM   stat
                    GROUP  BY inst, tablespace_name, ROLLUP(file_name))  
                WHERE UPPER(tablespace_or_file) LIKE upper(q'{%&V2%}')]]}，
            
            dlm={[[/*grid={topic='DLM Stats',include_zero=true,height=0}*/
                SELECT /*+no_expand*/ &inst1  inst, 
                       substr(NAME,1,45) name, 
                       value
                FROM  gv$dlm_misc
                WHERE &inst_filter
                AND   (:V2 IS NOT NULL OR value>0)
                AND   (&statfilter)]]}
        }
        &filter: default={} f={AND (&0)}
        &inst1: default={decode(:V1,'0',''||inst_id,decode(count(distinct inst_id) over(),1,''||inst_id,'*'))}
        &inst_filter: default={(:V1 IS NULL AND (:snap_cmd is null or inst_id=userenv('instance')) OR :V1 in(''||INST_ID,'0','a'))}
        &secs : 11.2={WAIT_TIME_MICRO} default={seconds_in_wait*1e6}
        &sql1: {sql={[[ 
                        SELECT /*grid={topic='Active SQLs',height=0,include_zero=true,order_by='-aas,-ela',per_second='off'}*/ * 
                        FROM (
                            SELECT inst,
                                   max(sql_id) keep(dense_rank last order by sess*ela) top_sql,
                                   SUM(sess) sess,
                                   round(sum(sess*ela),2) WAIT,
                                   MAX(sql_text) keep(dense_rank last order by sess*ela) sql_text
                            FROM (
                                SELECT &inst1 inst,A.*
                                FROM &gv
                                    SELECT /*+ignore_me no_merge(a) leading(a) use_nl(b) push_pred(b) 
                                              opt_estimate(table a rows=10) 
                                              opt_estimate(table b rows=1000000)*/ DISTINCT
                                           inst_id,
                                           a.sql_id,
                                           nvl(b.force_matching_signature,0) sig,
                                           greatest(a.cnt,b.users_executing) sess,
                                           elapsed_time/greatest(1,executions,parse_calls) ela,
                                           substr(TRIM(regexp_replace(REPLACE(b.sql_text, chr(0)), '\s+', ' ')), 1, 80) sql_text
                                    FROM (
                                        SELECT USERENV('instance') inst_id,
                                               sql_id,
                                               sql_child_number,
                                               COUNT(1) cnt
                                        FROM   v$session
                                        WHERE  sql_id IS NOT NULL and wait_class!='Idle'
                                        GROUP  BY sql_id,sql_child_number) a,
                                        v$sql b
                                    WHERE  &inst_filter
                                    AND    a.sql_id = b.sql_id
                                    AND    a.sql_child_number = b.child_number
                                    AND    b.sql_text NOT LIKE '%ignore_me%'))) A)
                            GROUP BY inst,decode(sig,0,sql_id,''||sig)
                            ORDER BY wait desc,sess desc,sql_text)
                        WHERE  ROWNUM <= 30]]},
                latch={[[
                        SELECT inst,name,
                               sum(ms) "ms",
                               sum(gets) "Gets",
                               sum(misses) "Misses",
                               sum(sleeps) "Sleeps",
                               sum(IMGETS) "ImGets",
                               sum(IMMISSES) "ImMisses",
                               sum(SPINS) "Spins"
                        FROM ( /*grid={topic='System Latch',fixed_title=true,height=0,order_by="-ms"}*/
                            SELECT &inst1 inst, 
                                    substr(NAME,1,40) name,
                                    WAIT_TIME/1000 ms,
                                    GETS,
                                    MISSES,
                                    SLEEPS,
                                    IMMEDIATE_GETS IMGETS,
                                    IMMEDIATE_MISSES IMMISSES,
                                    SPIN_GETS SPINS
                            FROM   gv$latch_parent
                            WHERE  (GETS+IMMEDIATE_GETS+MISSES+IMMEDIATE_MISSES+SLEEPS+SPIN_GETS>0)
                            AND    &inst_filter
                        ) GROUP BY inst,name]]},
                iostat={[[/*grid={topic='System I/O Stats (S=Single-Block L=Multi-Block R=Read W=Write)',fixed_title=true,height=0,order_by='-bytes'}*/
                        SELECT nvl(inst,'*') inst,
                               nvl(func,'-TOTAL-') "Func",
                               --SUM(SUM(mbs)) OVER(PARTITION BY inst, func) "F_Bytes",
                               --SUM(SUM(reqs)) OVER(PARTITION BY inst, func) "F_IOPS",
                               fname "File",
                               SUM(reqs) "IOPS",
                               SUM(mbs) "Bytes",
                               SUM(SMALL_READ_MEGABYTES+LARGE_READ_MEGABYTES)  * 1024 * 1024 read,
                               SUM(SMALL_WRITE_MEGABYTES+LARGE_WRITE_MEGABYTES)  * 1024 * 1024 write,
                               '|' "|",
                               SUM(SMALL_READ_REQS + SMALL_WRITE_REQS) s_iops,
                               SUM(SMALL_READ_MEGABYTES) * 1024 * 1024 s_r,
                               SUM(SMALL_WRITE_MEGABYTES) * 1024 * 1024 s_w,
                               '|' "|",
                               SUM(LARGE_READ_REQS + LARGE_WRITE_REQS) l_iops,
                               SUM(LARGE_READ_MEGABYTES) * 1024 * 1024 l_r,
                               SUM(LARGE_WRITE_MEGABYTES) * 1024 * 1024 l_w
                        FROM   (SELECT &inst1 inst,
                                       regexp_substr(FUNCTION_NAME,'\S+') func,
                                       regexp_substr(FILETYPE_NAME,'\S+') fname,
                                       (SMALL_READ_MEGABYTES + SMALL_WRITE_MEGABYTES + LARGE_READ_MEGABYTES + LARGE_WRITE_MEGABYTES)*1024*1024 mbs,
                                       SMALL_READ_REQS + SMALL_WRITE_REQS + LARGE_READ_REQS + LARGE_WRITE_REQS reqs,
                                       a.*
                                FROM   gv$iostat_function_detail a 
                                WHERE  &inst_filter)
                        WHERE   reqs > 0
                        GROUP  BY rollup((inst, func, fname))
                        ORDER  BY "Bytes" DESC
                ]]}}
      @declare: {
        12.2={sysstat CLOB;sysevent CLOB;timemodel CLOB},
        default={sysstat xmltype;sysevent xmltype;timemodel xmltype}}
    --]]
]]*/
{
    sql={
        declare=[[&declare;bs PLS_INTEGER;]],
      [[
         $IF DBMS_DB_VERSION.VERSION>12 OR DBMS_DB_VERSION.VERSION=12 AND DBMS_DB_VERSION.RELEASE>1 $THEN
            select (select json_arrayagg(json_array(inst_id,name,value) returning clob) from gv$sysstat where value>0),
                   (select json_arrayagg(json_array(inst_id,WAIT_CLASS,EVENT,TOTAL_WAITS,TIME_WAITED_MICRO) returning clob) from gv$system_event where TOTAL_WAITS>0),
                   (select json_arrayagg(json_array(inst_id,STAT_NAME,value) returning clob) from gv$sys_time_model where value>0) 
            into sysstat,sysevent,timemodel
            from dual;
         $ELSE
            select XMLTYPE(CURSOR(select inst_id,name,value from gv$sysstat where value>0)),
                   XMLTYPE(CURSOR(select inst_id,WAIT_CLASS,EVENT,TOTAL_WAITS,TIME_WAITED_MICRO from gv$system_event where TOTAL_WAITS>0)),
                   XMLTYPE(CURSOR(select inst_id,STAT_NAME,value from gv$sys_time_model where value>0)) 
            into sysstat,sysevent,timemodel
            from dual;
         $END
         select value into bs from v$parameter where name='db_block_size';
      ]],  
      [[/*grid={topic='DB Servers'}*/
        q'!with time as(
          SELECT * FROM &gv
            SELECT logon_time current_time,sid,USERENV('instance') inst_id 
            FROM v$session a JOIN v$mystat using(sid) 
            WHERE ROWNUM<2
        ))) WHERE NOT(inst_id=userenv('instance') and sid=userenv('sid')))
        SELECT inst_id "#",
                (select to_char(nvl(max(current_time),sysdate),'HH24:MI:SS') 
                 from time b
                 where b.inst_id=c.inst_id) "OS Time",
                nullif(MAX(DECODE(stat_name, 'NUM_CPU_SOCKETS', VALUE))||'/', '/')
                || nullif(MAX(DECODE(stat_name, 'NUM_CPU_CORES', VALUE))||'/', '/') --
                || MAX(DECODE(stat_name, 'NUM_CPUS', VALUE)) --
                || '|'||MAX(DECODE(stat_name, 'LOAD', round(VALUE,1))) "CPU & Load",
                MAX(DECODE(stat_name, 'PHYSICAL_MEMORY_BYTES', value)) "PhyMem"
        FROM   gv$osstat c
        GROUP  BY inst_id
        ORDER  BY 1!']],
      '+',
      [[/*grid={topic='System Time Model',max_rows=10,fixed_title=true}*/
        SELECT name,max(pct) "Pct",sum(time) "Time"
        FROM (
            WITH model as(select * from &timemodel WHERE &inst_filter)
            SELECT substr(stat_name,1,25) name,
                    VALUE * 1e-6 time,
                   (select sum(b.value)*1e-6 from model b 
                    where  b.stat_name in('background elapsed time','DB time')) pct
            FROM   model a
            WHERE  stat_name not in('DB time','background elapsed time'))
        GROUP BY name]],
      '-',
      [[/*grid={topic='CPU/Memory/Performance',fixed_title=true,include_zero=true,order_by=1,per_second='on'}*/
        SELECT /*+outline_leaf*/ * 
        FROM(
            SELECT inst_id "#", 
                SUM(DECODE(stat_name, 'BUSY_TIME', v/cpus)) "Busy",
                SUM(DECODE(stat_name, 'BUSY_TIME', v/cpus, 'IDLE_TIME', v/cpus)) idle,
                MAX(db/cpus) "DB",
                SUM(DECODE(stat_name, 'USER_TIME', v/cpus)) "User",
                SUM(DECODE(stat_name, 'SYS_TIME', v/cpus)) "Sys",
                '|' "|",
                MAX(DECODE(stat_name, 'FREE_MEMORY_BYTES', value)) "FreeMem",
                SUM(DECODE(stat_name, 'VM_IN_BYTES', value,'VM_OUT_BYTES',value)) "Swap"
            FROM  (SELECT inst_id,stat_name,VALUE,
                          max(decode(stat_name,'NUM_CPUS',value)) over(partition by inst_id) cpus,
                          (select sum(value)/1e4 FROM &timemodel a WHERE a.inst_id = b.inst_id and a.stat_name in('DB CPU','background cpu time')) db,
                          VALUE v
                   FROM   gv$osstat b
                   WHERE  &inst_filter) a 
            GROUP  BY inst_id)
        RIGHT JOIN (select inst_id "#", '|' "|", sum(TIME_WAITED_MICRO) "IO Wait",sum(total_waits) total_waits 
                    from &sysevent 
                    where wait_class like '%I/O%' or event like 'cell%physical%'
                    group by inst_id)  using("#")
        JOIN (SELECT inst_id "#",
                     sum(CASE WHEN NAME IN('physical write total IO requests','physical read total IO requests') THEN VALUE END) IOPs,
                     SUM(DECODE(NAME, 'user commits', VALUE,'user rollbacks',VALUE)) "TPS",
                     sum(CASE WHEN NAME IN('user calls') THEN VALUE END) calls
               FROM  &sysstat b
               WHERE &inst_filter
               GROUP BY inst_id) using("#")
        JOIN (select inst_id "#",value "Resp" from &timemodel where stat_name='sql execute elapsed time') using("#")
        ]],
      '|', &sql1,
      '_',{
          &global_stats,
          '|', {
            [[
            SELECT inst, /*grid={topic='System Profiles',fixed_title=true,order_by=1}*/
                   SUM(DECODE(n, 'user logons cumulative', v)) "Logon",
                   SUM(DECODE(n, 'user calls', v)) "Call",
                   SUM(DECODE(n, 'execute count', v)) "Exec",
                   SUM(DECODE(n, 'parse count (total)', v)) "Parse",
                   SUM(DECODE(n, 'parse count (hard)', v)) "Hard",
                   '|' "|",
                   SUM(DECODE(n, 'session logical reads', v))*bs "Buffer",
                   SUM(DECODE(n, 'physical read total bytes', v)) "PhyRead",
                   SUM(DECODE(n, 'physical write total bytes', v)) "PhyWrite",
                   SUM(DECODE(n, 'physical reads direct', v))*bs "dxr",
                   SUM(DECODE(n, 'physical writes direct', v))*bs "dxw",
                   SUM(CASE WHEN n LIKE '%scans (direct read)%' THEN v END) "dxscan",
                   SUM(DECODE(n,'table scans (short tables)',v,'table scans (long tables)',v,'index fast full scans (full)',v)) "fscan",
                   SUM(DECODE(n, 'redo size', v,'flashback log write bytes',v)) "Redo",
                   SUM(decode(n,'DBWR undo block writes',v))*bs "Undo",
            &ver   (select sum(w)*1024*1024 from (select &inst1 inst,SMALL_READ_MEGABYTES+SMALL_WRITE_MEGABYTES+LARGE_READ_MEGABYTES+LARGE_WRITE_MEGABYTES w from GV$IOSTAT_FUNCTION WHERE FUNCTION_NAME='DBWR' and &inst_filter) b where b.inst=a.inst) dbwr,
            &ver   (select sum(w)*1024*1024 from (select &inst1 inst,SMALL_READ_MEGABYTES+SMALL_WRITE_MEGABYTES+LARGE_READ_MEGABYTES+LARGE_WRITE_MEGABYTES w from GV$IOSTAT_FUNCTION WHERE FUNCTION_NAME='LGWR' and &inst_filter) b where b.inst=a.inst) lgwr,
                   SUM(DECODE(n,'physical reads direct temporary tablespace',v,'physical writes direct temporary tablespace',v))*bs "Temp",
                   SUM(case when n like 'byte%SQL*Net%' then v end) "SQL*Net"
            FROM   (SELECT &inst1 inst, NAME n, VALUE v FROM &sysstat WHERE &inst_filter AND value>0) a
            GROUP  BY inst]],
            '-',
            [[SELECT * FROM &check_access_celldb
                 (SELECT inst_id inst,/*grid={topic='Exadata Profiles',fixed_title=true,order_by=1,autohide=true}*/
                         SUM(DECODE(n, 'cell physical IO interconnect bytes', v)) "BandWidth",
                         SUM(DECODE(n, 'cell physical IO bytes eligible for predicate offload', v,'cell physical write IO bytes eligible for offload',v)) "Offload",
                         SUM(DECODE(n, 'cell physical IO interconnect bytes returned by smart scan', v)) "OflOut",
                         SUM(DECODE(n, 'cell physical IO interconnect bytes returned by smart scan', v)) "OflEff",
                         SUM(DECODE(n, 'cell IO uncompressed bytes', v)) "Unzip",
                         SUM(DECODE(n, 'HCC scan cell bytes compressed', v,'HCC scan rdbms bytes compressed',v)) "zip",
                         SUM(DECODE(n, 'physical read total bytes optimized', v)) "OptRead",
                         SUM(DECODE(n, 'physical write total bytes optimized', v)) "OptWrite",
                         SUM(DECODE(n, 'cell physical IO bytes processed for IM capacity', v,'cell physical IO bytes processed for IM query',v)) "CellIM",
                         SUM(DECODE(n, 'cell physical IO bytes saved by storage index', v)) "SISave",
                         SUM(DECODE(n, 'cell physical IO bytes saved by columnar cache',v)) "CCSave",
                         SUM(CASE WHEN n in ('cell ram cache read hits','cell RDMA reads','cell flash cache read hits','cell pmem cache read hits','cell xrmem cache read hits') then v end) "FcHit",
                         SUM(DECODE(n, 'physical read total IO requests',v)) phyio
                  FROM   (SELECT &inst1 inst_id, NAME n, VALUE v,
                                  count(case when NAME like '%bytes optimized%' then 1 end) over() offl
                          FROM &sysstat WHERE &inst_filter  AND value>0)
                  WHERE  offl>0
                  GROUP  BY inst_id)]],
            '-',
            [[SELECT /*grid={topic='In-Memory Stats (LIO=Logical Reads)',fixed_title=true,order_by=1,autohide=true}*/
                     inst_id inst,
                     SUM(DECODE(n, 'session logical reads - IM', v,0))*bs "IM-LIO",
                     SUM(DECODE(n, 'session logical reads', v,0))*bs "LIO(%)",
                     SUM(DECODE(n, 'IM scan bytes in-memory', v,0)) "Bytes",
                     SUM(DECODE(n, 'IM scan bytes uncompressed', v,0)) "Unzip",
                      '|' "|",
                     SUM(DECODE(n, 'IM scan CUs current',v,0)) "IMCU",
                     SUM(DECODE(n, 'IM scan CUs predicates optimized', v,'IM scan CUs pruned',v,0)) "Prun",
                     SUM(DECODE(n, 'IM scan CUs invalid or missing revert to on disk extent',v,0)) "Miss",
                     '|' "|",
                     SUM(DECODE(n, 'IM scan rows', v,0)) "Rows",
                     SUM(DECODE(n, 'IM scan rows valid', v,0)) "Valid",
                     SUM(DECODE(n, 'IM scan rows projected', v,0)) "Proj",
                     SUM(DECODE(n, 'IM scan rows optimized', v,0)) "Skip",
                     SUM(DECODE(n, 'IM scan rows excluded', v,0)) "Exclude",
                     SUM(DECODE(n, 'IM scan rows pcode aggregated',v)) "pcode",
                     SUM(DECODE(n, 'IM populate rows', v,'IM prepopulate rows',v,0)) "Popr",
                     SUM(DECODE(n, 'IM repopulate (trickle incremental) total rows', v,'IM repopulate rows',v,0)) "re-Popr",
                     SUM(DECODE(n, 'key vector CU codes processed', v,0)) "IMA",
                     SUM(DECODE(n, 'IM scan (dynamic) rows', v,0)) "IMDS",
                     SUM(DECODE(n, 'vector group by accumspace size', v,0)) "JP",
                     SUM(DECODE(n, 'IM scan EU rows', v,0)) "IMEU"
              FROM   (SELECT &inst1 inst_id, NAME n, VALUE v FROM &sysstat WHERE &inst_filter  AND value>0)
              GROUP  BY inst_id]],
            '-',
            [[/*grid={topic='RAC Profiles (CR=[gc cr] CU=[gc current]  Rec=Received enq=[global enqueue] Fls=Flush Traf=Congested)',fixed_title=true,order_by=1,autohide=true}*/
                SELECT c.inst,
                       SUM(DECODE(n,
                                  'gc cr blocks received',bs * v * decode(c.inst,'*',0,1),
                                  'gc cr blocks served',bs * v,
                                  'gc current blocks received',bs * v * decode(c.inst,'*',0,1),
                                  'gc current blocks served',bs * v,
                                  'ges msgs received',v * 200,
                                  'gcs msgs received',v * 200,
                                  'gcs messages sent',v * 200,
                                  'ges msgs sent',v * 200,
                                  'gc status messages sent',v * 200,
                                  'gc status messages received',v * 200,
                                  'ka messages sent',v * 200,
                                  'ka grants received',v * 200)) "Traffic",
                       SUM(DECODE(n, 'global enqueue get time',v*10000)) "enq",
                       SUM(DECODE(n, 'global enqueue gets sync',v,'global enqueue gets async',v)) "enqs",
                       SUM(bs * DECODE(n, 'gc blocks lost', v*bs, 'gc blocks corrupt', v*bs)) "Lost",
                       (select sum(w) from (select &inst1 inst,TOTAL_WAITS w from &sysevent WHERE event in('gc cr failure','gc send failures') and &inst_filter) b where b.inst=c.inst) "Fail",
                        '|' "|",
                       SUM(DECODE(n, 'gc cr blocks received', v*bs)) "CR Rec",
                       MAX(CR_BUSY*bs) "CR Busy",
                       MAX(CR_CONGESTED*bs) "CR Traf",
                       SUM(DECODE(n, 'gc cr blocks served', v)) "CR Sv",
                       SUM(DECODE(n, 'gc cr block receive time', v*10000*bs)) "CR Avg",
                       SUM(DECODE(n, 'gc cr block build time', v*10000,'gc cr multiblock grant time',v*10000)) "CR Bld",
                       SUM(DECODE(n, 'gc cr block flush time', v*10000)) "CR Fls",
                        '|' "|",
                       SUM(DECODE(n, 'gc current blocks received', v*bs)) "CU Rec",
                       MAX(CU_BUSY*bs) "CU Busy",
                       MAX(CU_CONGESTED*bs) "CU Traf",
                       SUM(DECODE(n, 'gc current blocks served', v)) "CU Sv",
                       SUM(DECODE(n, 'gc current block receive time', v*10000*bs)) "CU Avg",
                       SUM(DECODE(n, 'gc current block flush time', v*10000)) "CU Fls",
                       SUM(DECODE(n, 'gc current block pin time', v*10000)) "CU Pin"
                FROM    (SELECT inst,
                                SUM(CR_BUSY) CR_BUSY,SUM(CR_CONGESTED) CR_CONGESTED ,
                                SUM(CURRENT_BUSY) CU_BUSY,SUM(CURRENT_CONGESTED) CU_CONGESTED 
                         FROM   (select a.*,&inst1 inst from gv$instance_cache_transfer a) group by inst) c
                RIGHT JOIN  (SELECT  &inst1  inst, NAME n, VALUE v FROM &sysstat WHERE &inst_filter) a
                ON      (a.inst=c.inst)
                GROUP  BY c.inst]],
            '-',
            [[WITH ASH as(/*grid={topic='System Events',fixed_title=true,max_rows=40,order_by="-cost"}*/
                SELECT inst,event,round(SUM(cost)/greatest(:per_second*:snap_interval,1),2) aas, MAX(w) max_ms, 
                       MAX(sql_id) keep(dense_rank LAST ORDER BY cnt) top_sql,
                       round(count(distinct sql_id)/greatest(:per_second*:snap_interval,1),1) sqls
                FROM   (SELECT /*+full(a.a) leading(a.a) use_hash(a.a a.s) swap_join_inputs(a.s) FULL(A.GV$ACTIVE_SESSION_HISTORY.A)  
                                  leading(A.GV$ACTIVE_SESSION_HISTORY.A) 
                                  use_hash(A.GV$ACTIVE_SESSION_HISTORY.A A.GV$ACTIVE_SESSION_HISTORY.S) 
                                  swap_join_inputs(A.GV$ACTIVE_SESSION_HISTORY.S)*/
                               &inst1 inst, SQL_ID, SQL_PLAN_HASH_VALUE, NVL(EVENT,'ON CPU') EVENT, time_waited w,
                               &ash_cost cost,
                               SUM(&ash_cost) OVER(PARTITION BY inst_id, event) cnt
                        FROM   gv$active_session_history a
                        WHERE  sample_time >= SYSDATE - :snap_interval/86400
                        AND    &inst_filter)
                GROUP  BY inst,event)
              SELECT inst,
                     wait_class, 
                     substr(event,1,35) name,
                     top_sql,
                     lpad(SQLS,4) "SQLs",
                     aas,
                     waits "Waits",
                     '|' "|",
                     micro "Cost",
                     0 "AVG",
                     max_ms "Max"
              FROM   (SELECT inst,wait_class,event,
                             sum(total_waits) waits,sum(TIME_WAITED_MICRO) micro
                      FROM  (select &inst1 inst, wait_class,event,total_waits,TIME_WAITED_MICRO
                             from   &sysevent a 
                             WHERE (:filter is not null or total_waits>0) 
                             AND &inst_filter
                             union all
                             select &inst1 inst, 'CPU','ON CPU',1,VALUE
                             from   &timemodel a 
                             WHERE STAT_NAME in('DB CPU','background cpu time')
                             AND   value>0
                             AND &inst_filter)
                      WHERE  1=1 &filter
                      GROUP  BY inst,wait_class,event)
              LEFT   JOIN ash using(inst,event)
              WHERE  (wait_class!='Idle')]]
            }
        }
    },
    delta_by=[[IOPS,MBPS,SMALL,IO Wait,Calls,Resp,OflEff,OflIn,IM-LIO,LIO(%),dxr,dxw,dxscan,fscan,dbwr,lgwr,temp,offload,BandWidth,
               SISave,OflOut,OptRead,OptWrite,CellIM,CCSave,FcHit,phyio,Unzip,zip,ela,IMCU,PRUN,Miss,bytes,rows,Valid,skip,
               exclude,pcode,proj,pops,re-pops,popr,re-popr,IMDS,IMA,IMEU,JP,Disk,Pct,Swap,Logon,Call,Exec,TPS,Parse,Hard,CcHit,Buffer,
               PhyRead,PhyWrite,Redo,Undo,SQL*Net,value,cost,waits,GETS,MISSES,SLEEPS,IMGETS,IMMISSES,SPINS,time,Busy,idle,db,
               User,Sys,I/O,Nice,traffic,flash,CR Rec,CR Sv,CR Avg,CR Bld,CR Fls,CR Send,CU Rec,CU Sv,CU Avg,CU Pin,CU Fls,CU Send,CR Busy,CR Traf,CU Busy,CU Traf,lost,fail,enq,enqs,read,write,s_r,l_r,s_w,l_w,F_IOPS,s_iops,l_iops,reads,avg_wait,total_waits]],
    group_by="inst,sql_id,name,LOCATION,addr,#,func,file,tablespace_or_file",
    calc_rules={avg='[Cost]/[waits]',
                ['Pct']='[time]*100/[Pct]',
                ['LIO(%)']='[IM-LIO]*100/[LIO(%)]',
                ['Valid']='[Valid]*100/[rows]',
                ['Skip']='[Skip]*100/[rows]',
                ['Exclude']='[Exclude]*100/[rows]',
                ['hard']='[hard]*100/[parse]',
                ['dxr']='[dxr]*100/[PhyRead]',
                ['dxw']='[dxw]*100/[PhyWrite]',
                ['dxscan']='[dxscan]*100/[fscan]',
                ['FcHit']='[FcHit]*100/[phyio]',
                prun='[prun]*100/[IMCU]',
                FLASH='[FLASH]*100/[IOPS]',
                SMALL='[SMALL]*100/[IOPS]',
                ['OflIn']='[offload]*100/[OflIn]',
                ['OflOut']='[OflOut]*100/[BandWidth]',
                ['OflEff']='100-[OflEff]*100/([Unzip]+[SISave]+[CCSave])',
                ['Resp']='[Resp]/[Calls]',
                ['IO Wait']='[IO Wait]/[total_waits]',
                busy='[busy]*100/[idle]',
                user='[user]*100/[idle]',
                sys='[sys]*100/[idle]',
                db='[db]*100/[idle]',
                ['CR Avg']='[CR Avg]/[CR Rec]',
                ['Cu Avg']='[Cu Avg]/[Cu Rec]',
                ['CR Fls']='[CR Fls]/[CR Sv]',
                ['CU Fls']='[CU Fls]/[CU Sv]',
                ['CR Bld']='[CR Bld]/[CR Sv]',
                ['CU Pin']='[CU Pin]/[CU Sv]',
                avg_wait='[avg_wait]/[iops]',
                enq='[enq]/[enqs]',
                reads='[reads]*100/[iops]'},
    column_formatter={KMG1=[[MBPS,SISave,IM-LIO,Unzip,zip,pops,re-pops,phyMem,freeMem,Swap,Buffer,PhyRead,
                            PhyWrite,Redo,Undo,Temp,SQL*Net,OptRead,OptWrite,CellIM,CCSave,offload,BandWidth,bytes,
                            traffic,lost,CR Rec,CU Rec,CR Busy,CR Traf,CU Busy,CU Traf,dbwr,lgwr,
                            read,write,s_r,l_r,s_w,l_w]],
                     TMB1='IMCU,waits,IOPS,call,exec,TPS,parse,cchit,popr,re-popr,IMDS,IMA,IMEU,JP,rows,proj,Disk,Cache,pcode,Miss,fail,F_IOPS,s_iops,l_iops,fscan',
                     noprint='calls,ela,time,idle,total_waits,phyio,CR Sv,CU Sv,enqs',
                     USMHD1='CR Avg,CU Avg,CR Bld,CU Pin,CR Fls,CU Fls,CR Send,CU Send,IO Wait,resp,cost,max,avg,enq,avg_wait,wait',
                     ['%.1f%%']='reads,Hard,Pct,dxr,dxw,dxscan,OflIn,OflOut,valid,Skip,Exclude,OflEff,FLASH,SMALL,prun,FcHit',
                     ['HEADING #']='INST',
                     ['ADDRATIO PCT1']="cost",
                     ['#,##0']='value'}
}