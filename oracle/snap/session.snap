/*[[Generate session stats. Usage: @@NAME [options] {[<sid>|<sql_id>|-f"<filter>"] [<inst_id>] [keyword]} [-a]
    -a     : Aggregate across all matched sessions
    -f     : Customize filter on gv$session. i.e.: -f"progam like '%(P0%'"
    keyword: to keyword to filter v$sesstat

[| grid:{topic="Output fields(When execute with '-sec' then most all values are based on per second)"}
 | Field Name       | Source View                  | Description / Delta Value                                                                                          |
 | SIDS             | gv$*                         | 'sid,@inst_id' or '*' for all instances                                                                            |
 | Name             | gv$*                         | 'name' or 'stat_name'                                                                                              |
 | -                |-                             |-                                                                                                                   |
 | Pct(Time Model)  | gv$sess_time_model           | 100*value/value['DB time'+'background elapsed time']                                                               |
 | -                |-                             |-                                                                                                                   |
 | Pct(Time Model)  | gv$sys_time_model            | 100*value/value['DB time'+'background elapsed time']                                                               |
 | -                |-                             |-                                                                                                                   |
 | Scan             | gv$sesstat                   | Value['table scan rows gotten']                                                                                    |
 | IM(%)            | gv$sesstat                   | 100 * Value['IM scan rows'] / <Scan>                                                                               |
 | HCC(%)           | gv$sesstat                   | 100 * Value['HCC scan rdbms rows'+'EHCC Total Rows for Decompression'] / <Scan>                                    |
 | Sorts            | gv$sesstat                   | Value['sorts (rows)']                                                                                              |
 | Fetch            | gv$sesstat                   | Value['rows fetched via callback']                                                                                 |
 | Undos            | gv$sesstat                   | Value['undo change vector size']                                                                                   |
 | -                |-                             |-                                                                                                                   |
 | Call             | gv$sesstat                   | Value['user calls']                                                                                                |
 | Exec             | gv$sesstat                   | Value['execute count']                                                                                             |
 | Parse            | gv$sesstat                   | Value['parse count (total)']                                                                                       |
 | Hard             | gv$sesstat                   | Value['parse count (hard)'] * 100 / Value['parse count (total)']                                                   |
 | Cchit            | gv$sesstat                   | Value['session cursor cache hits']                                                                                 |
 | Buffer           | gv$sesstat                   | Value['session logical reads'] * db_block_size                                                                     |
 | PhyRead          | gv$sesstat                   | Value['physical read total bytes']                                                                                 |
 | PhyWrite         | gv$sesstat                   | Value['physical write total bytes']                                                                                |
 | dxr              | gv$sesstat                   | 100 * Value['physical reads direct'] * db_block_size / <PhyRead>                                                   |
 | dxw              | gv$sesstat                   | 100 * Value['physical writes direct'] * db_block_size / <PhyWrite>                                                 |
 | Redo             | gv$sesstat                   | Value['redo size'+'flashback log write bytes']                                                                     |
 | Undo             | gv$sesstat                   | Value['DBWR undo block writes']                                                                                    |
 | Temp             | gv$sesstat                   | Value['physical reads direct temporary tablespace'+'physical writes direct temporary tablespace'] * db_block_size  |
 | SQL*Net          | gv$sesstat                   | Value[stat_name like 'byte%SQL*Net%']                                                                              |
 | -                |-                             |-                                                                                                                   |
 | BandWidth        | gv$sesstat                   | Value['cell physical IO interconnect bytes']                                                                       |
 | Offload          | gv$sesstat                   | Value['cell physical IO bytes eligible for predicate offload'+'cell physical write IO bytes eligible for offload'] |
 | OflOut           | gv$sesstat                   | 100 * Value['cell physical IO interconnect bytes returned by smart scan'] / <BandWidth>                            |
 | OflEff           | gv$sesstat                   | 100-100*Value['cell physical IO interconnect bytes returned by smart scan']/(<Unzip>+<SISave>+<CCSave>)            |
 | Unzip            | gv$sesstat                   | Value['cell IO uncompressed bytes']                                                                                |
 | zip              | gv$sesstat                   | Value['HCC scan cell bytes compressed'+'HCC scan rdbms bytes compressed']                                          |
 | OptRead          | gv$sesstat                   | Value['physical read total bytes optimized']                                                                       |
 | OptWrite         | gv$sesstat                   | Value['physical write total bytes optimized']                                                                      |
 | CellIM           | gv$sesstat                   | Value['cell physical IO bytes processed for IM capacity'+'cell physical IO bytes processed for IM query']          |
 | SISave           | gv$sesstat                   | Value['cell physical IO bytes saved by storage index']                                                             |
 | CCSave           | gv$sesstat                   | Value['cell physical IO bytes saved by columnar cache']                                                            |
 | FcHit            | gv$sesstat                   | 100 * Value['cell flash cache read hits'+'cell ram cache read hits'] / Value['physical read total IO requests']    |
 | -                |-                             |-                                                                                                                   |
 | IM-LIO           | gv$sesstat                   | Value['session logical reads - IM']                                                                                |
 | LIO(%)           | gv$sesstat                   | 100 * Value['session logical reads - IM'] / Value['session logical reads']                                         |
 | Bytes            | gv$sesstat                   | Value['IM scan bytes in-memory']                                                                                   |
 | Unzip            | gv$sesstat                   | Value['IM scan bytes uncompressed']                                                                                |
 | IMCU             | gv$sesstat                   | Value['IM scan CUs current']                                                                                       |
 | Prun             | gv$sesstat                   | 100 * Value['IM scan CUs predicates optimized'+'IM scan CUs pruned'] / <IMCU>                                      |
 | Miss             | gv$sesstat                   | Value['IM scan CUs invalid or missing revert to on disk extent']                                                   |
 | Rows             | gv$sesstat                   | Value['IM scan rows']                                                                                              |
 | Valid            | gv$sesstat                   | 100 * Value['IM scan rows valid']     / Value['IM scan rows']                                                      |
 | Proj             | gv$sesstat                   | 100 * Value['IM scan rows projected'] / Value['IM scan rows']                                                      |
 | Skip             | gv$sesstat                   | 100 * Value['IM scan rows optimized'] / Value['IM scan rows']                                                      |
 | Exclude          | gv$sesstat                   | 100 * Value['IM scan rows excluded']  / Value['IM scan rows']                                                      |
 | pcode            | gv$sesstat                   | Value['IM scan rows pcode aggregated']                                                                             |
 | Popr             | gv$sesstat                   | Value['IM populate rows'+'IM prepopulate rows']                                                                    |
 | re-Popr          | gv$sesstat                   | Value['IM repopulate (trickle incremental) total rows'+'IM repopulate rows']                                       |
 | IMA              | gv$sesstat                   | Value['key vector CU codes processed']                                                                             |
 | IMDS             | gv$sesstat                   | Value['IM scan (dynamic) rows']                                                                                    |
 | JP               | gv$sesstat                   | Value['vector group by accumspace size']                                                                           |
 | IMEU             | gv$sesstat                   | Value['IM scan EU rows']                                                                                           |
 | -                |-                             |-                                                                                                                   |
 | Traffic          | gv$sesstat                   | Cluster data transfer in bytes, similar to AWR                                                                     |
 | enq              | gv$sesstat                   | 1E4 * Value['global enqueue get time'] / Value['global enqueue gets sync'+'global enqueue gets async']             |
 | Lost             | gv$sesstat                   | Value['gc blocks lost'+'gc blocks corrupt'] * db_block_size                                                        |
 | Fail             | gv$session_event              | Value['gc cr failure']                                                                                             |
 | CR Rec           | gv$sesstat                   | Value['gc cr blocks received'] * db_block_size                                                                     |
 | CR Avg           | gv$sesstat                   | 1E4 * Value['gc cr block receive time'] /  Value['gc cr blocks received']                                          |
 | CR Bld           | gv$sesstat                   | 1E4 * Value['gc cr block build time'+'gc cr multiblock grant time'] / Value['gc cr blocks served']                 |
 | CR Fls           | gv$sesstat                   | 1E4 * Value['gc cr block flush time'] / Value['gc cr blocks served']                                               |
 | CU Rec           | gv$sesstat                   | Value['gc current blocks received']                                                                                |
 | CU Avg           | gv$sesstat                   | 1E4 * Value['gc current block receive time'] /  Value['gc current blocks received']                                |
 | CU Fls           | gv$sesstat                   | 1E4 * Value['gc current block build time'+'gc current multiblock grant time']/Value['current current blocks served']|
 | CU Pin           | gv$sesstat                   | 1E4 * Value['gc current block pin time'] / Value['gc current blocks served']                                       |
 | -                |-                             |-                                                                                                                   |
 | WAIT_CLASS       | gv$session_event              | WAIT_CLASS                                                                                                         |
 | TOP_SQL          | gv$active_session_history    | MAX(SQL_ID) KEEP(DENSE_RANK LAST ORDER BY <AAS> DESC) where sample_time > :prev_snap_time                          |
 | AAS              | gv$active_session_history    | COUNT(1) where sample_time > :prev_snap_time                                                                       |
 | Waits            | gv$session_event              | TOTAL_WAITS                                                                                                        |
 | Cost             | gv$session_event              | WAIT_WAITED_MICRO, and 'ON CPU' is from gv$sys_time_model                                                          |
 | PCT              | gv$session_event              | 100 * <cost> / SUM(<cost>)                                                                                         |
 | AVG              | gv$session_event              | <Cost> / TOTAL_WAITS                                                                                               |
 | Max              | gv$active_session_history    | MAX(TIME_WAITED)                                                                                                   |
|]
    --[[
    @CHECK_ACCESS_ALL: gv$session/gv$px_session/gv$sesstat/gv$sess_time_model/gv$statname/gv$session_event/gv$active_session_history={true}
    &base: {default={
              WITH s1 AS (
                  SELECT inst_id, SID, &session_info sids
                  FROM  gv$session 
                  where (&filter)),
              ses AS (select /*+no_merge*/ * from
                (SELECT sids,inst_id, SID
                FROM   s1
                UNION
                SELECT sids, s2.inst_id, s2.sid
                FROM   s1, gv$px_session s2
                WHERE  s1.inst_id = s2.qcinst_id
                AND    s1.SID = s2.qcsid))}}
        &filter: {
             default={(:V1 IS NULL AND SID=USERENV('SID') or :V1 IS NOT NULL and :V1 in(''||sid,sql_id)) AND 
                      (:V2 IS NULL AND (:snap_cmd is null or inst_id=userenv('instance')) OR :V2=INST_ID OR :V2='0')}
             u={SCHEMANAME=nvl('&0',sys_context('userenv','current_schema'))}
             f={}
        }

    &session_info: default={sid||',@'||inst_id}, a={'*'}
    &statfilter: {
        default={:V3 IS NULL OR regexp_like(n,:V3,'i')},
        im={n like '%IM%' or n like 'key vectors%' or n like 'vector%'}
    }
    &statfilter1: default={} im={1}
    @ash_cost: 11={tm_delta_db_time*1e-6} default={1}
    @declares: {12.2={sysstat CLOB;sysevent CLOB;timemodel CLOB;base VARCHAR2(4000)} 
                default={sysstat xmltype;sysevent xmltype;timemodel xmltype;base xmltype}}
    @to_src: 12.2={(select json_arrayagg(json_array(sids,inst_id,sid)) from ses)} default={xmltype(cursor(select sids,inst_id,sid from ses))}
    @stats: {12.2={
               json_table(sysstat,'$[*]' columns
                          sids  varchar2(20) path '$[0]',
                          n     varchar2(100) path '$[1]',
                          v     number path '$[2]')},

            default={
                (select extractvalue(column_value,'/ROW/SIDS') sids,
                        extractvalue(column_value,'/ROW/NAME') n,
                        extractvalue(column_value,'/ROW/VALUE')+0 v
                from    TABLE(XMLSEQUENCE(EXTRACT(sysstat,'/ROWSET/ROW'))))}
    }

    @events: {12.2={json_table(sysevent,'$[*]' columns
                              sids varchar2(20) path '$[0]',
                              WAIT_CLASS    varchar2(30) path '$[1]',
                              EVENT varchar2(300) path '$[2]',
                              waits number path '$[3]',
                              micro number path '$[4]')},
             default={
                (select extractvalue(column_value,'/ROW/SIDS') sids,
                        extractvalue(column_value,'/ROW/WAIT_CLASS') WAIT_CLASS,
                        extractvalue(column_value,'/ROW/EVENT') EVENT,
                        extractvalue(column_value,'/ROW/WAITS')+0 WAITS,
                        extractvalue(column_value,'/ROW/MICRO')+0 MICRO
                from    TABLE(XMLSEQUENCE(EXTRACT(sysevent,'/ROWSET/ROW'))))}
       }

    @timemodel:{12.1={
               json_table(timemodel,'$[*]' columns
                          sids  varchar2(20) path '$[0]',
                          n     varchar2(100) path '$[1]',
                          v     number path '$[2]')},

            default={
                (select extractvalue(column_value,'/ROW/SIDS') sids,
                        extractvalue(column_value,'/ROW/STAT_NAME') n,
                        extractvalue(column_value,'/ROW/VALUE')+0 v
                from    TABLE(XMLSEQUENCE(EXTRACT(timemodel,'/ROWSET/ROW'))))}
    }

    @src:  {12.1={json_table(base,'$[*]' columns sids varchar2(20) path '$[0]',inst_id number path '$[1]',sid number path '$[2]')},
            default={
                (select extractvalue(column_value,'/ROW/SIDS') sids,
                        extractvalue(column_value,'/ROW/INST_ID')+0 INST_ID,
                        extractvalue(column_value,'/ROW/SID')+0 SID
                from    TABLE(XMLSEQUENCE(EXTRACT(base,'/ROWSET/ROW'))))}
           } 
    --]]
]]*/
{
    sql={
      declare=[[&declares;bs PLS_INTEGER;]],
      [[null;
         &base
         select &to_src into base from dual;

        $IF DBMS_DB_VERSION.VERSION>11 $THEN
            with ses as (select * from &src)
            select (select json_arrayagg(json_array(sids,name,value) returning clob)
                    from (
                        select sids,name,sum(value) value
                        from  ses
                        join  gv$sesstat using(sid,inst_id)
                        join  v$statname using(statistic#)
                        where value>0
                        group by sids,name)),
                   (select json_arrayagg(json_array(sids,WAIT_CLASS,EVENT,waits,micro) returning clob) 
                    from (
                        select sids,WAIT_CLASS,EVENT,sum(TOTAL_WAITS) waits,sum(TIME_WAITED_MICRO) micro
                        from ses 
                        join gv$session_event using(sid,inst_id) 
                        where TOTAL_WAITS>0
                        group by sids,WAIT_CLASS,EVENT)),
                  (select json_arrayagg(json_array(sids,stat_name,value) returning clob) 
                   from (
                        select sids,stat_name,sum(value) value
                        from ses 
                        join gv$sess_time_model using(sid,inst_id) 
                        where value>0
                        group by sids,stat_name))
            into sysstat,sysevent,timemodel
            from dual;
        $ELSE
            with ses as(select * from &src)
            select xmltype(cursor(
                    select sids,name,sum(value) value
                    from  ses
                    join  gv$sesstat using(sid,inst_id)
                    join  v$statname using(statistic#)
                    where value>0
                    group by sids,name)),
                   xmltype(cursor(
                    select sids,WAIT_CLASS,EVENT,sum(TOTAL_WAITS) waits,sum(TIME_WAITED_MICRO) micro
                    from ses 
                    join gv$session_event using(sid,inst_id) 
                    where TOTAL_WAITS>0
                    group by sids,WAIT_CLASS,EVENT)),
                   xmltype(cursor(
                    select sids,stat_name,sum(value) value
                    from ses 
                    join gv$sess_time_model using(sid,inst_id) 
                    where value>0
                    group by sids,stat_name))
            into sysstat,sysevent,timemodel
            from dual;
         $END
         select value into bs from v$parameter where name='db_block_size';]],  

      [[SELECT A.* FROM ( /*grid={topic='Session Stats',include_zero=true,height=0}*/
            SELECT /*+no_expand*/
                   sids,
                   substr(n,1,40) name,
                   sum(v) value
            FROM   &stats
            WHERE  (:V3 IS NOT NULL OR v>0)
            AND    (&statfilter)
            AND    ((:statfilter1 IS NOT NULL OR :V3 IS NOT NULL)  
                    OR n not in (
                        'DB time',
                        'user logons cumulative',
                        'user calls',
                        'execute count',
                        'user commits',
                        'parse count (total)',
                        'parse count (hard)',
                        'session cursor cache hits',
                        'cell flash cache read hits',
                        'session logical reads',
                        'physical read total bytes',
                        'physical write total bytes',
                        'redo size','undo change vector size',
                        'physical read total bytes optimized',
                        'cell physical IO bytes eligible for predicate offload',
                        'physical read total bytes',
                        'cell physical IO interconnect bytes returned by smart scan',
                        'physical write total bytes optimized',
                        'cell physical IO bytes saved by storage index',
                        'physical read total IO requests',
                        'cell IO uncompressed bytes',
                        'cell physical IO interconnect bytes',
                        'IM scan bytes uncompressed',
                        'IM scan bytes in-memory',
                        'IM populate bytes from storage',
                        'IM repopulate (trickle) bytes from storage',
                        'IM scan rows',
                        'IM scan rows valid',
                        'IM scan rows cache',
                        'IM scan rows projected',
                        'IM populate rows',
                        'IM repopulate (trickle incremental) total rows',
                        'IM scan rows pcode aggregated','session logical reads - IM',
                        'table scan rows gotten',
                        'recursive calls',
                        'temp space allocated (bytes)','sorts (rows)','rows fetched via callback',
                        'cell physical IO bytes eligible for smart IOs',
                        'physical reads direct', 'physical writes direct','cell physical write IO bytes eligible for offload',
                        'cell physical IO bytes processed for IM capacity','cell physical IO bytes processed for IM query',
                        'cell physical IO bytes saved by columnar cache',
                        'session uga memory','session pga memory'))
            GROUP BY sids,n) A
            ORDER BY name]],
        '|', {[[/*grid={topic='Session Time Model', fixed_title=true,max_rows=10}*/
                SELECT sids,
                       substr(n,1,35) name,
                       sum((select sum(v) 
                        from   &timemodel b 
                        where  a.sids=b.sids
                        and    b.n in('background elapsed time','DB time'))) "Pct",
                        sum(v) "Time"
                FROM   &timemodel a
                WHERE  n not in('DB time','background elapsed time')
                group by sids,n]],
              '|',
              [[/*grid={topic='Session Rows',fixed_title=true, include_zero=true,order_by="sids"}*/
                SELECT sids, 
                       SUM(DECODE(n, 'table scan rows gotten', v)) "Scan",
                       SUM(DECODE(n, 'IM scan rows', v)) "IM(%)",
                       SUM(DECODE(n, 'HCC scan rdbms rows', v,'EHCC Total Rows for Decompression',v)) "HCC(%)",
                       SUM(DECODE(n, 'sorts (rows)', v)) "Sorts",
                       SUM(DECODE(n, 'rows fetched via callback', v)) "Fetch",
                       SUM(DECODE(n, 'undo change vector size', v)) "Undos"
                FROM   &stats
                GROUP  BY sids]],
              '-',
              [[/*grid={topic='Session Profiles',fixed_title=true,include_zero=true, order_by=1}*/
                SELECT sids, 
                       SUM(DECODE(n, 'user calls', v)) "Call",
                       SUM(DECODE(n, 'recursive calls', v)) "rCall",
                       SUM(DECODE(n, 'execute count', v)) "Exec",
                       '|' "|",
                       SUM(DECODE(n, 'parse count (total)', v)) "Parse",
                       SUM(DECODE(n, 'parse count (hard)', v)) "Hard",
                       SUM(DECODE(n, 'session cursor cache hits', v)) "CcHit",
                       '|' "|",
                       SUM(DECODE(n, 'session logical reads', v))*bs "Buffer",
                       SUM(DECODE(n, 'physical read total bytes', v)) "PhyRead",
                       SUM(DECODE(n, 'physical write total bytes', v)) "PhyWrite",
                       SUM(DECODE(n, 'physical reads direct', v))*bs "dxr",
                       SUM(DECODE(n, 'physical writes direct', v))*bs "dxw",
                       SUM(DECODE(n, 'redo size', v,'flashback log write bytes',v)) "Redo",
                       SUM(decode(n, 'DBWR undo block writes',v))*bs "Undo",
                       SUM(DECODE(n, 'physical reads direct temporary tablespace',v,'physical writes direct temporary tablespace',v)) "Temp",
                       SUM(case when n like 'byte%SQL*Net%' then v end) "SQL*Net"
                FROM   &stats a
                GROUP  BY sids]],
            '-',
            [[/*grid={topic='Exadata Profiles',fixed_title=true,order_by=1,autohide=true}*/
               SELECT sids,
                     SUM(DECODE(n, 'cell physical IO interconnect bytes', v)) "BandWidth",
                     SUM(DECODE(n, 'cell physical IO bytes eligible for predicate offload', v,'cell physical write IO bytes eligible for offload',v)) "Offload",
                     SUM(DECODE(n, 'cell physical IO interconnect bytes returned by smart scan', v)) "OflOut",
                     SUM(DECODE(n, 'cell physical IO interconnect bytes returned by smart scan', v)) "OflEff",
                     SUM(DECODE(n, 'cell IO uncompressed bytes', v)) "Unzip",
                     SUM(DECODE(n, 'HCC scan cell bytes compressed', v,'HCC scan rdbms bytes compressed',v)) "zip",
                     SUM(DECODE(n, 'physical read total bytes optimized', v)) "OptRead",
                     SUM(DECODE(n, 'physical write total bytes optimized', v)) "OptWrite",
                     SUM(DECODE(n, 'cell physical IO bytes processed for IM capacity',v,'cell physical IO bytes processed for IM query',v)) "CellIM",
                     SUM(DECODE(n, 'cell physical IO bytes saved by storage index', v)) "SISave",
                     SUM(DECODE(n, 'cell physical IO bytes saved by columnar cache',v)) "CCSave",
                     SUM(DECODE(n, 'cell flash cache read hits',v,'cell ram cache read hits',v,'cell RDMA reads',v)) "FcHit",
                     SUM(DECODE(n, 'physical read total IO requests',v)) phyio
              FROM   (SELECT a.*, count(case when n like '%bytes optimized%' then 1 end) over() offl FROM &stats a)
              WHERE  offl>0
              group  by sids]],
            '-',
            [[/*grid={topic='In-Memory Stats (LIO=Logical Reads)',fixed_title=true,order_by=1,autohide=true}*/
            SELECT   sids,
                     SUM(DECODE(n, 'session logical reads - IM', v,0))*bs "IM-LIO",
                     SUM(DECODE(n, 'session logical reads', v,0))*bs "LIO(%)",
                     SUM(DECODE(n, 'IM scan bytes in-memory', v,0)) "Bytes",
                     SUM(DECODE(n, 'IM scan bytes uncompressed', v,0)) "Unzip",
                     --SUM(DECODE(n, 'IM populate bytes from storage', v,0)) "Pops",
                     --SUM(DECODE(n, 'IM repopulate (trickle) bytes from storage',v,'IM prepopulate bytes from storage', v,0)) "re-Pops",
                      '|' "|",
                     SUM(DECODE(n, 'IM scan CUs current', v,0)) "IMCU",
                     SUM(DECODE(n, 'IM scan CUs predicates optimized', v,'IM scan CUs pruned',v,0)) "Prun",
                     SUM(DECODE(n, 'IM scan CUs invalid or missing revert to on disk extent', v,0)) 
                     "Miss",
                     '|' "|",
                     SUM(DECODE(n, 'IM scan rows', v,0)) "Rows",
                     SUM(DECODE(n, 'IM scan rows valid', v,0)) "Valid",
                     SUM(DECODE(n, 'IM scan rows projected', v,0)) "Proj",
                     SUM(DECODE(n, 'IM scan rows optimized', v,0)) "Skip",
                     SUM(DECODE(n, 'IM scan rows excluded', v,0)) "Exclude",
                     SUM(DECODE(n, 'IM scan rows pcode aggregated',v)) "pcode",
                     SUM(DECODE(n, 'IM populate rows', v,'IM prepopulate rows',v,0)) "Popr",
                     SUM(DECODE(n, 'IM repopulate (trickle incremental) total rows', v,'IM repopulate rows',v,0)) "re-Popr",
                     SUM(DECODE(n, 'key vector CU codes processed', v,0)) "IMA",
                     SUM(DECODE(n, 'IM scan (dynamic) rows', v,0)) "IMDS",
                     SUM(DECODE(n, 'vector group by accumspace size', v,0)) "JP",
                     SUM(DECODE(n, 'IM scan EU rows', v,0)) "IMEU"
              FROM   &stats
              GROUP  BY sids]],
            '-',
            [[/*grid={topic='RAC Profiles (CR=[gc cr blocks] CU=[gc current blocks]  Rec=Received enq=[global enqueue])',fixed_title=true,order_by=1,autohide=true}*/
                SELECT sids,
                       SUM(DECODE(n,
                                  'gc cr blocks received',bs * v,
                                  'gc cr blocks served',bs * v,
                                  'gc current blocks received',bs * v,
                                  'gc current blocks served',bs * v,
                                  'ges msgs received',v * 200,
                                  'gcs msgs received',v * 200,
                                  'gcs messages sent',v * 200,
                                  'ges msgs sent',v * 200,
                                  'gc status messages sent',v * 200,
                                  'gc status messages received',v * 200,
                                  'ka messages sent',v * 200,
                                  'ka grants received',v * 200)) "Traffic",
                       SUM(bs * DECODE(n, 'gc blocks lost', v)) "Lost",
                       (select sum(waits) from &events b where b.sids=a.sids and event='gc cr failure') "Fail",
                       SUM(DECODE(n, 'global enqueue get time',v*10000)) "enq",
                        '|' "|",
                       SUM(bs * DECODE(n, 'gc cr blocks served', v, 'gc cr blocks received', v)) cr,
                       SUM(bs * DECODE(n, 'gc cr blocks received', v)) "CR Rec",
                       SUM(bs * DECODE(n, 'gc cr block receive time', v*10000)) "CR Rec Avg",
                       SUM(bs * DECODE(n, 'gc cr blocks flushed', v)) "CR Flush",
                       SUM(bs * DECODE(n, 'gc cr block flush time', v*10000)) "CR FL Avg",
                        '|' "|",
                       SUM(bs * DECODE(n, 'gc current blocks received', v, 'gc current blocks served', v)) cu,
                       SUM(bs * DECODE(n, 'gc current blocks received', v)) "CU Rec",
                       SUM(bs * DECODE(n, 'gc current block receive time', v*10000)) "CU Rec Avg",
                       SUM(bs * DECODE(n, 'gc current blocks flushed', v)) "CU Flush",
                       SUM(bs * DECODE(n, 'gc current block flush time', v*10000)) "CU FL Avg"
                FROM   &stats a
                GROUP  BY sids;
               ]],
            '-',
            [[/*grid={topic='Session Events',fixed_title=true,max_rows=40,order_by="-cost"}*/
              WITH ASH as(
                SELECT sids,event,round(SUM(cost)/greatest(:per_second*:snap_interval,1),2) aas, MAX(w) max_ms, 
                       MAX(sql_id) keep(dense_rank LAST ORDER BY cnt) top_sql,
                       round(count(distinct sql_id)/greatest(:per_second*:snap_interval,1),1) sqls
                FROM   (SELECT sids, SQL_ID, SQL_PLAN_HASH_VALUE, nvl(EVENT,'ON CPU') event, time_waited w,
                               &ash_cost cost,
                               SUM(&ash_cost) OVER(PARTITION BY inst_id, event) cnt
                        FROM   (select a.*, session_id sid from gv$active_session_history a) ash 
                        join   &src src using (inst_id,sid)
                        WHERE  sample_time >= SYSDATE - :snap_interval/86400)
                GROUP  BY sids,event)
              SELECT sids,
                     wait_class, 
                     substr(event,1,35) name,
                     top_sql,
                     lpad(SQLS,4) "SQLs",
                     aas,
                     waits "Waits",
                     '|' "|",
                     micro "Cost",
                     0 "AVG",
                     max_ms "Max"
              FROM   (select sids,wait_class,event,waits,micro from &events
                      union all
                      select sids,'CPU','ON CPU',count(1),sum(v) v
                      from  &timemodel
                      group by sids)
              LEFT   JOIN ash using(sids,event)]]
            }
    },
    group_by="sids,name",
    delta_by=[[rCall,undos,sorts,fetch,scan,IM(%),HCC(%),IOPS,MBPS,SMALL,IO Wait,Calls,Resp,OflEff,OflIn,IM-LIO,LIO(%),dxr,dxw,dbwr,lgwr,offload,BandWidth,
               SISave,OflOut,OptRead,OptWrite,CellIM,CCSave,FcHit,phyio,Unzip,zip,ela,temp,
               IMCU,Prun,Miss,bytes,rows,Valid,skip,
               exclude,pcode,proj,pops,re-pops,popr,re-popr,IMDS,IMA,IMEU,JP,Disk,Pct,Swap,Logon,Call,Exec,TPS,Parse,Hard,CcHit,Buffer,
               PhyRead,PhyWrite,Redo,Undo,SQL*Net,value,cost,waits,GETS,MISSES,SLEEPS,IMGETS,IMMISSES,SPINS,time,Busy,idle,db,
               User,Sys,I/O,Nice,traffic,flash,cr,cu,CR Rec,Cu Rec,CR Flush,CU Flush,CR FL Avg,CU FL Avg,
               lost,fail,enq,read,write,s_r,l_r,s_w,l_w,F_IOPS,s_iops,l_iops,reads,avg_wait,total_waits]],
    calc_rules={['IM(%)']='[IM(%)]*100/[scan]',
                ['HCC(%)']='[HCC(%)]*100/[scan]',
                avg='[Cost]/[waits]',
                ['Pct']='[time]*100/[Pct]',
                ['LIO(%)']='[IM-LIO]*100/[LIO(%)]',
                ['Valid']='[Valid]*100/[rows]',
                ['Skip']='[Skip]*100/[rows]',
                ['Exclude']='[Exclude]*100/[rows]',
                ['hard']='[hard]*100/[parse]',
                ['dxr']='[dxr]*100/[PhyRead]',
                ['dxw']='[dxw]*100/[PhyWrite]',
                ['FcHit']='[FcHit]*100/[phyio]',
                FLASH='[FLASH]*100/[IOPS]',
                SMALL='[SMALL]*100/[IOPS]',
                ['OflIn']='[offload]*100/[OflIn]',
                ['OflOut']='[OflOut]*100/[BandWidth]',
                ['OflEff']='100-[OflEff]*100/([Unzip]+[SISave])',
                ['Resp']='[Resp]/[Calls]',
                ['IO Wait']='[IO Wait]/[total_waits]',
                busy='[busy]*100/[idle]',
                user='[user]*100/[idle]',
                sys='[sys]*100/[idle]',
                db='[db]*100/[idle]',
                prun='[prun]*100/[IMCU]',
                ['CR Rec Avg']='[CR Rec Avg]/[CR Rec]',
                ['Cu Rec Avg']='[Cu Rec Avg]/[Cu Rec]',
                ['CR FL Avg']='[CR FL Avg]/[CR Flush]',
                ['CU FL Avg']='[CU FL Avg]/[CU Flush]',
                avg_wait='[avg_wait]/[iops]',
                reads='[reads]*100/[iops]'},
    column_formatter={KMG1=[[MBPS,SISave,IM-LIO,Unzip,zip,pops,re-pops,phyMem,freeMem,Swap,Buffer,PhyRead,
                            PhyWrite,Redo,Undo,Temp,SQL*Net,OptRead,OptWrite,CellIM,CCSave,offload,BandWidth,bytes,
                            traffic,cr,cu,CR Rec,Cu Rec,CR Flush,CU Flush,CR FL Avg,CU FL Avg,lost,dbwr,lgwr,
                            read,write,s_r,l_r,s_w,l_w]],
                     TMB1='rCall,undos,sorts,fetch,scan,IMCU,waits,IOPS,call,exec,TPS,parse,cchit,popr,re-popr,IMDS,IMA,IMEU,JP,rows,proj,Disk,Cache,pcode,Miss,fail,F_IOPS,s_iops,l_iops',
                     noprint='calls,ela,time,idle,total_waits,phyio',
                     USMHD1='CR Rec Avg,Cu Rec Avg,CR FL Avg,CU FL Avg,IO Wait,resp,cost,max,avg,enq,avg_wait',
                     ['%.1f%%']='prunreads,Hard,Pct,dxr,dxw,OflIn,OflOut,valid,Skip,Exclude,OflEff,FLASH,SMALL,prun,FcHit',
                     ['HEADING #']='INST',
                     ['ADDRATIO PCT1']="cost",
                     ['#,##0']='value'}
}